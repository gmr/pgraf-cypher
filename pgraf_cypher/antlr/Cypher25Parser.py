# Generated from Cypher25Parser.g4 by ANTLR 4.13.2
import sys
import typing

from antlr4 import (
    ATN,
    DFA,
    ATNDeserializer,
    NoViableAltException,
    Parser,
    ParserATNSimulator,
    ParserRuleContext,
    ParseTreeListener,
    PredictionContextCache,
    RecognitionException,
    Token,
    TokenStream,
)


def serializedATN() -> list[int]:
    return [
        4,
        1,
        326,
        3868,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        2,
        113,
        7,
        113,
        2,
        114,
        7,
        114,
        2,
        115,
        7,
        115,
        2,
        116,
        7,
        116,
        2,
        117,
        7,
        117,
        2,
        118,
        7,
        118,
        2,
        119,
        7,
        119,
        2,
        120,
        7,
        120,
        2,
        121,
        7,
        121,
        2,
        122,
        7,
        122,
        2,
        123,
        7,
        123,
        2,
        124,
        7,
        124,
        2,
        125,
        7,
        125,
        2,
        126,
        7,
        126,
        2,
        127,
        7,
        127,
        2,
        128,
        7,
        128,
        2,
        129,
        7,
        129,
        2,
        130,
        7,
        130,
        2,
        131,
        7,
        131,
        2,
        132,
        7,
        132,
        2,
        133,
        7,
        133,
        2,
        134,
        7,
        134,
        2,
        135,
        7,
        135,
        2,
        136,
        7,
        136,
        2,
        137,
        7,
        137,
        2,
        138,
        7,
        138,
        2,
        139,
        7,
        139,
        2,
        140,
        7,
        140,
        2,
        141,
        7,
        141,
        2,
        142,
        7,
        142,
        2,
        143,
        7,
        143,
        2,
        144,
        7,
        144,
        2,
        145,
        7,
        145,
        2,
        146,
        7,
        146,
        2,
        147,
        7,
        147,
        2,
        148,
        7,
        148,
        2,
        149,
        7,
        149,
        2,
        150,
        7,
        150,
        2,
        151,
        7,
        151,
        2,
        152,
        7,
        152,
        2,
        153,
        7,
        153,
        2,
        154,
        7,
        154,
        2,
        155,
        7,
        155,
        2,
        156,
        7,
        156,
        2,
        157,
        7,
        157,
        2,
        158,
        7,
        158,
        2,
        159,
        7,
        159,
        2,
        160,
        7,
        160,
        2,
        161,
        7,
        161,
        2,
        162,
        7,
        162,
        2,
        163,
        7,
        163,
        2,
        164,
        7,
        164,
        2,
        165,
        7,
        165,
        2,
        166,
        7,
        166,
        2,
        167,
        7,
        167,
        2,
        168,
        7,
        168,
        2,
        169,
        7,
        169,
        2,
        170,
        7,
        170,
        2,
        171,
        7,
        171,
        2,
        172,
        7,
        172,
        2,
        173,
        7,
        173,
        2,
        174,
        7,
        174,
        2,
        175,
        7,
        175,
        2,
        176,
        7,
        176,
        2,
        177,
        7,
        177,
        2,
        178,
        7,
        178,
        2,
        179,
        7,
        179,
        2,
        180,
        7,
        180,
        2,
        181,
        7,
        181,
        2,
        182,
        7,
        182,
        2,
        183,
        7,
        183,
        2,
        184,
        7,
        184,
        2,
        185,
        7,
        185,
        2,
        186,
        7,
        186,
        2,
        187,
        7,
        187,
        2,
        188,
        7,
        188,
        2,
        189,
        7,
        189,
        2,
        190,
        7,
        190,
        2,
        191,
        7,
        191,
        2,
        192,
        7,
        192,
        2,
        193,
        7,
        193,
        2,
        194,
        7,
        194,
        2,
        195,
        7,
        195,
        2,
        196,
        7,
        196,
        2,
        197,
        7,
        197,
        2,
        198,
        7,
        198,
        2,
        199,
        7,
        199,
        2,
        200,
        7,
        200,
        2,
        201,
        7,
        201,
        2,
        202,
        7,
        202,
        2,
        203,
        7,
        203,
        2,
        204,
        7,
        204,
        2,
        205,
        7,
        205,
        2,
        206,
        7,
        206,
        2,
        207,
        7,
        207,
        2,
        208,
        7,
        208,
        2,
        209,
        7,
        209,
        2,
        210,
        7,
        210,
        2,
        211,
        7,
        211,
        2,
        212,
        7,
        212,
        2,
        213,
        7,
        213,
        2,
        214,
        7,
        214,
        2,
        215,
        7,
        215,
        2,
        216,
        7,
        216,
        2,
        217,
        7,
        217,
        2,
        218,
        7,
        218,
        2,
        219,
        7,
        219,
        2,
        220,
        7,
        220,
        2,
        221,
        7,
        221,
        2,
        222,
        7,
        222,
        2,
        223,
        7,
        223,
        2,
        224,
        7,
        224,
        2,
        225,
        7,
        225,
        2,
        226,
        7,
        226,
        2,
        227,
        7,
        227,
        2,
        228,
        7,
        228,
        2,
        229,
        7,
        229,
        2,
        230,
        7,
        230,
        2,
        231,
        7,
        231,
        2,
        232,
        7,
        232,
        2,
        233,
        7,
        233,
        2,
        234,
        7,
        234,
        2,
        235,
        7,
        235,
        2,
        236,
        7,
        236,
        2,
        237,
        7,
        237,
        2,
        238,
        7,
        238,
        2,
        239,
        7,
        239,
        2,
        240,
        7,
        240,
        2,
        241,
        7,
        241,
        2,
        242,
        7,
        242,
        2,
        243,
        7,
        243,
        2,
        244,
        7,
        244,
        2,
        245,
        7,
        245,
        2,
        246,
        7,
        246,
        2,
        247,
        7,
        247,
        2,
        248,
        7,
        248,
        2,
        249,
        7,
        249,
        2,
        250,
        7,
        250,
        2,
        251,
        7,
        251,
        2,
        252,
        7,
        252,
        2,
        253,
        7,
        253,
        2,
        254,
        7,
        254,
        2,
        255,
        7,
        255,
        2,
        256,
        7,
        256,
        2,
        257,
        7,
        257,
        2,
        258,
        7,
        258,
        2,
        259,
        7,
        259,
        2,
        260,
        7,
        260,
        2,
        261,
        7,
        261,
        2,
        262,
        7,
        262,
        2,
        263,
        7,
        263,
        2,
        264,
        7,
        264,
        2,
        265,
        7,
        265,
        2,
        266,
        7,
        266,
        2,
        267,
        7,
        267,
        2,
        268,
        7,
        268,
        2,
        269,
        7,
        269,
        2,
        270,
        7,
        270,
        2,
        271,
        7,
        271,
        2,
        272,
        7,
        272,
        2,
        273,
        7,
        273,
        2,
        274,
        7,
        274,
        2,
        275,
        7,
        275,
        2,
        276,
        7,
        276,
        2,
        277,
        7,
        277,
        2,
        278,
        7,
        278,
        2,
        279,
        7,
        279,
        2,
        280,
        7,
        280,
        2,
        281,
        7,
        281,
        2,
        282,
        7,
        282,
        2,
        283,
        7,
        283,
        2,
        284,
        7,
        284,
        2,
        285,
        7,
        285,
        2,
        286,
        7,
        286,
        2,
        287,
        7,
        287,
        2,
        288,
        7,
        288,
        2,
        289,
        7,
        289,
        2,
        290,
        7,
        290,
        2,
        291,
        7,
        291,
        2,
        292,
        7,
        292,
        2,
        293,
        7,
        293,
        2,
        294,
        7,
        294,
        2,
        295,
        7,
        295,
        2,
        296,
        7,
        296,
        2,
        297,
        7,
        297,
        2,
        298,
        7,
        298,
        2,
        299,
        7,
        299,
        2,
        300,
        7,
        300,
        2,
        301,
        7,
        301,
        2,
        302,
        7,
        302,
        2,
        303,
        7,
        303,
        2,
        304,
        7,
        304,
        2,
        305,
        7,
        305,
        2,
        306,
        7,
        306,
        2,
        307,
        7,
        307,
        2,
        308,
        7,
        308,
        2,
        309,
        7,
        309,
        2,
        310,
        7,
        310,
        2,
        311,
        7,
        311,
        2,
        312,
        7,
        312,
        2,
        313,
        7,
        313,
        2,
        314,
        7,
        314,
        2,
        315,
        7,
        315,
        2,
        316,
        7,
        316,
        2,
        317,
        7,
        317,
        2,
        318,
        7,
        318,
        2,
        319,
        7,
        319,
        2,
        320,
        7,
        320,
        2,
        321,
        7,
        321,
        2,
        322,
        7,
        322,
        2,
        323,
        7,
        323,
        2,
        324,
        7,
        324,
        2,
        325,
        7,
        325,
        2,
        326,
        7,
        326,
        2,
        327,
        7,
        327,
        2,
        328,
        7,
        328,
        2,
        329,
        7,
        329,
        2,
        330,
        7,
        330,
        2,
        331,
        7,
        331,
        2,
        332,
        7,
        332,
        2,
        333,
        7,
        333,
        2,
        334,
        7,
        334,
        2,
        335,
        7,
        335,
        2,
        336,
        7,
        336,
        2,
        337,
        7,
        337,
        2,
        338,
        7,
        338,
        2,
        339,
        7,
        339,
        2,
        340,
        7,
        340,
        2,
        341,
        7,
        341,
        1,
        0,
        1,
        0,
        1,
        0,
        5,
        0,
        688,
        8,
        0,
        10,
        0,
        12,
        0,
        691,
        9,
        0,
        1,
        0,
        3,
        0,
        694,
        8,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        3,
        1,
        700,
        8,
        1,
        1,
        2,
        1,
        2,
        3,
        2,
        704,
        8,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        709,
        8,
        3,
        1,
        3,
        5,
        3,
        712,
        8,
        3,
        10,
        3,
        12,
        3,
        715,
        9,
        3,
        1,
        4,
        4,
        4,
        718,
        8,
        4,
        11,
        4,
        12,
        4,
        719,
        1,
        4,
        3,
        4,
        723,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        4,
        7,
        734,
        8,
        7,
        11,
        7,
        12,
        7,
        735,
        1,
        7,
        3,
        7,
        739,
        8,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        3,
        7,
        745,
        8,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        766,
        8,
        8,
        1,
        9,
        1,
        9,
        3,
        9,
        770,
        8,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        780,
        8,
        10,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        3,
        13,
        788,
        8,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        792,
        8,
        13,
        1,
        13,
        3,
        13,
        795,
        8,
        13,
        1,
        13,
        3,
        13,
        798,
        8,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        803,
        8,
        14,
        1,
        15,
        1,
        15,
        3,
        15,
        807,
        8,
        15,
        1,
        15,
        1,
        15,
        5,
        15,
        811,
        8,
        15,
        10,
        15,
        12,
        15,
        814,
        9,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        819,
        8,
        16,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        5,
        19,
        830,
        8,
        19,
        10,
        19,
        12,
        19,
        833,
        9,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        847,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        5,
        26,
        859,
        8,
        26,
        10,
        26,
        12,
        26,
        862,
        9,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        886,
        8,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        5,
        28,
        892,
        8,
        28,
        10,
        28,
        12,
        28,
        895,
        9,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        905,
        8,
        29,
        1,
        30,
        3,
        30,
        908,
        8,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        5,
        30,
        914,
        8,
        30,
        10,
        30,
        12,
        30,
        917,
        9,
        30,
        1,
        31,
        3,
        31,
        920,
        8,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        924,
        8,
        31,
        1,
        31,
        1,
        31,
        5,
        31,
        928,
        8,
        31,
        10,
        31,
        12,
        31,
        931,
        9,
        31,
        1,
        31,
        3,
        31,
        934,
        8,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        3,
        32,
        939,
        8,
        32,
        1,
        32,
        3,
        32,
        942,
        8,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        3,
        32,
        947,
        8,
        32,
        1,
        32,
        3,
        32,
        950,
        8,
        32,
        3,
        32,
        952,
        8,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        962,
        8,
        33,
        1,
        33,
        3,
        33,
        965,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        980,
        8,
        33,
        1,
        34,
        1,
        34,
        1,
        34,
        5,
        34,
        985,
        8,
        34,
        10,
        34,
        12,
        34,
        988,
        9,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        36,
        1,
        36,
        3,
        36,
        996,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        5,
        38,
        1009,
        8,
        38,
        10,
        38,
        12,
        38,
        1012,
        9,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        40,
        3,
        40,
        1019,
        8,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        5,
        40,
        1027,
        8,
        40,
        10,
        40,
        12,
        40,
        1030,
        9,
        40,
        3,
        40,
        1032,
        8,
        40,
        1,
        40,
        3,
        40,
        1035,
        8,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        5,
        40,
        1042,
        8,
        40,
        10,
        40,
        12,
        40,
        1045,
        9,
        40,
        1,
        40,
        3,
        40,
        1048,
        8,
        40,
        3,
        40,
        1050,
        8,
        40,
        3,
        40,
        1052,
        8,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        1062,
        8,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        1068,
        8,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        1076,
        8,
        44,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        4,
        45,
        1085,
        8,
        45,
        11,
        45,
        12,
        45,
        1086,
        1,
        45,
        1,
        45,
        1,
        46,
        3,
        46,
        1092,
        8,
        46,
        1,
        46,
        1,
        46,
        3,
        46,
        1096,
        8,
        46,
        1,
        46,
        1,
        46,
        1,
        46,
        1,
        46,
        3,
        46,
        1102,
        8,
        46,
        1,
        47,
        1,
        47,
        1,
        47,
        1,
        47,
        1,
        47,
        5,
        47,
        1109,
        8,
        47,
        10,
        47,
        12,
        47,
        1112,
        9,
        47,
        3,
        47,
        1114,
        8,
        47,
        1,
        47,
        1,
        47,
        1,
        48,
        1,
        48,
        3,
        48,
        1120,
        8,
        48,
        1,
        48,
        3,
        48,
        1123,
        8,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        5,
        48,
        1129,
        8,
        48,
        10,
        48,
        12,
        48,
        1132,
        9,
        48,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        1142,
        8,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        1146,
        8,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        1151,
        8,
        50,
        1,
        51,
        3,
        51,
        1154,
        8,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        53,
        1,
        53,
        3,
        53,
        1166,
        8,
        53,
        1,
        53,
        3,
        53,
        1169,
        8,
        53,
        1,
        53,
        1,
        53,
        3,
        53,
        1173,
        8,
        53,
        1,
        53,
        3,
        53,
        1176,
        8,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        5,
        54,
        1181,
        8,
        54,
        10,
        54,
        12,
        54,
        1184,
        9,
        54,
        1,
        55,
        1,
        55,
        1,
        55,
        5,
        55,
        1189,
        8,
        55,
        10,
        55,
        12,
        55,
        1192,
        9,
        55,
        1,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        1197,
        8,
        56,
        1,
        56,
        3,
        56,
        1200,
        8,
        56,
        1,
        56,
        1,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        3,
        57,
        1207,
        8,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        5,
        57,
        1213,
        8,
        57,
        10,
        57,
        12,
        57,
        1216,
        9,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        1223,
        8,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        1227,
        8,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        1232,
        8,
        58,
        1,
        59,
        1,
        59,
        3,
        59,
        1236,
        8,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        3,
        61,
        1246,
        8,
        61,
        1,
        61,
        1,
        61,
        5,
        61,
        1250,
        8,
        61,
        10,
        61,
        12,
        61,
        1253,
        9,
        61,
        1,
        61,
        4,
        61,
        1256,
        8,
        61,
        11,
        61,
        12,
        61,
        1257,
        1,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1263,
        8,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1268,
        8,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1272,
        8,
        62,
        1,
        62,
        3,
        62,
        1275,
        8,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1279,
        8,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1283,
        8,
        62,
        1,
        62,
        3,
        62,
        1286,
        8,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1292,
        8,
        62,
        3,
        62,
        1294,
        8,
        62,
        1,
        63,
        1,
        63,
        3,
        63,
        1298,
        8,
        63,
        1,
        64,
        1,
        64,
        1,
        65,
        1,
        65,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        4,
        66,
        1308,
        8,
        66,
        11,
        66,
        12,
        66,
        1309,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1319,
        8,
        67,
        1,
        67,
        3,
        67,
        1322,
        8,
        67,
        1,
        67,
        3,
        67,
        1325,
        8,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1329,
        8,
        67,
        1,
        67,
        3,
        67,
        1332,
        8,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        3,
        68,
        1341,
        8,
        68,
        1,
        68,
        3,
        68,
        1344,
        8,
        68,
        1,
        68,
        3,
        68,
        1347,
        8,
        68,
        1,
        68,
        3,
        68,
        1350,
        8,
        68,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        3,
        69,
        1356,
        8,
        69,
        1,
        69,
        1,
        69,
        3,
        69,
        1360,
        8,
        69,
        1,
        70,
        1,
        70,
        4,
        70,
        1364,
        8,
        70,
        11,
        70,
        12,
        70,
        1365,
        1,
        71,
        1,
        71,
        1,
        71,
        3,
        71,
        1371,
        8,
        71,
        1,
        71,
        1,
        71,
        5,
        71,
        1375,
        8,
        71,
        10,
        71,
        12,
        71,
        1378,
        9,
        71,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        73,
        1,
        73,
        3,
        73,
        1387,
        8,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        78,
        1,
        78,
        3,
        78,
        1407,
        8,
        78,
        1,
        79,
        3,
        79,
        1410,
        8,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        3,
        79,
        1420,
        8,
        79,
        1,
        79,
        3,
        79,
        1423,
        8,
        79,
        1,
        79,
        3,
        79,
        1426,
        8,
        79,
        1,
        79,
        3,
        79,
        1429,
        8,
        79,
        1,
        79,
        1,
        79,
        3,
        79,
        1433,
        8,
        79,
        1,
        79,
        3,
        79,
        1436,
        8,
        79,
        1,
        79,
        1,
        79,
        3,
        79,
        1440,
        8,
        79,
        1,
        80,
        3,
        80,
        1443,
        8,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        3,
        80,
        1453,
        8,
        80,
        1,
        80,
        1,
        80,
        3,
        80,
        1457,
        8,
        80,
        1,
        80,
        1,
        80,
        3,
        80,
        1461,
        8,
        80,
        1,
        80,
        1,
        80,
        3,
        80,
        1465,
        8,
        80,
        1,
        81,
        1,
        81,
        1,
        82,
        1,
        82,
        1,
        83,
        1,
        83,
        1,
        84,
        1,
        84,
        3,
        84,
        1475,
        8,
        84,
        1,
        84,
        1,
        84,
        3,
        84,
        1479,
        8,
        84,
        1,
        84,
        3,
        84,
        1482,
        8,
        84,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        86,
        1,
        86,
        1,
        86,
        3,
        86,
        1490,
        8,
        86,
        1,
        86,
        5,
        86,
        1493,
        8,
        86,
        10,
        86,
        12,
        86,
        1496,
        9,
        86,
        1,
        87,
        1,
        87,
        1,
        87,
        5,
        87,
        1501,
        8,
        87,
        10,
        87,
        12,
        87,
        1504,
        9,
        87,
        1,
        88,
        5,
        88,
        1507,
        8,
        88,
        10,
        88,
        12,
        88,
        1510,
        9,
        88,
        1,
        88,
        1,
        88,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        3,
        89,
        1521,
        8,
        89,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        5,
        90,
        1527,
        8,
        90,
        10,
        90,
        12,
        90,
        1530,
        9,
        90,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        92,
        5,
        92,
        1538,
        8,
        92,
        10,
        92,
        12,
        92,
        1541,
        9,
        92,
        1,
        93,
        1,
        93,
        1,
        93,
        5,
        93,
        1546,
        8,
        93,
        10,
        93,
        12,
        93,
        1549,
        9,
        93,
        1,
        94,
        1,
        94,
        1,
        94,
        5,
        94,
        1554,
        8,
        94,
        10,
        94,
        12,
        94,
        1557,
        9,
        94,
        1,
        95,
        5,
        95,
        1560,
        8,
        95,
        10,
        95,
        12,
        95,
        1563,
        9,
        95,
        1,
        95,
        1,
        95,
        1,
        96,
        1,
        96,
        1,
        96,
        5,
        96,
        1570,
        8,
        96,
        10,
        96,
        12,
        96,
        1573,
        9,
        96,
        1,
        97,
        1,
        97,
        3,
        97,
        1577,
        8,
        97,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        3,
        98,
        1586,
        8,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        3,
        98,
        1591,
        8,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        3,
        98,
        1596,
        8,
        98,
        1,
        98,
        1,
        98,
        3,
        98,
        1600,
        8,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        3,
        98,
        1605,
        8,
        98,
        1,
        98,
        3,
        98,
        1608,
        8,
        98,
        1,
        98,
        1,
        98,
        3,
        98,
        1612,
        8,
        98,
        1,
        99,
        1,
        99,
        1,
        100,
        1,
        100,
        1,
        100,
        5,
        100,
        1619,
        8,
        100,
        10,
        100,
        12,
        100,
        1622,
        9,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        5,
        101,
        1627,
        8,
        101,
        10,
        101,
        12,
        101,
        1630,
        9,
        101,
        1,
        102,
        1,
        102,
        1,
        102,
        5,
        102,
        1635,
        8,
        102,
        10,
        102,
        12,
        102,
        1638,
        9,
        102,
        1,
        103,
        1,
        103,
        1,
        103,
        3,
        103,
        1643,
        8,
        103,
        1,
        104,
        1,
        104,
        5,
        104,
        1647,
        8,
        104,
        10,
        104,
        12,
        104,
        1650,
        9,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1659,
        8,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1663,
        8,
        105,
        1,
        105,
        3,
        105,
        1666,
        8,
        105,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        108,
        1,
        108,
        4,
        108,
        1677,
        8,
        108,
        11,
        108,
        12,
        108,
        1678,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        3,
        110,
        1706,
        8,
        110,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        3,
        111,
        1717,
        8,
        111,
        1,
        112,
        1,
        112,
        4,
        112,
        1721,
        8,
        112,
        11,
        112,
        12,
        112,
        1722,
        1,
        112,
        1,
        112,
        3,
        112,
        1727,
        8,
        112,
        1,
        112,
        1,
        112,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        114,
        1,
        114,
        1,
        114,
        4,
        114,
        1739,
        8,
        114,
        11,
        114,
        12,
        114,
        1740,
        1,
        114,
        1,
        114,
        3,
        114,
        1745,
        8,
        114,
        1,
        114,
        1,
        114,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        5,
        115,
        1753,
        8,
        115,
        10,
        115,
        12,
        115,
        1756,
        9,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        3,
        116,
        1765,
        8,
        116,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        3,
        117,
        1773,
        8,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        3,
        117,
        1779,
        8,
        117,
        3,
        117,
        1781,
        8,
        117,
        1,
        117,
        1,
        117,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        3,
        118,
        1789,
        8,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        3,
        118,
        1794,
        8,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        3,
        120,
        1820,
        8,
        120,
        1,
        120,
        1,
        120,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        3,
        121,
        1829,
        8,
        121,
        1,
        121,
        1,
        121,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        123,
        1,
        123,
        1,
        123,
        3,
        123,
        1845,
        8,
        123,
        1,
        123,
        3,
        123,
        1848,
        8,
        123,
        1,
        123,
        3,
        123,
        1851,
        8,
        123,
        1,
        123,
        1,
        123,
        1,
        123,
        1,
        124,
        1,
        124,
        1,
        125,
        1,
        125,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        5,
        127,
        1869,
        8,
        127,
        10,
        127,
        12,
        127,
        1872,
        9,
        127,
        3,
        127,
        1874,
        8,
        127,
        1,
        127,
        1,
        127,
        1,
        128,
        1,
        128,
        1,
        128,
        1,
        128,
        1,
        128,
        1,
        128,
        1,
        128,
        1,
        128,
        3,
        128,
        1886,
        8,
        128,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        1897,
        8,
        130,
        1,
        130,
        1,
        130,
        3,
        130,
        1901,
        8,
        130,
        3,
        130,
        1903,
        8,
        130,
        1,
        130,
        1,
        130,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        1911,
        8,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        1915,
        8,
        131,
        3,
        131,
        1917,
        8,
        131,
        1,
        131,
        1,
        131,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        133,
        3,
        133,
        1927,
        8,
        133,
        1,
        133,
        1,
        133,
        1,
        134,
        3,
        134,
        1932,
        8,
        134,
        1,
        134,
        1,
        134,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        5,
        135,
        1940,
        8,
        135,
        10,
        135,
        12,
        135,
        1943,
        9,
        135,
        3,
        135,
        1945,
        8,
        135,
        1,
        135,
        1,
        135,
        1,
        136,
        1,
        136,
        1,
        137,
        1,
        137,
        1,
        137,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        138,
        3,
        138,
        1958,
        8,
        138,
        1,
        139,
        1,
        139,
        1,
        139,
        3,
        139,
        1963,
        8,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        5,
        139,
        1968,
        8,
        139,
        10,
        139,
        12,
        139,
        1971,
        9,
        139,
        3,
        139,
        1973,
        8,
        139,
        1,
        139,
        1,
        139,
        1,
        140,
        1,
        140,
        1,
        141,
        1,
        141,
        1,
        141,
        1,
        142,
        1,
        142,
        1,
        142,
        5,
        142,
        1985,
        8,
        142,
        10,
        142,
        12,
        142,
        1988,
        9,
        142,
        1,
        143,
        1,
        143,
        1,
        144,
        1,
        144,
        1,
        144,
        5,
        144,
        1995,
        8,
        144,
        10,
        144,
        12,
        144,
        1998,
        9,
        144,
        1,
        145,
        1,
        145,
        1,
        145,
        5,
        145,
        2003,
        8,
        145,
        10,
        145,
        12,
        145,
        2006,
        9,
        145,
        1,
        146,
        1,
        146,
        3,
        146,
        2010,
        8,
        146,
        1,
        146,
        5,
        146,
        2013,
        8,
        146,
        10,
        146,
        12,
        146,
        2016,
        9,
        146,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        3,
        147,
        2026,
        8,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        3,
        147,
        2040,
        8,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        3,
        147,
        2047,
        8,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        3,
        147,
        2064,
        8,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        3,
        147,
        2069,
        8,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        3,
        147,
        2093,
        8,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        3,
        147,
        2100,
        8,
        147,
        3,
        147,
        2102,
        8,
        147,
        1,
        148,
        1,
        148,
        1,
        148,
        3,
        148,
        2107,
        8,
        148,
        1,
        149,
        1,
        149,
        3,
        149,
        2111,
        8,
        149,
        1,
        150,
        1,
        150,
        3,
        150,
        2115,
        8,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        3,
        150,
        2129,
        8,
        150,
        1,
        150,
        3,
        150,
        2132,
        8,
        150,
        1,
        151,
        3,
        151,
        2135,
        8,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        3,
        151,
        2150,
        8,
        151,
        1,
        152,
        1,
        152,
        1,
        152,
        3,
        152,
        2155,
        8,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        3,
        152,
        2164,
        8,
        152,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        3,
        153,
        2174,
        8,
        153,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        3,
        154,
        2193,
        8,
        154,
        1,
        155,
        1,
        155,
        3,
        155,
        2197,
        8,
        155,
        1,
        155,
        3,
        155,
        2200,
        8,
        155,
        1,
        156,
        1,
        156,
        1,
        156,
        3,
        156,
        2205,
        8,
        156,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        5,
        159,
        2218,
        8,
        159,
        10,
        159,
        12,
        159,
        2221,
        9,
        159,
        3,
        159,
        2223,
        8,
        159,
        1,
        159,
        3,
        159,
        2226,
        8,
        159,
        1,
        159,
        3,
        159,
        2229,
        8,
        159,
        1,
        159,
        3,
        159,
        2232,
        8,
        159,
        1,
        159,
        3,
        159,
        2235,
        8,
        159,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        162,
        1,
        162,
        3,
        162,
        2245,
        8,
        162,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        3,
        163,
        2254,
        8,
        163,
        1,
        164,
        3,
        164,
        2257,
        8,
        164,
        1,
        164,
        1,
        164,
        1,
        165,
        1,
        165,
        1,
        166,
        1,
        166,
        3,
        166,
        2265,
        8,
        166,
        1,
        166,
        3,
        166,
        2268,
        8,
        166,
        1,
        167,
        3,
        167,
        2271,
        8,
        167,
        1,
        167,
        1,
        167,
        3,
        167,
        2275,
        8,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        3,
        167,
        2281,
        8,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        3,
        167,
        2286,
        8,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        3,
        167,
        2292,
        8,
        167,
        1,
        167,
        3,
        167,
        2295,
        8,
        167,
        1,
        167,
        1,
        167,
        3,
        167,
        2299,
        8,
        167,
        1,
        168,
        1,
        168,
        3,
        168,
        2303,
        8,
        168,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        3,
        169,
        2311,
        8,
        169,
        1,
        170,
        1,
        170,
        3,
        170,
        2315,
        8,
        170,
        1,
        170,
        3,
        170,
        2318,
        8,
        170,
        1,
        171,
        1,
        171,
        3,
        171,
        2322,
        8,
        171,
        1,
        171,
        3,
        171,
        2325,
        8,
        171,
        1,
        171,
        3,
        171,
        2328,
        8,
        171,
        1,
        172,
        3,
        172,
        2331,
        8,
        172,
        1,
        172,
        1,
        172,
        3,
        172,
        2335,
        8,
        172,
        1,
        172,
        3,
        172,
        2338,
        8,
        172,
        1,
        172,
        3,
        172,
        2341,
        8,
        172,
        1,
        173,
        1,
        173,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        3,
        174,
        2350,
        8,
        174,
        3,
        174,
        2352,
        8,
        174,
        1,
        175,
        1,
        175,
        1,
        175,
        1,
        175,
        1,
        175,
        3,
        175,
        2359,
        8,
        175,
        1,
        176,
        1,
        176,
        1,
        176,
        1,
        177,
        1,
        177,
        1,
        177,
        3,
        177,
        2367,
        8,
        177,
        1,
        177,
        3,
        177,
        2370,
        8,
        177,
        1,
        178,
        1,
        178,
        1,
        178,
        1,
        179,
        1,
        179,
        1,
        180,
        3,
        180,
        2378,
        8,
        180,
        1,
        180,
        1,
        180,
        3,
        180,
        2382,
        8,
        180,
        3,
        180,
        2384,
        8,
        180,
        1,
        180,
        3,
        180,
        2387,
        8,
        180,
        1,
        181,
        1,
        181,
        3,
        181,
        2391,
        8,
        181,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        183,
        1,
        183,
        1,
        183,
        3,
        183,
        2401,
        8,
        183,
        1,
        183,
        1,
        183,
        1,
        183,
        1,
        183,
        1,
        183,
        1,
        183,
        1,
        183,
        3,
        183,
        2410,
        8,
        183,
        1,
        183,
        1,
        183,
        1,
        183,
        1,
        184,
        1,
        184,
        3,
        184,
        2417,
        8,
        184,
        1,
        184,
        1,
        184,
        1,
        184,
        3,
        184,
        2422,
        8,
        184,
        1,
        184,
        1,
        184,
        1,
        184,
        3,
        184,
        2427,
        8,
        184,
        1,
        184,
        1,
        184,
        3,
        184,
        2431,
        8,
        184,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        3,
        185,
        2438,
        8,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        3,
        185,
        2446,
        8,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        3,
        185,
        2454,
        8,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        3,
        185,
        2464,
        8,
        185,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        3,
        186,
        2470,
        8,
        186,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        3,
        187,
        2492,
        8,
        187,
        1,
        188,
        3,
        188,
        2495,
        8,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        3,
        188,
        2500,
        8,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        3,
        188,
        2505,
        8,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        3,
        188,
        2510,
        8,
        188,
        1,
        189,
        3,
        189,
        2513,
        8,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        3,
        189,
        2518,
        8,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        3,
        189,
        2523,
        8,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        3,
        189,
        2531,
        8,
        189,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        5,
        190,
        2539,
        8,
        190,
        10,
        190,
        12,
        190,
        2542,
        9,
        190,
        1,
        190,
        1,
        190,
        1,
        191,
        1,
        191,
        1,
        191,
        3,
        191,
        2549,
        8,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        5,
        191,
        2558,
        8,
        191,
        10,
        191,
        12,
        191,
        2561,
        9,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        3,
        191,
        2566,
        8,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        192,
        3,
        192,
        2572,
        8,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        3,
        192,
        2577,
        8,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        3,
        192,
        2582,
        8,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        3,
        192,
        2589,
        8,
        192,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        194,
        1,
        194,
        1,
        194,
        3,
        194,
        2600,
        8,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        3,
        194,
        2608,
        8,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        3,
        194,
        2614,
        8,
        194,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        3,
        195,
        2620,
        8,
        195,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        3,
        196,
        2629,
        8,
        196,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        5,
        197,
        2637,
        8,
        197,
        10,
        197,
        12,
        197,
        2640,
        9,
        197,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        3,
        198,
        2648,
        8,
        198,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        199,
        3,
        199,
        2654,
        8,
        199,
        1,
        200,
        1,
        200,
        3,
        200,
        2658,
        8,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        3,
        200,
        2667,
        8,
        200,
        1,
        201,
        1,
        201,
        3,
        201,
        2671,
        8,
        201,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        202,
        1,
        202,
        3,
        202,
        2679,
        8,
        202,
        1,
        202,
        3,
        202,
        2682,
        8,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        3,
        202,
        2691,
        8,
        202,
        1,
        203,
        1,
        203,
        1,
        204,
        1,
        204,
        1,
        205,
        1,
        205,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        3,
        206,
        2703,
        8,
        206,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        210,
        1,
        210,
        3,
        210,
        2720,
        8,
        210,
        1,
        211,
        3,
        211,
        2723,
        8,
        211,
        1,
        211,
        1,
        211,
        3,
        211,
        2727,
        8,
        211,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        5,
        212,
        2736,
        8,
        212,
        10,
        212,
        12,
        212,
        2739,
        9,
        212,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        214,
        3,
        214,
        2745,
        8,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        3,
        214,
        2752,
        8,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        3,
        214,
        2758,
        8,
        214,
        1,
        215,
        1,
        215,
        1,
        215,
        1,
        215,
        3,
        215,
        2764,
        8,
        215,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        3,
        216,
        2770,
        8,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        217,
        3,
        217,
        2776,
        8,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        3,
        217,
        2781,
        8,
        217,
        1,
        217,
        3,
        217,
        2784,
        8,
        217,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        3,
        220,
        2799,
        8,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        3,
        220,
        2808,
        8,
        220,
        4,
        220,
        2810,
        8,
        220,
        11,
        220,
        12,
        220,
        2811,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        3,
        221,
        2818,
        8,
        221,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        3,
        222,
        2824,
        8,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        3,
        224,
        2842,
        8,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        3,
        224,
        2850,
        8,
        224,
        1,
        224,
        3,
        224,
        2853,
        8,
        224,
        5,
        224,
        2855,
        8,
        224,
        10,
        224,
        12,
        224,
        2858,
        9,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        3,
        224,
        2867,
        8,
        224,
        5,
        224,
        2869,
        8,
        224,
        10,
        224,
        12,
        224,
        2872,
        9,
        224,
        1,
        225,
        1,
        225,
        3,
        225,
        2876,
        8,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        3,
        225,
        2881,
        8,
        225,
        1,
        226,
        3,
        226,
        2884,
        8,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        3,
        226,
        2889,
        8,
        226,
        1,
        227,
        3,
        227,
        2892,
        8,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        228,
        1,
        228,
        3,
        228,
        2899,
        8,
        228,
        1,
        229,
        1,
        229,
        3,
        229,
        2903,
        8,
        229,
        1,
        229,
        1,
        229,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        232,
        1,
        232,
        3,
        232,
        2916,
        8,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        4,
        232,
        2922,
        8,
        232,
        11,
        232,
        12,
        232,
        2923,
        1,
        232,
        1,
        232,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        3,
        233,
        2933,
        8,
        233,
        1,
        234,
        1,
        234,
        1,
        234,
        3,
        234,
        2938,
        8,
        234,
        1,
        234,
        3,
        234,
        2941,
        8,
        234,
        1,
        235,
        1,
        235,
        1,
        235,
        3,
        235,
        2946,
        8,
        235,
        1,
        236,
        1,
        236,
        1,
        236,
        3,
        236,
        2951,
        8,
        236,
        1,
        237,
        3,
        237,
        2954,
        8,
        237,
        1,
        237,
        1,
        237,
        3,
        237,
        2958,
        8,
        237,
        1,
        237,
        3,
        237,
        2961,
        8,
        237,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        3,
        238,
        2967,
        8,
        238,
        1,
        238,
        3,
        238,
        2970,
        8,
        238,
        1,
        239,
        1,
        239,
        3,
        239,
        2974,
        8,
        239,
        1,
        239,
        1,
        239,
        3,
        239,
        2978,
        8,
        239,
        1,
        239,
        3,
        239,
        2981,
        8,
        239,
        1,
        240,
        1,
        240,
        3,
        240,
        2985,
        8,
        240,
        1,
        240,
        1,
        240,
        1,
        241,
        1,
        241,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        242,
        3,
        242,
        3002,
        8,
        242,
        1,
        243,
        1,
        243,
        3,
        243,
        3006,
        8,
        243,
        1,
        243,
        1,
        243,
        1,
        243,
        1,
        244,
        3,
        244,
        3012,
        8,
        244,
        1,
        244,
        1,
        244,
        1,
        245,
        1,
        245,
        1,
        245,
        1,
        245,
        1,
        245,
        3,
        245,
        3021,
        8,
        245,
        1,
        245,
        1,
        245,
        1,
        245,
        3,
        245,
        3026,
        8,
        245,
        1,
        245,
        3,
        245,
        3029,
        8,
        245,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        246,
        3,
        246,
        3044,
        8,
        246,
        1,
        247,
        1,
        247,
        1,
        247,
        1,
        247,
        1,
        247,
        3,
        247,
        3051,
        8,
        247,
        1,
        248,
        1,
        248,
        3,
        248,
        3055,
        8,
        248,
        1,
        248,
        1,
        248,
        1,
        249,
        1,
        249,
        3,
        249,
        3061,
        8,
        249,
        1,
        249,
        1,
        249,
        1,
        250,
        1,
        250,
        3,
        250,
        3067,
        8,
        250,
        1,
        250,
        1,
        250,
        1,
        251,
        1,
        251,
        3,
        251,
        3073,
        8,
        251,
        1,
        251,
        1,
        251,
        1,
        251,
        3,
        251,
        3078,
        8,
        251,
        1,
        252,
        1,
        252,
        1,
        252,
        3,
        252,
        3083,
        8,
        252,
        1,
        252,
        1,
        252,
        1,
        252,
        1,
        252,
        1,
        252,
        1,
        252,
        1,
        252,
        3,
        252,
        3092,
        8,
        252,
        1,
        253,
        1,
        253,
        1,
        253,
        1,
        253,
        1,
        253,
        1,
        253,
        3,
        253,
        3100,
        8,
        253,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        3,
        254,
        3107,
        8,
        254,
        3,
        254,
        3109,
        8,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        1,
        254,
        3,
        254,
        3123,
        8,
        254,
        1,
        254,
        1,
        254,
        3,
        254,
        3127,
        8,
        254,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        3,
        255,
        3135,
        8,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        3,
        255,
        3141,
        8,
        255,
        1,
        255,
        3,
        255,
        3144,
        8,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        255,
        3,
        255,
        3159,
        8,
        255,
        1,
        256,
        1,
        256,
        1,
        257,
        1,
        257,
        1,
        257,
        1,
        257,
        1,
        257,
        1,
        257,
        1,
        257,
        1,
        257,
        1,
        257,
        3,
        257,
        3172,
        8,
        257,
        1,
        258,
        1,
        258,
        1,
        258,
        1,
        258,
        1,
        259,
        1,
        259,
        1,
        259,
        1,
        259,
        1,
        259,
        1,
        259,
        3,
        259,
        3184,
        8,
        259,
        1,
        259,
        3,
        259,
        3187,
        8,
        259,
        1,
        259,
        1,
        259,
        3,
        259,
        3191,
        8,
        259,
        1,
        259,
        1,
        259,
        3,
        259,
        3195,
        8,
        259,
        1,
        259,
        3,
        259,
        3198,
        8,
        259,
        3,
        259,
        3200,
        8,
        259,
        1,
        259,
        1,
        259,
        1,
        259,
        1,
        260,
        1,
        260,
        1,
        260,
        3,
        260,
        3208,
        8,
        260,
        1,
        260,
        1,
        260,
        3,
        260,
        3212,
        8,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        3,
        260,
        3218,
        8,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        3,
        260,
        3225,
        8,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        3,
        260,
        3233,
        8,
        260,
        3,
        260,
        3235,
        8,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        261,
        1,
        261,
        1,
        261,
        1,
        261,
        1,
        261,
        3,
        261,
        3245,
        8,
        261,
        1,
        261,
        1,
        261,
        1,
        261,
        1,
        261,
        1,
        261,
        3,
        261,
        3252,
        8,
        261,
        3,
        261,
        3254,
        8,
        261,
        1,
        261,
        1,
        261,
        1,
        261,
        3,
        261,
        3259,
        8,
        261,
        3,
        261,
        3261,
        8,
        261,
        1,
        262,
        1,
        262,
        1,
        263,
        1,
        263,
        1,
        264,
        1,
        264,
        1,
        265,
        1,
        265,
        1,
        266,
        1,
        266,
        1,
        267,
        1,
        267,
        1,
        267,
        3,
        267,
        3276,
        8,
        267,
        1,
        267,
        1,
        267,
        1,
        268,
        1,
        268,
        1,
        269,
        1,
        269,
        1,
        270,
        1,
        270,
        1,
        271,
        1,
        271,
        1,
        271,
        5,
        271,
        3289,
        8,
        271,
        10,
        271,
        12,
        271,
        3292,
        9,
        271,
        1,
        272,
        1,
        272,
        3,
        272,
        3296,
        8,
        272,
        1,
        272,
        3,
        272,
        3299,
        8,
        272,
        1,
        273,
        1,
        273,
        3,
        273,
        3303,
        8,
        273,
        1,
        274,
        1,
        274,
        3,
        274,
        3307,
        8,
        274,
        1,
        274,
        1,
        274,
        1,
        274,
        3,
        274,
        3312,
        8,
        274,
        1,
        275,
        1,
        275,
        1,
        275,
        1,
        275,
        3,
        275,
        3318,
        8,
        275,
        1,
        275,
        1,
        275,
        1,
        275,
        1,
        275,
        1,
        276,
        1,
        276,
        3,
        276,
        3326,
        8,
        276,
        1,
        277,
        1,
        277,
        1,
        277,
        3,
        277,
        3331,
        8,
        277,
        1,
        277,
        1,
        277,
        1,
        278,
        1,
        278,
        1,
        278,
        5,
        278,
        3338,
        8,
        278,
        10,
        278,
        12,
        278,
        3341,
        9,
        278,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3346,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3351,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        5,
        279,
        3357,
        8,
        279,
        10,
        279,
        12,
        279,
        3360,
        9,
        279,
        3,
        279,
        3362,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3370,
        8,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3374,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3379,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3384,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        5,
        279,
        3390,
        8,
        279,
        10,
        279,
        12,
        279,
        3393,
        9,
        279,
        3,
        279,
        3395,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3400,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3410,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3415,
        8,
        279,
        1,
        279,
        1,
        279,
        1,
        279,
        3,
        279,
        3420,
        8,
        279,
        3,
        279,
        3422,
        8,
        279,
        3,
        279,
        3424,
        8,
        279,
        1,
        280,
        1,
        280,
        1,
        280,
        3,
        280,
        3429,
        8,
        280,
        1,
        281,
        1,
        281,
        1,
        282,
        1,
        282,
        1,
        283,
        1,
        283,
        1,
        284,
        1,
        284,
        1,
        284,
        1,
        284,
        1,
        284,
        3,
        284,
        3442,
        8,
        284,
        3,
        284,
        3444,
        8,
        284,
        1,
        285,
        1,
        285,
        1,
        285,
        1,
        285,
        1,
        285,
        3,
        285,
        3451,
        8,
        285,
        3,
        285,
        3453,
        8,
        285,
        1,
        286,
        1,
        286,
        1,
        286,
        1,
        286,
        1,
        286,
        1,
        286,
        3,
        286,
        3461,
        8,
        286,
        1,
        286,
        3,
        286,
        3464,
        8,
        286,
        1,
        286,
        3,
        286,
        3467,
        8,
        286,
        1,
        286,
        3,
        286,
        3470,
        8,
        286,
        1,
        286,
        3,
        286,
        3473,
        8,
        286,
        1,
        287,
        1,
        287,
        1,
        287,
        1,
        287,
        1,
        287,
        3,
        287,
        3480,
        8,
        287,
        1,
        287,
        3,
        287,
        3483,
        8,
        287,
        1,
        287,
        3,
        287,
        3486,
        8,
        287,
        1,
        287,
        1,
        287,
        3,
        287,
        3490,
        8,
        287,
        1,
        287,
        3,
        287,
        3493,
        8,
        287,
        1,
        287,
        3,
        287,
        3496,
        8,
        287,
        1,
        288,
        3,
        288,
        3499,
        8,
        288,
        1,
        288,
        3,
        288,
        3502,
        8,
        288,
        1,
        288,
        3,
        288,
        3505,
        8,
        288,
        1,
        288,
        1,
        288,
        1,
        289,
        1,
        289,
        1,
        289,
        1,
        289,
        3,
        289,
        3513,
        8,
        289,
        1,
        289,
        3,
        289,
        3516,
        8,
        289,
        1,
        289,
        1,
        289,
        1,
        290,
        1,
        290,
        1,
        290,
        1,
        290,
        1,
        290,
        1,
        290,
        3,
        290,
        3526,
        8,
        290,
        1,
        290,
        1,
        290,
        1,
        290,
        1,
        290,
        3,
        290,
        3532,
        8,
        290,
        1,
        290,
        1,
        290,
        1,
        291,
        3,
        291,
        3537,
        8,
        291,
        1,
        291,
        1,
        291,
        1,
        291,
        4,
        291,
        3542,
        8,
        291,
        11,
        291,
        12,
        291,
        3543,
        1,
        292,
        1,
        292,
        1,
        292,
        1,
        293,
        1,
        293,
        1,
        294,
        1,
        294,
        1,
        294,
        1,
        295,
        1,
        295,
        1,
        296,
        1,
        296,
        1,
        296,
        1,
        296,
        1,
        296,
        1,
        297,
        3,
        297,
        3562,
        8,
        297,
        1,
        297,
        1,
        297,
        1,
        297,
        1,
        297,
        3,
        297,
        3568,
        8,
        297,
        1,
        297,
        3,
        297,
        3571,
        8,
        297,
        1,
        297,
        1,
        297,
        3,
        297,
        3575,
        8,
        297,
        1,
        297,
        3,
        297,
        3578,
        8,
        297,
        1,
        298,
        1,
        298,
        1,
        298,
        3,
        298,
        3583,
        8,
        298,
        1,
        299,
        1,
        299,
        1,
        299,
        1,
        299,
        3,
        299,
        3589,
        8,
        299,
        1,
        299,
        1,
        299,
        1,
        299,
        1,
        299,
        1,
        299,
        3,
        299,
        3596,
        8,
        299,
        4,
        299,
        3598,
        8,
        299,
        11,
        299,
        12,
        299,
        3599,
        1,
        299,
        1,
        299,
        1,
        299,
        4,
        299,
        3605,
        8,
        299,
        11,
        299,
        12,
        299,
        3606,
        3,
        299,
        3609,
        8,
        299,
        1,
        299,
        3,
        299,
        3612,
        8,
        299,
        1,
        300,
        1,
        300,
        1,
        300,
        1,
        300,
        1,
        301,
        1,
        301,
        1,
        301,
        4,
        301,
        3621,
        8,
        301,
        11,
        301,
        12,
        301,
        3622,
        1,
        302,
        1,
        302,
        1,
        302,
        1,
        302,
        1,
        303,
        1,
        303,
        1,
        303,
        1,
        303,
        3,
        303,
        3633,
        8,
        303,
        1,
        304,
        1,
        304,
        1,
        304,
        1,
        304,
        3,
        304,
        3639,
        8,
        304,
        1,
        305,
        1,
        305,
        1,
        305,
        3,
        305,
        3644,
        8,
        305,
        3,
        305,
        3646,
        8,
        305,
        1,
        305,
        3,
        305,
        3649,
        8,
        305,
        1,
        306,
        1,
        306,
        1,
        307,
        1,
        307,
        1,
        307,
        3,
        307,
        3656,
        8,
        307,
        1,
        307,
        1,
        307,
        3,
        307,
        3660,
        8,
        307,
        1,
        307,
        3,
        307,
        3663,
        8,
        307,
        3,
        307,
        3665,
        8,
        307,
        1,
        308,
        1,
        308,
        1,
        309,
        1,
        309,
        1,
        310,
        1,
        310,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        3,
        311,
        3678,
        8,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        3,
        311,
        3691,
        8,
        311,
        1,
        311,
        3,
        311,
        3694,
        8,
        311,
        3,
        311,
        3696,
        8,
        311,
        1,
        311,
        1,
        311,
        3,
        311,
        3700,
        8,
        311,
        1,
        312,
        1,
        312,
        1,
        312,
        1,
        312,
        3,
        312,
        3706,
        8,
        312,
        1,
        312,
        1,
        312,
        1,
        312,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        3,
        313,
        3715,
        8,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        4,
        313,
        3725,
        8,
        313,
        11,
        313,
        12,
        313,
        3726,
        1,
        314,
        1,
        314,
        1,
        314,
        1,
        314,
        3,
        314,
        3733,
        8,
        314,
        1,
        315,
        1,
        315,
        1,
        315,
        1,
        316,
        1,
        316,
        1,
        316,
        1,
        317,
        1,
        317,
        1,
        317,
        1,
        318,
        1,
        318,
        1,
        318,
        1,
        319,
        1,
        319,
        3,
        319,
        3749,
        8,
        319,
        1,
        319,
        1,
        319,
        1,
        319,
        3,
        319,
        3754,
        8,
        319,
        1,
        320,
        1,
        320,
        3,
        320,
        3758,
        8,
        320,
        1,
        321,
        1,
        321,
        3,
        321,
        3762,
        8,
        321,
        1,
        322,
        1,
        322,
        1,
        322,
        5,
        322,
        3767,
        8,
        322,
        10,
        322,
        12,
        322,
        3770,
        9,
        322,
        1,
        323,
        1,
        323,
        1,
        323,
        5,
        323,
        3775,
        8,
        323,
        10,
        323,
        12,
        323,
        3778,
        9,
        323,
        1,
        324,
        1,
        324,
        3,
        324,
        3782,
        8,
        324,
        1,
        325,
        1,
        325,
        1,
        325,
        5,
        325,
        3787,
        8,
        325,
        10,
        325,
        12,
        325,
        3790,
        9,
        325,
        1,
        326,
        1,
        326,
        1,
        326,
        1,
        326,
        5,
        326,
        3796,
        8,
        326,
        10,
        326,
        12,
        326,
        3799,
        9,
        326,
        3,
        326,
        3801,
        8,
        326,
        1,
        326,
        1,
        326,
        1,
        327,
        1,
        327,
        1,
        327,
        4,
        327,
        3808,
        8,
        327,
        11,
        327,
        12,
        327,
        3809,
        1,
        328,
        1,
        328,
        1,
        329,
        1,
        329,
        3,
        329,
        3816,
        8,
        329,
        1,
        330,
        1,
        330,
        3,
        330,
        3820,
        8,
        330,
        1,
        331,
        1,
        331,
        3,
        331,
        3824,
        8,
        331,
        1,
        332,
        1,
        332,
        3,
        332,
        3828,
        8,
        332,
        1,
        333,
        1,
        333,
        1,
        333,
        1,
        333,
        1,
        333,
        1,
        333,
        1,
        333,
        1,
        333,
        1,
        333,
        5,
        333,
        3839,
        8,
        333,
        10,
        333,
        12,
        333,
        3842,
        9,
        333,
        3,
        333,
        3844,
        8,
        333,
        1,
        333,
        1,
        333,
        1,
        334,
        1,
        334,
        3,
        334,
        3850,
        8,
        334,
        1,
        335,
        1,
        335,
        1,
        336,
        1,
        336,
        1,
        337,
        1,
        337,
        3,
        337,
        3858,
        8,
        337,
        1,
        338,
        1,
        338,
        1,
        339,
        1,
        339,
        1,
        340,
        1,
        340,
        1,
        341,
        1,
        341,
        1,
        341,
        0,
        0,
        342,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        234,
        236,
        238,
        240,
        242,
        244,
        246,
        248,
        250,
        252,
        254,
        256,
        258,
        260,
        262,
        264,
        266,
        268,
        270,
        272,
        274,
        276,
        278,
        280,
        282,
        284,
        286,
        288,
        290,
        292,
        294,
        296,
        298,
        300,
        302,
        304,
        306,
        308,
        310,
        312,
        314,
        316,
        318,
        320,
        322,
        324,
        326,
        328,
        330,
        332,
        334,
        336,
        338,
        340,
        342,
        344,
        346,
        348,
        350,
        352,
        354,
        356,
        358,
        360,
        362,
        364,
        366,
        368,
        370,
        372,
        374,
        376,
        378,
        380,
        382,
        384,
        386,
        388,
        390,
        392,
        394,
        396,
        398,
        400,
        402,
        404,
        406,
        408,
        410,
        412,
        414,
        416,
        418,
        420,
        422,
        424,
        426,
        428,
        430,
        432,
        434,
        436,
        438,
        440,
        442,
        444,
        446,
        448,
        450,
        452,
        454,
        456,
        458,
        460,
        462,
        464,
        466,
        468,
        470,
        472,
        474,
        476,
        478,
        480,
        482,
        484,
        486,
        488,
        490,
        492,
        494,
        496,
        498,
        500,
        502,
        504,
        506,
        508,
        510,
        512,
        514,
        516,
        518,
        520,
        522,
        524,
        526,
        528,
        530,
        532,
        534,
        536,
        538,
        540,
        542,
        544,
        546,
        548,
        550,
        552,
        554,
        556,
        558,
        560,
        562,
        564,
        566,
        568,
        570,
        572,
        574,
        576,
        578,
        580,
        582,
        584,
        586,
        588,
        590,
        592,
        594,
        596,
        598,
        600,
        602,
        604,
        606,
        608,
        610,
        612,
        614,
        616,
        618,
        620,
        622,
        624,
        626,
        628,
        630,
        632,
        634,
        636,
        638,
        640,
        642,
        644,
        646,
        648,
        650,
        652,
        654,
        656,
        658,
        660,
        662,
        664,
        666,
        668,
        670,
        672,
        674,
        676,
        678,
        680,
        682,
        0,
        76,
        2,
        0,
        18,
        18,
        78,
        78,
        1,
        0,
        24,
        25,
        1,
        0,
        72,
        73,
        2,
        0,
        194,
        194,
        271,
        271,
        2,
        0,
        75,
        75,
        184,
        184,
        2,
        0,
        57,
        57,
        169,
        169,
        1,
        0,
        248,
        249,
        3,
        0,
        35,
        35,
        55,
        55,
        104,
        104,
        2,
        0,
        17,
        17,
        266,
        266,
        1,
        0,
        122,
        123,
        1,
        0,
        204,
        205,
        2,
        0,
        18,
        18,
        21,
        21,
        2,
        0,
        166,
        166,
        324,
        324,
        2,
        0,
        171,
        171,
        323,
        323,
        2,
        0,
        124,
        124,
        325,
        325,
        2,
        0,
        44,
        44,
        147,
        147,
        2,
        0,
        44,
        44,
        152,
        152,
        6,
        0,
        97,
        97,
        118,
        118,
        124,
        124,
        157,
        157,
        166,
        166,
        173,
        174,
        2,
        0,
        45,
        45,
        296,
        296,
        1,
        0,
        178,
        181,
        3,
        0,
        82,
        82,
        171,
        171,
        207,
        207,
        3,
        0,
        79,
        79,
        172,
        172,
        284,
        284,
        2,
        0,
        171,
        171,
        207,
        207,
        4,
        0,
        18,
        18,
        21,
        21,
        186,
        186,
        270,
        270,
        3,
        0,
        34,
        34,
        158,
        158,
        289,
        289,
        1,
        0,
        4,
        7,
        2,
        0,
        65,
        65,
        283,
        283,
        1,
        0,
        314,
        315,
        2,
        0,
        22,
        22,
        161,
        161,
        7,
        0,
        18,
        18,
        115,
        115,
        164,
        164,
        209,
        209,
        223,
        223,
        281,
        281,
        309,
        309,
        1,
        0,
        299,
        300,
        1,
        0,
        231,
        232,
        1,
        0,
        216,
        217,
        1,
        0,
        116,
        117,
        1,
        0,
        262,
        263,
        2,
        0,
        183,
        183,
        231,
        232,
        2,
        0,
        71,
        71,
        119,
        119,
        1,
        0,
        246,
        247,
        1,
        0,
        259,
        260,
        1,
        0,
        62,
        63,
        2,
        0,
        18,
        18,
        210,
        210,
        1,
        0,
        304,
        305,
        1,
        0,
        220,
        221,
        2,
        0,
        94,
        94,
        206,
        206,
        2,
        0,
        12,
        12,
        278,
        278,
        1,
        0,
        47,
        48,
        1,
        0,
        214,
        215,
        3,
        0,
        62,
        62,
        66,
        66,
        120,
        120,
        2,
        0,
        62,
        62,
        120,
        120,
        1,
        0,
        120,
        121,
        1,
        0,
        150,
        151,
        2,
        0,
        295,
        295,
        297,
        297,
        1,
        0,
        175,
        176,
        2,
        0,
        42,
        42,
        302,
        302,
        1,
        0,
        202,
        203,
        2,
        0,
        214,
        214,
        246,
        246,
        2,
        0,
        246,
        246,
        304,
        304,
        1,
        0,
        13,
        14,
        1,
        0,
        132,
        133,
        1,
        0,
        51,
        52,
        1,
        0,
        290,
        291,
        2,
        0,
        169,
        170,
        226,
        226,
        1,
        0,
        232,
        233,
        1,
        0,
        91,
        92,
        2,
        0,
        183,
        183,
        185,
        185,
        1,
        0,
        264,
        265,
        1,
        0,
        237,
        238,
        1,
        0,
        212,
        213,
        1,
        0,
        254,
        255,
        2,
        0,
        74,
        74,
        86,
        86,
        1,
        0,
        15,
        16,
        2,
        0,
        196,
        196,
        316,
        316,
        2,
        0,
        252,
        253,
        256,
        256,
        2,
        0,
        68,
        68,
        126,
        126,
        1,
        0,
        8,
        9,
        20,
        0,
        11,
        28,
        30,
        43,
        47,
        76,
        78,
        78,
        83,
        96,
        98,
        117,
        119,
        123,
        125,
        151,
        154,
        154,
        158,
        164,
        167,
        170,
        175,
        206,
        209,
        210,
        212,
        221,
        223,
        223,
        226,
        229,
        231,
        249,
        251,
        257,
        259,
        283,
        285,
        321,
        4263,
        0,
        684,
        1,
        0,
        0,
        0,
        2,
        699,
        1,
        0,
        0,
        0,
        4,
        703,
        1,
        0,
        0,
        0,
        6,
        705,
        1,
        0,
        0,
        0,
        8,
        717,
        1,
        0,
        0,
        0,
        10,
        724,
        1,
        0,
        0,
        0,
        12,
        729,
        1,
        0,
        0,
        0,
        14,
        744,
        1,
        0,
        0,
        0,
        16,
        765,
        1,
        0,
        0,
        0,
        18,
        767,
        1,
        0,
        0,
        0,
        20,
        779,
        1,
        0,
        0,
        0,
        22,
        781,
        1,
        0,
        0,
        0,
        24,
        783,
        1,
        0,
        0,
        0,
        26,
        787,
        1,
        0,
        0,
        0,
        28,
        799,
        1,
        0,
        0,
        0,
        30,
        806,
        1,
        0,
        0,
        0,
        32,
        815,
        1,
        0,
        0,
        0,
        34,
        820,
        1,
        0,
        0,
        0,
        36,
        822,
        1,
        0,
        0,
        0,
        38,
        824,
        1,
        0,
        0,
        0,
        40,
        834,
        1,
        0,
        0,
        0,
        42,
        837,
        1,
        0,
        0,
        0,
        44,
        840,
        1,
        0,
        0,
        0,
        46,
        843,
        1,
        0,
        0,
        0,
        48,
        848,
        1,
        0,
        0,
        0,
        50,
        851,
        1,
        0,
        0,
        0,
        52,
        854,
        1,
        0,
        0,
        0,
        54,
        885,
        1,
        0,
        0,
        0,
        56,
        887,
        1,
        0,
        0,
        0,
        58,
        904,
        1,
        0,
        0,
        0,
        60,
        907,
        1,
        0,
        0,
        0,
        62,
        919,
        1,
        0,
        0,
        0,
        64,
        951,
        1,
        0,
        0,
        0,
        66,
        953,
        1,
        0,
        0,
        0,
        68,
        981,
        1,
        0,
        0,
        0,
        70,
        989,
        1,
        0,
        0,
        0,
        72,
        993,
        1,
        0,
        0,
        0,
        74,
        999,
        1,
        0,
        0,
        0,
        76,
        1004,
        1,
        0,
        0,
        0,
        78,
        1013,
        1,
        0,
        0,
        0,
        80,
        1018,
        1,
        0,
        0,
        0,
        82,
        1053,
        1,
        0,
        0,
        0,
        84,
        1056,
        1,
        0,
        0,
        0,
        86,
        1058,
        1,
        0,
        0,
        0,
        88,
        1063,
        1,
        0,
        0,
        0,
        90,
        1077,
        1,
        0,
        0,
        0,
        92,
        1091,
        1,
        0,
        0,
        0,
        94,
        1103,
        1,
        0,
        0,
        0,
        96,
        1117,
        1,
        0,
        0,
        0,
        98,
        1133,
        1,
        0,
        0,
        0,
        100,
        1150,
        1,
        0,
        0,
        0,
        102,
        1153,
        1,
        0,
        0,
        0,
        104,
        1158,
        1,
        0,
        0,
        0,
        106,
        1175,
        1,
        0,
        0,
        0,
        108,
        1177,
        1,
        0,
        0,
        0,
        110,
        1185,
        1,
        0,
        0,
        0,
        112,
        1196,
        1,
        0,
        0,
        0,
        114,
        1206,
        1,
        0,
        0,
        0,
        116,
        1231,
        1,
        0,
        0,
        0,
        118,
        1235,
        1,
        0,
        0,
        0,
        120,
        1237,
        1,
        0,
        0,
        0,
        122,
        1255,
        1,
        0,
        0,
        0,
        124,
        1293,
        1,
        0,
        0,
        0,
        126,
        1297,
        1,
        0,
        0,
        0,
        128,
        1299,
        1,
        0,
        0,
        0,
        130,
        1301,
        1,
        0,
        0,
        0,
        132,
        1303,
        1,
        0,
        0,
        0,
        134,
        1331,
        1,
        0,
        0,
        0,
        136,
        1349,
        1,
        0,
        0,
        0,
        138,
        1351,
        1,
        0,
        0,
        0,
        140,
        1363,
        1,
        0,
        0,
        0,
        142,
        1367,
        1,
        0,
        0,
        0,
        144,
        1379,
        1,
        0,
        0,
        0,
        146,
        1384,
        1,
        0,
        0,
        0,
        148,
        1392,
        1,
        0,
        0,
        0,
        150,
        1395,
        1,
        0,
        0,
        0,
        152,
        1398,
        1,
        0,
        0,
        0,
        154,
        1401,
        1,
        0,
        0,
        0,
        156,
        1406,
        1,
        0,
        0,
        0,
        158,
        1409,
        1,
        0,
        0,
        0,
        160,
        1442,
        1,
        0,
        0,
        0,
        162,
        1466,
        1,
        0,
        0,
        0,
        164,
        1468,
        1,
        0,
        0,
        0,
        166,
        1470,
        1,
        0,
        0,
        0,
        168,
        1472,
        1,
        0,
        0,
        0,
        170,
        1483,
        1,
        0,
        0,
        0,
        172,
        1486,
        1,
        0,
        0,
        0,
        174,
        1497,
        1,
        0,
        0,
        0,
        176,
        1508,
        1,
        0,
        0,
        0,
        178,
        1520,
        1,
        0,
        0,
        0,
        180,
        1522,
        1,
        0,
        0,
        0,
        182,
        1531,
        1,
        0,
        0,
        0,
        184,
        1534,
        1,
        0,
        0,
        0,
        186,
        1542,
        1,
        0,
        0,
        0,
        188,
        1550,
        1,
        0,
        0,
        0,
        190,
        1561,
        1,
        0,
        0,
        0,
        192,
        1566,
        1,
        0,
        0,
        0,
        194,
        1574,
        1,
        0,
        0,
        0,
        196,
        1611,
        1,
        0,
        0,
        0,
        198,
        1613,
        1,
        0,
        0,
        0,
        200,
        1615,
        1,
        0,
        0,
        0,
        202,
        1623,
        1,
        0,
        0,
        0,
        204,
        1631,
        1,
        0,
        0,
        0,
        206,
        1642,
        1,
        0,
        0,
        0,
        208,
        1644,
        1,
        0,
        0,
        0,
        210,
        1665,
        1,
        0,
        0,
        0,
        212,
        1667,
        1,
        0,
        0,
        0,
        214,
        1670,
        1,
        0,
        0,
        0,
        216,
        1674,
        1,
        0,
        0,
        0,
        218,
        1680,
        1,
        0,
        0,
        0,
        220,
        1705,
        1,
        0,
        0,
        0,
        222,
        1716,
        1,
        0,
        0,
        0,
        224,
        1718,
        1,
        0,
        0,
        0,
        226,
        1730,
        1,
        0,
        0,
        0,
        228,
        1735,
        1,
        0,
        0,
        0,
        230,
        1748,
        1,
        0,
        0,
        0,
        232,
        1764,
        1,
        0,
        0,
        0,
        234,
        1766,
        1,
        0,
        0,
        0,
        236,
        1784,
        1,
        0,
        0,
        0,
        238,
        1799,
        1,
        0,
        0,
        0,
        240,
        1812,
        1,
        0,
        0,
        0,
        242,
        1823,
        1,
        0,
        0,
        0,
        244,
        1832,
        1,
        0,
        0,
        0,
        246,
        1841,
        1,
        0,
        0,
        0,
        248,
        1855,
        1,
        0,
        0,
        0,
        250,
        1857,
        1,
        0,
        0,
        0,
        252,
        1859,
        1,
        0,
        0,
        0,
        254,
        1863,
        1,
        0,
        0,
        0,
        256,
        1885,
        1,
        0,
        0,
        0,
        258,
        1887,
        1,
        0,
        0,
        0,
        260,
        1892,
        1,
        0,
        0,
        0,
        262,
        1906,
        1,
        0,
        0,
        0,
        264,
        1920,
        1,
        0,
        0,
        0,
        266,
        1926,
        1,
        0,
        0,
        0,
        268,
        1931,
        1,
        0,
        0,
        0,
        270,
        1935,
        1,
        0,
        0,
        0,
        272,
        1948,
        1,
        0,
        0,
        0,
        274,
        1950,
        1,
        0,
        0,
        0,
        276,
        1957,
        1,
        0,
        0,
        0,
        278,
        1959,
        1,
        0,
        0,
        0,
        280,
        1976,
        1,
        0,
        0,
        0,
        282,
        1978,
        1,
        0,
        0,
        0,
        284,
        1986,
        1,
        0,
        0,
        0,
        286,
        1989,
        1,
        0,
        0,
        0,
        288,
        1991,
        1,
        0,
        0,
        0,
        290,
        1999,
        1,
        0,
        0,
        0,
        292,
        2007,
        1,
        0,
        0,
        0,
        294,
        2101,
        1,
        0,
        0,
        0,
        296,
        2106,
        1,
        0,
        0,
        0,
        298,
        2108,
        1,
        0,
        0,
        0,
        300,
        2128,
        1,
        0,
        0,
        0,
        302,
        2134,
        1,
        0,
        0,
        0,
        304,
        2151,
        1,
        0,
        0,
        0,
        306,
        2165,
        1,
        0,
        0,
        0,
        308,
        2175,
        1,
        0,
        0,
        0,
        310,
        2199,
        1,
        0,
        0,
        0,
        312,
        2201,
        1,
        0,
        0,
        0,
        314,
        2206,
        1,
        0,
        0,
        0,
        316,
        2209,
        1,
        0,
        0,
        0,
        318,
        2212,
        1,
        0,
        0,
        0,
        320,
        2236,
        1,
        0,
        0,
        0,
        322,
        2239,
        1,
        0,
        0,
        0,
        324,
        2244,
        1,
        0,
        0,
        0,
        326,
        2246,
        1,
        0,
        0,
        0,
        328,
        2256,
        1,
        0,
        0,
        0,
        330,
        2260,
        1,
        0,
        0,
        0,
        332,
        2262,
        1,
        0,
        0,
        0,
        334,
        2298,
        1,
        0,
        0,
        0,
        336,
        2302,
        1,
        0,
        0,
        0,
        338,
        2310,
        1,
        0,
        0,
        0,
        340,
        2312,
        1,
        0,
        0,
        0,
        342,
        2319,
        1,
        0,
        0,
        0,
        344,
        2330,
        1,
        0,
        0,
        0,
        346,
        2342,
        1,
        0,
        0,
        0,
        348,
        2344,
        1,
        0,
        0,
        0,
        350,
        2358,
        1,
        0,
        0,
        0,
        352,
        2360,
        1,
        0,
        0,
        0,
        354,
        2363,
        1,
        0,
        0,
        0,
        356,
        2371,
        1,
        0,
        0,
        0,
        358,
        2374,
        1,
        0,
        0,
        0,
        360,
        2383,
        1,
        0,
        0,
        0,
        362,
        2390,
        1,
        0,
        0,
        0,
        364,
        2392,
        1,
        0,
        0,
        0,
        366,
        2397,
        1,
        0,
        0,
        0,
        368,
        2414,
        1,
        0,
        0,
        0,
        370,
        2463,
        1,
        0,
        0,
        0,
        372,
        2465,
        1,
        0,
        0,
        0,
        374,
        2491,
        1,
        0,
        0,
        0,
        376,
        2494,
        1,
        0,
        0,
        0,
        378,
        2512,
        1,
        0,
        0,
        0,
        380,
        2532,
        1,
        0,
        0,
        0,
        382,
        2545,
        1,
        0,
        0,
        0,
        384,
        2571,
        1,
        0,
        0,
        0,
        386,
        2590,
        1,
        0,
        0,
        0,
        388,
        2596,
        1,
        0,
        0,
        0,
        390,
        2615,
        1,
        0,
        0,
        0,
        392,
        2628,
        1,
        0,
        0,
        0,
        394,
        2630,
        1,
        0,
        0,
        0,
        396,
        2641,
        1,
        0,
        0,
        0,
        398,
        2649,
        1,
        0,
        0,
        0,
        400,
        2655,
        1,
        0,
        0,
        0,
        402,
        2668,
        1,
        0,
        0,
        0,
        404,
        2676,
        1,
        0,
        0,
        0,
        406,
        2692,
        1,
        0,
        0,
        0,
        408,
        2694,
        1,
        0,
        0,
        0,
        410,
        2696,
        1,
        0,
        0,
        0,
        412,
        2698,
        1,
        0,
        0,
        0,
        414,
        2704,
        1,
        0,
        0,
        0,
        416,
        2709,
        1,
        0,
        0,
        0,
        418,
        2714,
        1,
        0,
        0,
        0,
        420,
        2717,
        1,
        0,
        0,
        0,
        422,
        2722,
        1,
        0,
        0,
        0,
        424,
        2728,
        1,
        0,
        0,
        0,
        426,
        2740,
        1,
        0,
        0,
        0,
        428,
        2744,
        1,
        0,
        0,
        0,
        430,
        2759,
        1,
        0,
        0,
        0,
        432,
        2765,
        1,
        0,
        0,
        0,
        434,
        2775,
        1,
        0,
        0,
        0,
        436,
        2785,
        1,
        0,
        0,
        0,
        438,
        2789,
        1,
        0,
        0,
        0,
        440,
        2793,
        1,
        0,
        0,
        0,
        442,
        2813,
        1,
        0,
        0,
        0,
        444,
        2819,
        1,
        0,
        0,
        0,
        446,
        2828,
        1,
        0,
        0,
        0,
        448,
        2837,
        1,
        0,
        0,
        0,
        450,
        2873,
        1,
        0,
        0,
        0,
        452,
        2883,
        1,
        0,
        0,
        0,
        454,
        2891,
        1,
        0,
        0,
        0,
        456,
        2898,
        1,
        0,
        0,
        0,
        458,
        2900,
        1,
        0,
        0,
        0,
        460,
        2906,
        1,
        0,
        0,
        0,
        462,
        2909,
        1,
        0,
        0,
        0,
        464,
        2913,
        1,
        0,
        0,
        0,
        466,
        2932,
        1,
        0,
        0,
        0,
        468,
        2934,
        1,
        0,
        0,
        0,
        470,
        2942,
        1,
        0,
        0,
        0,
        472,
        2947,
        1,
        0,
        0,
        0,
        474,
        2953,
        1,
        0,
        0,
        0,
        476,
        2962,
        1,
        0,
        0,
        0,
        478,
        2971,
        1,
        0,
        0,
        0,
        480,
        2982,
        1,
        0,
        0,
        0,
        482,
        2988,
        1,
        0,
        0,
        0,
        484,
        3001,
        1,
        0,
        0,
        0,
        486,
        3003,
        1,
        0,
        0,
        0,
        488,
        3011,
        1,
        0,
        0,
        0,
        490,
        3028,
        1,
        0,
        0,
        0,
        492,
        3030,
        1,
        0,
        0,
        0,
        494,
        3050,
        1,
        0,
        0,
        0,
        496,
        3052,
        1,
        0,
        0,
        0,
        498,
        3058,
        1,
        0,
        0,
        0,
        500,
        3064,
        1,
        0,
        0,
        0,
        502,
        3077,
        1,
        0,
        0,
        0,
        504,
        3079,
        1,
        0,
        0,
        0,
        506,
        3093,
        1,
        0,
        0,
        0,
        508,
        3101,
        1,
        0,
        0,
        0,
        510,
        3128,
        1,
        0,
        0,
        0,
        512,
        3160,
        1,
        0,
        0,
        0,
        514,
        3162,
        1,
        0,
        0,
        0,
        516,
        3173,
        1,
        0,
        0,
        0,
        518,
        3199,
        1,
        0,
        0,
        0,
        520,
        3234,
        1,
        0,
        0,
        0,
        522,
        3239,
        1,
        0,
        0,
        0,
        524,
        3262,
        1,
        0,
        0,
        0,
        526,
        3264,
        1,
        0,
        0,
        0,
        528,
        3266,
        1,
        0,
        0,
        0,
        530,
        3268,
        1,
        0,
        0,
        0,
        532,
        3270,
        1,
        0,
        0,
        0,
        534,
        3272,
        1,
        0,
        0,
        0,
        536,
        3279,
        1,
        0,
        0,
        0,
        538,
        3281,
        1,
        0,
        0,
        0,
        540,
        3283,
        1,
        0,
        0,
        0,
        542,
        3285,
        1,
        0,
        0,
        0,
        544,
        3298,
        1,
        0,
        0,
        0,
        546,
        3300,
        1,
        0,
        0,
        0,
        548,
        3311,
        1,
        0,
        0,
        0,
        550,
        3317,
        1,
        0,
        0,
        0,
        552,
        3325,
        1,
        0,
        0,
        0,
        554,
        3327,
        1,
        0,
        0,
        0,
        556,
        3334,
        1,
        0,
        0,
        0,
        558,
        3423,
        1,
        0,
        0,
        0,
        560,
        3428,
        1,
        0,
        0,
        0,
        562,
        3430,
        1,
        0,
        0,
        0,
        564,
        3432,
        1,
        0,
        0,
        0,
        566,
        3434,
        1,
        0,
        0,
        0,
        568,
        3443,
        1,
        0,
        0,
        0,
        570,
        3452,
        1,
        0,
        0,
        0,
        572,
        3454,
        1,
        0,
        0,
        0,
        574,
        3474,
        1,
        0,
        0,
        0,
        576,
        3501,
        1,
        0,
        0,
        0,
        578,
        3508,
        1,
        0,
        0,
        0,
        580,
        3519,
        1,
        0,
        0,
        0,
        582,
        3536,
        1,
        0,
        0,
        0,
        584,
        3545,
        1,
        0,
        0,
        0,
        586,
        3548,
        1,
        0,
        0,
        0,
        588,
        3550,
        1,
        0,
        0,
        0,
        590,
        3553,
        1,
        0,
        0,
        0,
        592,
        3555,
        1,
        0,
        0,
        0,
        594,
        3561,
        1,
        0,
        0,
        0,
        596,
        3582,
        1,
        0,
        0,
        0,
        598,
        3584,
        1,
        0,
        0,
        0,
        600,
        3613,
        1,
        0,
        0,
        0,
        602,
        3617,
        1,
        0,
        0,
        0,
        604,
        3624,
        1,
        0,
        0,
        0,
        606,
        3628,
        1,
        0,
        0,
        0,
        608,
        3634,
        1,
        0,
        0,
        0,
        610,
        3648,
        1,
        0,
        0,
        0,
        612,
        3650,
        1,
        0,
        0,
        0,
        614,
        3664,
        1,
        0,
        0,
        0,
        616,
        3666,
        1,
        0,
        0,
        0,
        618,
        3668,
        1,
        0,
        0,
        0,
        620,
        3670,
        1,
        0,
        0,
        0,
        622,
        3672,
        1,
        0,
        0,
        0,
        624,
        3701,
        1,
        0,
        0,
        0,
        626,
        3710,
        1,
        0,
        0,
        0,
        628,
        3728,
        1,
        0,
        0,
        0,
        630,
        3734,
        1,
        0,
        0,
        0,
        632,
        3737,
        1,
        0,
        0,
        0,
        634,
        3740,
        1,
        0,
        0,
        0,
        636,
        3743,
        1,
        0,
        0,
        0,
        638,
        3746,
        1,
        0,
        0,
        0,
        640,
        3757,
        1,
        0,
        0,
        0,
        642,
        3761,
        1,
        0,
        0,
        0,
        644,
        3763,
        1,
        0,
        0,
        0,
        646,
        3771,
        1,
        0,
        0,
        0,
        648,
        3781,
        1,
        0,
        0,
        0,
        650,
        3783,
        1,
        0,
        0,
        0,
        652,
        3791,
        1,
        0,
        0,
        0,
        654,
        3804,
        1,
        0,
        0,
        0,
        656,
        3811,
        1,
        0,
        0,
        0,
        658,
        3815,
        1,
        0,
        0,
        0,
        660,
        3819,
        1,
        0,
        0,
        0,
        662,
        3823,
        1,
        0,
        0,
        0,
        664,
        3827,
        1,
        0,
        0,
        0,
        666,
        3829,
        1,
        0,
        0,
        0,
        668,
        3849,
        1,
        0,
        0,
        0,
        670,
        3851,
        1,
        0,
        0,
        0,
        672,
        3853,
        1,
        0,
        0,
        0,
        674,
        3857,
        1,
        0,
        0,
        0,
        676,
        3859,
        1,
        0,
        0,
        0,
        678,
        3861,
        1,
        0,
        0,
        0,
        680,
        3863,
        1,
        0,
        0,
        0,
        682,
        3865,
        1,
        0,
        0,
        0,
        684,
        689,
        3,
        2,
        1,
        0,
        685,
        686,
        5,
        258,
        0,
        0,
        686,
        688,
        3,
        2,
        1,
        0,
        687,
        685,
        1,
        0,
        0,
        0,
        688,
        691,
        1,
        0,
        0,
        0,
        689,
        687,
        1,
        0,
        0,
        0,
        689,
        690,
        1,
        0,
        0,
        0,
        690,
        693,
        1,
        0,
        0,
        0,
        691,
        689,
        1,
        0,
        0,
        0,
        692,
        694,
        5,
        258,
        0,
        0,
        693,
        692,
        1,
        0,
        0,
        0,
        693,
        694,
        1,
        0,
        0,
        0,
        694,
        695,
        1,
        0,
        0,
        0,
        695,
        696,
        5,
        0,
        0,
        1,
        696,
        1,
        1,
        0,
        0,
        0,
        697,
        700,
        3,
        302,
        151,
        0,
        698,
        700,
        3,
        4,
        2,
        0,
        699,
        697,
        1,
        0,
        0,
        0,
        699,
        698,
        1,
        0,
        0,
        0,
        700,
        3,
        1,
        0,
        0,
        0,
        701,
        704,
        3,
        6,
        3,
        0,
        702,
        704,
        3,
        8,
        4,
        0,
        703,
        701,
        1,
        0,
        0,
        0,
        703,
        702,
        1,
        0,
        0,
        0,
        704,
        5,
        1,
        0,
        0,
        0,
        705,
        713,
        3,
        14,
        7,
        0,
        706,
        708,
        5,
        298,
        0,
        0,
        707,
        709,
        7,
        0,
        0,
        0,
        708,
        707,
        1,
        0,
        0,
        0,
        708,
        709,
        1,
        0,
        0,
        0,
        709,
        710,
        1,
        0,
        0,
        0,
        710,
        712,
        3,
        14,
        7,
        0,
        711,
        706,
        1,
        0,
        0,
        0,
        712,
        715,
        1,
        0,
        0,
        0,
        713,
        711,
        1,
        0,
        0,
        0,
        713,
        714,
        1,
        0,
        0,
        0,
        714,
        7,
        1,
        0,
        0,
        0,
        715,
        713,
        1,
        0,
        0,
        0,
        716,
        718,
        3,
        10,
        5,
        0,
        717,
        716,
        1,
        0,
        0,
        0,
        718,
        719,
        1,
        0,
        0,
        0,
        719,
        717,
        1,
        0,
        0,
        0,
        719,
        720,
        1,
        0,
        0,
        0,
        720,
        722,
        1,
        0,
        0,
        0,
        721,
        723,
        3,
        12,
        6,
        0,
        722,
        721,
        1,
        0,
        0,
        0,
        722,
        723,
        1,
        0,
        0,
        0,
        723,
        9,
        1,
        0,
        0,
        0,
        724,
        725,
        5,
        312,
        0,
        0,
        725,
        726,
        3,
        184,
        92,
        0,
        726,
        727,
        5,
        282,
        0,
        0,
        727,
        728,
        3,
        14,
        7,
        0,
        728,
        11,
        1,
        0,
        0,
        0,
        729,
        730,
        5,
        93,
        0,
        0,
        730,
        731,
        3,
        14,
        7,
        0,
        731,
        13,
        1,
        0,
        0,
        0,
        732,
        734,
        3,
        16,
        8,
        0,
        733,
        732,
        1,
        0,
        0,
        0,
        734,
        735,
        1,
        0,
        0,
        0,
        735,
        733,
        1,
        0,
        0,
        0,
        735,
        736,
        1,
        0,
        0,
        0,
        736,
        745,
        1,
        0,
        0,
        0,
        737,
        739,
        3,
        18,
        9,
        0,
        738,
        737,
        1,
        0,
        0,
        0,
        738,
        739,
        1,
        0,
        0,
        0,
        739,
        740,
        1,
        0,
        0,
        0,
        740,
        741,
        5,
        156,
        0,
        0,
        741,
        742,
        3,
        4,
        2,
        0,
        742,
        743,
        5,
        225,
        0,
        0,
        743,
        745,
        1,
        0,
        0,
        0,
        744,
        733,
        1,
        0,
        0,
        0,
        744,
        738,
        1,
        0,
        0,
        0,
        745,
        15,
        1,
        0,
        0,
        0,
        746,
        766,
        3,
        18,
        9,
        0,
        747,
        766,
        3,
        22,
        11,
        0,
        748,
        766,
        3,
        24,
        12,
        0,
        749,
        766,
        3,
        48,
        24,
        0,
        750,
        766,
        3,
        50,
        25,
        0,
        751,
        766,
        3,
        60,
        30,
        0,
        752,
        766,
        3,
        52,
        26,
        0,
        753,
        766,
        3,
        56,
        28,
        0,
        754,
        766,
        3,
        62,
        31,
        0,
        755,
        766,
        3,
        68,
        34,
        0,
        756,
        766,
        3,
        46,
        23,
        0,
        757,
        766,
        3,
        72,
        36,
        0,
        758,
        766,
        3,
        74,
        37,
        0,
        759,
        766,
        3,
        76,
        38,
        0,
        760,
        766,
        3,
        80,
        40,
        0,
        761,
        766,
        3,
        92,
        46,
        0,
        762,
        766,
        3,
        88,
        44,
        0,
        763,
        766,
        3,
        90,
        45,
        0,
        764,
        766,
        3,
        106,
        53,
        0,
        765,
        746,
        1,
        0,
        0,
        0,
        765,
        747,
        1,
        0,
        0,
        0,
        765,
        748,
        1,
        0,
        0,
        0,
        765,
        749,
        1,
        0,
        0,
        0,
        765,
        750,
        1,
        0,
        0,
        0,
        765,
        751,
        1,
        0,
        0,
        0,
        765,
        752,
        1,
        0,
        0,
        0,
        765,
        753,
        1,
        0,
        0,
        0,
        765,
        754,
        1,
        0,
        0,
        0,
        765,
        755,
        1,
        0,
        0,
        0,
        765,
        756,
        1,
        0,
        0,
        0,
        765,
        757,
        1,
        0,
        0,
        0,
        765,
        758,
        1,
        0,
        0,
        0,
        765,
        759,
        1,
        0,
        0,
        0,
        765,
        760,
        1,
        0,
        0,
        0,
        765,
        761,
        1,
        0,
        0,
        0,
        765,
        762,
        1,
        0,
        0,
        0,
        765,
        763,
        1,
        0,
        0,
        0,
        765,
        764,
        1,
        0,
        0,
        0,
        766,
        17,
        1,
        0,
        0,
        0,
        767,
        769,
        5,
        303,
        0,
        0,
        768,
        770,
        5,
        120,
        0,
        0,
        769,
        768,
        1,
        0,
        0,
        0,
        769,
        770,
        1,
        0,
        0,
        0,
        770,
        771,
        1,
        0,
        0,
        0,
        771,
        772,
        3,
        20,
        10,
        0,
        772,
        19,
        1,
        0,
        0,
        0,
        773,
        774,
        5,
        165,
        0,
        0,
        774,
        775,
        3,
        20,
        10,
        0,
        775,
        776,
        5,
        250,
        0,
        0,
        776,
        780,
        1,
        0,
        0,
        0,
        777,
        780,
        3,
        278,
        139,
        0,
        778,
        780,
        3,
        650,
        325,
        0,
        779,
        773,
        1,
        0,
        0,
        0,
        779,
        777,
        1,
        0,
        0,
        0,
        779,
        778,
        1,
        0,
        0,
        0,
        780,
        21,
        1,
        0,
        0,
        0,
        781,
        782,
        5,
        108,
        0,
        0,
        782,
        23,
        1,
        0,
        0,
        0,
        783,
        784,
        5,
        244,
        0,
        0,
        784,
        785,
        3,
        26,
        13,
        0,
        785,
        25,
        1,
        0,
        0,
        0,
        786,
        788,
        5,
        78,
        0,
        0,
        787,
        786,
        1,
        0,
        0,
        0,
        787,
        788,
        1,
        0,
        0,
        0,
        788,
        789,
        1,
        0,
        0,
        0,
        789,
        791,
        3,
        30,
        15,
        0,
        790,
        792,
        3,
        38,
        19,
        0,
        791,
        790,
        1,
        0,
        0,
        0,
        791,
        792,
        1,
        0,
        0,
        0,
        792,
        794,
        1,
        0,
        0,
        0,
        793,
        795,
        3,
        40,
        20,
        0,
        794,
        793,
        1,
        0,
        0,
        0,
        794,
        795,
        1,
        0,
        0,
        0,
        795,
        797,
        1,
        0,
        0,
        0,
        796,
        798,
        3,
        42,
        21,
        0,
        797,
        796,
        1,
        0,
        0,
        0,
        797,
        798,
        1,
        0,
        0,
        0,
        798,
        27,
        1,
        0,
        0,
        0,
        799,
        802,
        3,
        184,
        92,
        0,
        800,
        801,
        5,
        23,
        0,
        0,
        801,
        803,
        3,
        286,
        143,
        0,
        802,
        800,
        1,
        0,
        0,
        0,
        802,
        803,
        1,
        0,
        0,
        0,
        803,
        29,
        1,
        0,
        0,
        0,
        804,
        807,
        5,
        284,
        0,
        0,
        805,
        807,
        3,
        28,
        14,
        0,
        806,
        804,
        1,
        0,
        0,
        0,
        806,
        805,
        1,
        0,
        0,
        0,
        807,
        812,
        1,
        0,
        0,
        0,
        808,
        809,
        5,
        46,
        0,
        0,
        809,
        811,
        3,
        28,
        14,
        0,
        810,
        808,
        1,
        0,
        0,
        0,
        811,
        814,
        1,
        0,
        0,
        0,
        812,
        810,
        1,
        0,
        0,
        0,
        812,
        813,
        1,
        0,
        0,
        0,
        813,
        31,
        1,
        0,
        0,
        0,
        814,
        812,
        1,
        0,
        0,
        0,
        815,
        818,
        3,
        184,
        92,
        0,
        816,
        819,
        3,
        34,
        17,
        0,
        817,
        819,
        3,
        36,
        18,
        0,
        818,
        816,
        1,
        0,
        0,
        0,
        818,
        817,
        1,
        0,
        0,
        0,
        818,
        819,
        1,
        0,
        0,
        0,
        819,
        33,
        1,
        0,
        0,
        0,
        820,
        821,
        7,
        1,
        0,
        0,
        821,
        35,
        1,
        0,
        0,
        0,
        822,
        823,
        7,
        2,
        0,
        0,
        823,
        37,
        1,
        0,
        0,
        0,
        824,
        825,
        5,
        201,
        0,
        0,
        825,
        826,
        5,
        37,
        0,
        0,
        826,
        831,
        3,
        32,
        16,
        0,
        827,
        828,
        5,
        46,
        0,
        0,
        828,
        830,
        3,
        32,
        16,
        0,
        829,
        827,
        1,
        0,
        0,
        0,
        830,
        833,
        1,
        0,
        0,
        0,
        831,
        829,
        1,
        0,
        0,
        0,
        831,
        832,
        1,
        0,
        0,
        0,
        832,
        39,
        1,
        0,
        0,
        0,
        833,
        831,
        1,
        0,
        0,
        0,
        834,
        835,
        7,
        3,
        0,
        0,
        835,
        836,
        3,
        184,
        92,
        0,
        836,
        41,
        1,
        0,
        0,
        0,
        837,
        838,
        5,
        160,
        0,
        0,
        838,
        839,
        3,
        184,
        92,
        0,
        839,
        43,
        1,
        0,
        0,
        0,
        840,
        841,
        5,
        313,
        0,
        0,
        841,
        842,
        3,
        184,
        92,
        0,
        842,
        45,
        1,
        0,
        0,
        0,
        843,
        844,
        5,
        314,
        0,
        0,
        844,
        846,
        3,
        26,
        13,
        0,
        845,
        847,
        3,
        44,
        22,
        0,
        846,
        845,
        1,
        0,
        0,
        0,
        846,
        847,
        1,
        0,
        0,
        0,
        847,
        47,
        1,
        0,
        0,
        0,
        848,
        849,
        5,
        57,
        0,
        0,
        849,
        850,
        3,
        108,
        54,
        0,
        850,
        49,
        1,
        0,
        0,
        0,
        851,
        852,
        5,
        136,
        0,
        0,
        852,
        853,
        3,
        110,
        55,
        0,
        853,
        51,
        1,
        0,
        0,
        0,
        854,
        855,
        5,
        261,
        0,
        0,
        855,
        860,
        3,
        54,
        27,
        0,
        856,
        857,
        5,
        46,
        0,
        0,
        857,
        859,
        3,
        54,
        27,
        0,
        858,
        856,
        1,
        0,
        0,
        0,
        859,
        862,
        1,
        0,
        0,
        0,
        860,
        858,
        1,
        0,
        0,
        0,
        860,
        861,
        1,
        0,
        0,
        0,
        861,
        53,
        1,
        0,
        0,
        0,
        862,
        860,
        1,
        0,
        0,
        0,
        863,
        864,
        3,
        216,
        108,
        0,
        864,
        865,
        5,
        97,
        0,
        0,
        865,
        866,
        3,
        184,
        92,
        0,
        866,
        886,
        1,
        0,
        0,
        0,
        867,
        868,
        3,
        218,
        109,
        0,
        868,
        869,
        5,
        97,
        0,
        0,
        869,
        870,
        3,
        184,
        92,
        0,
        870,
        886,
        1,
        0,
        0,
        0,
        871,
        872,
        3,
        286,
        143,
        0,
        872,
        873,
        5,
        97,
        0,
        0,
        873,
        874,
        3,
        184,
        92,
        0,
        874,
        886,
        1,
        0,
        0,
        0,
        875,
        876,
        3,
        286,
        143,
        0,
        876,
        877,
        5,
        208,
        0,
        0,
        877,
        878,
        3,
        184,
        92,
        0,
        878,
        886,
        1,
        0,
        0,
        0,
        879,
        880,
        3,
        286,
        143,
        0,
        880,
        881,
        3,
        140,
        70,
        0,
        881,
        886,
        1,
        0,
        0,
        0,
        882,
        883,
        3,
        286,
        143,
        0,
        883,
        884,
        3,
        142,
        71,
        0,
        884,
        886,
        1,
        0,
        0,
        0,
        885,
        863,
        1,
        0,
        0,
        0,
        885,
        867,
        1,
        0,
        0,
        0,
        885,
        871,
        1,
        0,
        0,
        0,
        885,
        875,
        1,
        0,
        0,
        0,
        885,
        879,
        1,
        0,
        0,
        0,
        885,
        882,
        1,
        0,
        0,
        0,
        886,
        55,
        1,
        0,
        0,
        0,
        887,
        888,
        5,
        234,
        0,
        0,
        888,
        893,
        3,
        58,
        29,
        0,
        889,
        890,
        5,
        46,
        0,
        0,
        890,
        892,
        3,
        58,
        29,
        0,
        891,
        889,
        1,
        0,
        0,
        0,
        892,
        895,
        1,
        0,
        0,
        0,
        893,
        891,
        1,
        0,
        0,
        0,
        893,
        894,
        1,
        0,
        0,
        0,
        894,
        57,
        1,
        0,
        0,
        0,
        895,
        893,
        1,
        0,
        0,
        0,
        896,
        905,
        3,
        216,
        108,
        0,
        897,
        905,
        3,
        218,
        109,
        0,
        898,
        899,
        3,
        286,
        143,
        0,
        899,
        900,
        3,
        140,
        70,
        0,
        900,
        905,
        1,
        0,
        0,
        0,
        901,
        902,
        3,
        286,
        143,
        0,
        902,
        903,
        3,
        142,
        71,
        0,
        903,
        905,
        1,
        0,
        0,
        0,
        904,
        896,
        1,
        0,
        0,
        0,
        904,
        897,
        1,
        0,
        0,
        0,
        904,
        898,
        1,
        0,
        0,
        0,
        904,
        901,
        1,
        0,
        0,
        0,
        905,
        59,
        1,
        0,
        0,
        0,
        906,
        908,
        7,
        4,
        0,
        0,
        907,
        906,
        1,
        0,
        0,
        0,
        907,
        908,
        1,
        0,
        0,
        0,
        908,
        909,
        1,
        0,
        0,
        0,
        909,
        910,
        5,
        70,
        0,
        0,
        910,
        915,
        3,
        184,
        92,
        0,
        911,
        912,
        5,
        46,
        0,
        0,
        912,
        914,
        3,
        184,
        92,
        0,
        913,
        911,
        1,
        0,
        0,
        0,
        914,
        917,
        1,
        0,
        0,
        0,
        915,
        913,
        1,
        0,
        0,
        0,
        915,
        916,
        1,
        0,
        0,
        0,
        916,
        61,
        1,
        0,
        0,
        0,
        917,
        915,
        1,
        0,
        0,
        0,
        918,
        920,
        5,
        197,
        0,
        0,
        919,
        918,
        1,
        0,
        0,
        0,
        919,
        920,
        1,
        0,
        0,
        0,
        920,
        921,
        1,
        0,
        0,
        0,
        921,
        923,
        5,
        169,
        0,
        0,
        922,
        924,
        3,
        64,
        32,
        0,
        923,
        922,
        1,
        0,
        0,
        0,
        923,
        924,
        1,
        0,
        0,
        0,
        924,
        925,
        1,
        0,
        0,
        0,
        925,
        929,
        3,
        108,
        54,
        0,
        926,
        928,
        3,
        66,
        33,
        0,
        927,
        926,
        1,
        0,
        0,
        0,
        928,
        931,
        1,
        0,
        0,
        0,
        929,
        927,
        1,
        0,
        0,
        0,
        929,
        930,
        1,
        0,
        0,
        0,
        930,
        933,
        1,
        0,
        0,
        0,
        931,
        929,
        1,
        0,
        0,
        0,
        932,
        934,
        3,
        44,
        22,
        0,
        933,
        932,
        1,
        0,
        0,
        0,
        933,
        934,
        1,
        0,
        0,
        0,
        934,
        63,
        1,
        0,
        0,
        0,
        935,
        941,
        5,
        235,
        0,
        0,
        936,
        938,
        5,
        91,
        0,
        0,
        937,
        939,
        5,
        30,
        0,
        0,
        938,
        937,
        1,
        0,
        0,
        0,
        938,
        939,
        1,
        0,
        0,
        0,
        939,
        942,
        1,
        0,
        0,
        0,
        940,
        942,
        5,
        92,
        0,
        0,
        941,
        936,
        1,
        0,
        0,
        0,
        941,
        940,
        1,
        0,
        0,
        0,
        942,
        952,
        1,
        0,
        0,
        0,
        943,
        949,
        5,
        76,
        0,
        0,
        944,
        946,
        5,
        232,
        0,
        0,
        945,
        947,
        5,
        30,
        0,
        0,
        946,
        945,
        1,
        0,
        0,
        0,
        946,
        947,
        1,
        0,
        0,
        0,
        947,
        950,
        1,
        0,
        0,
        0,
        948,
        950,
        5,
        233,
        0,
        0,
        949,
        944,
        1,
        0,
        0,
        0,
        949,
        948,
        1,
        0,
        0,
        0,
        950,
        952,
        1,
        0,
        0,
        0,
        951,
        935,
        1,
        0,
        0,
        0,
        951,
        943,
        1,
        0,
        0,
        0,
        952,
        65,
        1,
        0,
        0,
        0,
        953,
        979,
        5,
        306,
        0,
        0,
        954,
        962,
        5,
        132,
        0,
        0,
        955,
        956,
        5,
        281,
        0,
        0,
        956,
        962,
        5,
        132,
        0,
        0,
        957,
        958,
        5,
        223,
        0,
        0,
        958,
        962,
        5,
        132,
        0,
        0,
        959,
        960,
        5,
        209,
        0,
        0,
        960,
        962,
        5,
        132,
        0,
        0,
        961,
        954,
        1,
        0,
        0,
        0,
        961,
        955,
        1,
        0,
        0,
        0,
        961,
        957,
        1,
        0,
        0,
        0,
        961,
        959,
        1,
        0,
        0,
        0,
        962,
        964,
        1,
        0,
        0,
        0,
        963,
        965,
        5,
        257,
        0,
        0,
        964,
        963,
        1,
        0,
        0,
        0,
        964,
        965,
        1,
        0,
        0,
        0,
        965,
        966,
        1,
        0,
        0,
        0,
        966,
        967,
        3,
        286,
        143,
        0,
        967,
        968,
        3,
        154,
        77,
        0,
        968,
        969,
        5,
        165,
        0,
        0,
        969,
        970,
        3,
        288,
        144,
        0,
        970,
        971,
        5,
        250,
        0,
        0,
        971,
        980,
        1,
        0,
        0,
        0,
        972,
        973,
        5,
        148,
        0,
        0,
        973,
        974,
        5,
        195,
        0,
        0,
        974,
        980,
        3,
        288,
        144,
        0,
        975,
        976,
        5,
        251,
        0,
        0,
        976,
        977,
        3,
        286,
        143,
        0,
        977,
        978,
        3,
        154,
        77,
        0,
        978,
        980,
        1,
        0,
        0,
        0,
        979,
        961,
        1,
        0,
        0,
        0,
        979,
        972,
        1,
        0,
        0,
        0,
        979,
        975,
        1,
        0,
        0,
        0,
        980,
        67,
        1,
        0,
        0,
        0,
        981,
        982,
        5,
        170,
        0,
        0,
        982,
        986,
        3,
        112,
        56,
        0,
        983,
        985,
        3,
        70,
        35,
        0,
        984,
        983,
        1,
        0,
        0,
        0,
        985,
        988,
        1,
        0,
        0,
        0,
        986,
        984,
        1,
        0,
        0,
        0,
        986,
        987,
        1,
        0,
        0,
        0,
        987,
        69,
        1,
        0,
        0,
        0,
        988,
        986,
        1,
        0,
        0,
        0,
        989,
        990,
        5,
        195,
        0,
        0,
        990,
        991,
        7,
        5,
        0,
        0,
        991,
        992,
        3,
        52,
        26,
        0,
        992,
        71,
        1,
        0,
        0,
        0,
        993,
        995,
        5,
        107,
        0,
        0,
        994,
        996,
        5,
        313,
        0,
        0,
        995,
        994,
        1,
        0,
        0,
        0,
        995,
        996,
        1,
        0,
        0,
        0,
        996,
        997,
        1,
        0,
        0,
        0,
        997,
        998,
        3,
        184,
        92,
        0,
        998,
        73,
        1,
        0,
        0,
        0,
        999,
        1000,
        5,
        301,
        0,
        0,
        1000,
        1001,
        3,
        184,
        92,
        0,
        1001,
        1002,
        5,
        23,
        0,
        0,
        1002,
        1003,
        3,
        286,
        143,
        0,
        1003,
        75,
        1,
        0,
        0,
        0,
        1004,
        1005,
        5,
        159,
        0,
        0,
        1005,
        1010,
        3,
        78,
        39,
        0,
        1006,
        1007,
        5,
        46,
        0,
        0,
        1007,
        1009,
        3,
        78,
        39,
        0,
        1008,
        1006,
        1,
        0,
        0,
        0,
        1009,
        1012,
        1,
        0,
        0,
        0,
        1010,
        1008,
        1,
        0,
        0,
        0,
        1010,
        1011,
        1,
        0,
        0,
        0,
        1011,
        77,
        1,
        0,
        0,
        0,
        1012,
        1010,
        1,
        0,
        0,
        0,
        1013,
        1014,
        3,
        286,
        143,
        0,
        1014,
        1015,
        5,
        97,
        0,
        0,
        1015,
        1016,
        3,
        184,
        92,
        0,
        1016,
        79,
        1,
        0,
        0,
        0,
        1017,
        1019,
        5,
        197,
        0,
        0,
        1018,
        1017,
        1,
        0,
        0,
        0,
        1018,
        1019,
        1,
        0,
        0,
        0,
        1019,
        1020,
        1,
        0,
        0,
        0,
        1020,
        1021,
        5,
        38,
        0,
        0,
        1021,
        1034,
        3,
        82,
        41,
        0,
        1022,
        1031,
        5,
        165,
        0,
        0,
        1023,
        1028,
        3,
        84,
        42,
        0,
        1024,
        1025,
        5,
        46,
        0,
        0,
        1025,
        1027,
        3,
        84,
        42,
        0,
        1026,
        1024,
        1,
        0,
        0,
        0,
        1027,
        1030,
        1,
        0,
        0,
        0,
        1028,
        1026,
        1,
        0,
        0,
        0,
        1028,
        1029,
        1,
        0,
        0,
        0,
        1029,
        1032,
        1,
        0,
        0,
        0,
        1030,
        1028,
        1,
        0,
        0,
        0,
        1031,
        1023,
        1,
        0,
        0,
        0,
        1031,
        1032,
        1,
        0,
        0,
        0,
        1032,
        1033,
        1,
        0,
        0,
        0,
        1033,
        1035,
        5,
        250,
        0,
        0,
        1034,
        1022,
        1,
        0,
        0,
        0,
        1034,
        1035,
        1,
        0,
        0,
        0,
        1035,
        1051,
        1,
        0,
        0,
        0,
        1036,
        1049,
        5,
        318,
        0,
        0,
        1037,
        1050,
        5,
        284,
        0,
        0,
        1038,
        1043,
        3,
        86,
        43,
        0,
        1039,
        1040,
        5,
        46,
        0,
        0,
        1040,
        1042,
        3,
        86,
        43,
        0,
        1041,
        1039,
        1,
        0,
        0,
        0,
        1042,
        1045,
        1,
        0,
        0,
        0,
        1043,
        1041,
        1,
        0,
        0,
        0,
        1043,
        1044,
        1,
        0,
        0,
        0,
        1044,
        1047,
        1,
        0,
        0,
        0,
        1045,
        1043,
        1,
        0,
        0,
        0,
        1046,
        1048,
        3,
        44,
        22,
        0,
        1047,
        1046,
        1,
        0,
        0,
        0,
        1047,
        1048,
        1,
        0,
        0,
        0,
        1048,
        1050,
        1,
        0,
        0,
        0,
        1049,
        1037,
        1,
        0,
        0,
        0,
        1049,
        1038,
        1,
        0,
        0,
        0,
        1050,
        1052,
        1,
        0,
        0,
        0,
        1051,
        1036,
        1,
        0,
        0,
        0,
        1051,
        1052,
        1,
        0,
        0,
        0,
        1052,
        81,
        1,
        0,
        0,
        0,
        1053,
        1054,
        3,
        284,
        142,
        0,
        1054,
        1055,
        3,
        674,
        337,
        0,
        1055,
        83,
        1,
        0,
        0,
        0,
        1056,
        1057,
        3,
        184,
        92,
        0,
        1057,
        85,
        1,
        0,
        0,
        0,
        1058,
        1061,
        3,
        286,
        143,
        0,
        1059,
        1060,
        5,
        23,
        0,
        0,
        1060,
        1062,
        3,
        286,
        143,
        0,
        1061,
        1059,
        1,
        0,
        0,
        0,
        1061,
        1062,
        1,
        0,
        0,
        0,
        1062,
        87,
        1,
        0,
        0,
        0,
        1063,
        1064,
        5,
        162,
        0,
        0,
        1064,
        1067,
        5,
        58,
        0,
        0,
        1065,
        1066,
        5,
        314,
        0,
        0,
        1066,
        1068,
        5,
        125,
        0,
        0,
        1067,
        1065,
        1,
        0,
        0,
        0,
        1067,
        1068,
        1,
        0,
        0,
        0,
        1068,
        1069,
        1,
        0,
        0,
        0,
        1069,
        1070,
        5,
        114,
        0,
        0,
        1070,
        1071,
        3,
        184,
        92,
        0,
        1071,
        1072,
        5,
        23,
        0,
        0,
        1072,
        1075,
        3,
        286,
        143,
        0,
        1073,
        1074,
        5,
        106,
        0,
        0,
        1074,
        1076,
        3,
        656,
        328,
        0,
        1075,
        1073,
        1,
        0,
        0,
        0,
        1075,
        1076,
        1,
        0,
        0,
        0,
        1076,
        89,
        1,
        0,
        0,
        0,
        1077,
        1078,
        5,
        113,
        0,
        0,
        1078,
        1079,
        5,
        165,
        0,
        0,
        1079,
        1080,
        3,
        286,
        143,
        0,
        1080,
        1081,
        5,
        131,
        0,
        0,
        1081,
        1082,
        3,
        184,
        92,
        0,
        1082,
        1084,
        5,
        29,
        0,
        0,
        1083,
        1085,
        3,
        16,
        8,
        0,
        1084,
        1083,
        1,
        0,
        0,
        0,
        1085,
        1086,
        1,
        0,
        0,
        0,
        1086,
        1084,
        1,
        0,
        0,
        0,
        1086,
        1087,
        1,
        0,
        0,
        0,
        1087,
        1088,
        1,
        0,
        0,
        0,
        1088,
        1089,
        5,
        250,
        0,
        0,
        1089,
        91,
        1,
        0,
        0,
        0,
        1090,
        1092,
        5,
        197,
        0,
        0,
        1091,
        1090,
        1,
        0,
        0,
        0,
        1091,
        1092,
        1,
        0,
        0,
        0,
        1092,
        1093,
        1,
        0,
        0,
        0,
        1093,
        1095,
        5,
        38,
        0,
        0,
        1094,
        1096,
        3,
        94,
        47,
        0,
        1095,
        1094,
        1,
        0,
        0,
        0,
        1095,
        1096,
        1,
        0,
        0,
        0,
        1096,
        1097,
        1,
        0,
        0,
        0,
        1097,
        1098,
        5,
        156,
        0,
        0,
        1098,
        1099,
        3,
        4,
        2,
        0,
        1099,
        1101,
        5,
        225,
        0,
        0,
        1100,
        1102,
        3,
        96,
        48,
        0,
        1101,
        1100,
        1,
        0,
        0,
        0,
        1101,
        1102,
        1,
        0,
        0,
        0,
        1102,
        93,
        1,
        0,
        0,
        0,
        1103,
        1113,
        5,
        165,
        0,
        0,
        1104,
        1114,
        5,
        284,
        0,
        0,
        1105,
        1110,
        3,
        286,
        143,
        0,
        1106,
        1107,
        5,
        46,
        0,
        0,
        1107,
        1109,
        3,
        286,
        143,
        0,
        1108,
        1106,
        1,
        0,
        0,
        0,
        1109,
        1112,
        1,
        0,
        0,
        0,
        1110,
        1108,
        1,
        0,
        0,
        0,
        1110,
        1111,
        1,
        0,
        0,
        0,
        1111,
        1114,
        1,
        0,
        0,
        0,
        1112,
        1110,
        1,
        0,
        0,
        0,
        1113,
        1104,
        1,
        0,
        0,
        0,
        1113,
        1105,
        1,
        0,
        0,
        0,
        1113,
        1114,
        1,
        0,
        0,
        0,
        1114,
        1115,
        1,
        0,
        0,
        0,
        1115,
        1116,
        5,
        250,
        0,
        0,
        1116,
        95,
        1,
        0,
        0,
        0,
        1117,
        1122,
        5,
        131,
        0,
        0,
        1118,
        1120,
        3,
        184,
        92,
        0,
        1119,
        1118,
        1,
        0,
        0,
        0,
        1119,
        1120,
        1,
        0,
        0,
        0,
        1120,
        1121,
        1,
        0,
        0,
        0,
        1121,
        1123,
        5,
        50,
        0,
        0,
        1122,
        1119,
        1,
        0,
        0,
        0,
        1122,
        1123,
        1,
        0,
        0,
        0,
        1123,
        1124,
        1,
        0,
        0,
        0,
        1124,
        1130,
        5,
        291,
        0,
        0,
        1125,
        1129,
        3,
        98,
        49,
        0,
        1126,
        1129,
        3,
        100,
        50,
        0,
        1127,
        1129,
        3,
        104,
        52,
        0,
        1128,
        1125,
        1,
        0,
        0,
        0,
        1128,
        1126,
        1,
        0,
        0,
        0,
        1128,
        1127,
        1,
        0,
        0,
        0,
        1129,
        1132,
        1,
        0,
        0,
        0,
        1130,
        1128,
        1,
        0,
        0,
        0,
        1130,
        1131,
        1,
        0,
        0,
        0,
        1131,
        97,
        1,
        0,
        0,
        0,
        1132,
        1130,
        1,
        0,
        0,
        0,
        1133,
        1134,
        5,
        193,
        0,
        0,
        1134,
        1135,
        3,
        184,
        92,
        0,
        1135,
        1136,
        7,
        6,
        0,
        0,
        1136,
        99,
        1,
        0,
        0,
        0,
        1137,
        1138,
        5,
        195,
        0,
        0,
        1138,
        1139,
        5,
        103,
        0,
        0,
        1139,
        1141,
        5,
        243,
        0,
        0,
        1140,
        1142,
        3,
        102,
        51,
        0,
        1141,
        1140,
        1,
        0,
        0,
        0,
        1141,
        1142,
        1,
        0,
        0,
        0,
        1142,
        1145,
        1,
        0,
        0,
        0,
        1143,
        1144,
        5,
        282,
        0,
        0,
        1144,
        1146,
        7,
        7,
        0,
        0,
        1145,
        1143,
        1,
        0,
        0,
        0,
        1145,
        1146,
        1,
        0,
        0,
        0,
        1146,
        1151,
        1,
        0,
        0,
        0,
        1147,
        1148,
        5,
        195,
        0,
        0,
        1148,
        1149,
        5,
        103,
        0,
        0,
        1149,
        1151,
        7,
        7,
        0,
        0,
        1150,
        1137,
        1,
        0,
        0,
        0,
        1150,
        1147,
        1,
        0,
        0,
        0,
        1151,
        101,
        1,
        0,
        0,
        0,
        1152,
        1154,
        5,
        112,
        0,
        0,
        1153,
        1152,
        1,
        0,
        0,
        0,
        1153,
        1154,
        1,
        0,
        0,
        0,
        1154,
        1155,
        1,
        0,
        0,
        0,
        1155,
        1156,
        3,
        184,
        92,
        0,
        1156,
        1157,
        3,
        612,
        306,
        0,
        1157,
        103,
        1,
        0,
        0,
        0,
        1158,
        1159,
        5,
        239,
        0,
        0,
        1159,
        1160,
        5,
        274,
        0,
        0,
        1160,
        1161,
        5,
        23,
        0,
        0,
        1161,
        1162,
        3,
        286,
        143,
        0,
        1162,
        105,
        1,
        0,
        0,
        0,
        1163,
        1165,
        3,
        38,
        19,
        0,
        1164,
        1166,
        3,
        40,
        20,
        0,
        1165,
        1164,
        1,
        0,
        0,
        0,
        1165,
        1166,
        1,
        0,
        0,
        0,
        1166,
        1168,
        1,
        0,
        0,
        0,
        1167,
        1169,
        3,
        42,
        21,
        0,
        1168,
        1167,
        1,
        0,
        0,
        0,
        1168,
        1169,
        1,
        0,
        0,
        0,
        1169,
        1176,
        1,
        0,
        0,
        0,
        1170,
        1172,
        3,
        40,
        20,
        0,
        1171,
        1173,
        3,
        42,
        21,
        0,
        1172,
        1171,
        1,
        0,
        0,
        0,
        1172,
        1173,
        1,
        0,
        0,
        0,
        1173,
        1176,
        1,
        0,
        0,
        0,
        1174,
        1176,
        3,
        42,
        21,
        0,
        1175,
        1163,
        1,
        0,
        0,
        0,
        1175,
        1170,
        1,
        0,
        0,
        0,
        1175,
        1174,
        1,
        0,
        0,
        0,
        1176,
        107,
        1,
        0,
        0,
        0,
        1177,
        1182,
        3,
        112,
        56,
        0,
        1178,
        1179,
        5,
        46,
        0,
        0,
        1179,
        1181,
        3,
        112,
        56,
        0,
        1180,
        1178,
        1,
        0,
        0,
        0,
        1181,
        1184,
        1,
        0,
        0,
        0,
        1182,
        1180,
        1,
        0,
        0,
        0,
        1182,
        1183,
        1,
        0,
        0,
        0,
        1183,
        109,
        1,
        0,
        0,
        0,
        1184,
        1182,
        1,
        0,
        0,
        0,
        1185,
        1190,
        3,
        114,
        57,
        0,
        1186,
        1187,
        5,
        46,
        0,
        0,
        1187,
        1189,
        3,
        114,
        57,
        0,
        1188,
        1186,
        1,
        0,
        0,
        0,
        1189,
        1192,
        1,
        0,
        0,
        0,
        1190,
        1188,
        1,
        0,
        0,
        0,
        1190,
        1191,
        1,
        0,
        0,
        0,
        1191,
        111,
        1,
        0,
        0,
        0,
        1192,
        1190,
        1,
        0,
        0,
        0,
        1193,
        1194,
        3,
        286,
        143,
        0,
        1194,
        1195,
        5,
        97,
        0,
        0,
        1195,
        1197,
        1,
        0,
        0,
        0,
        1196,
        1193,
        1,
        0,
        0,
        0,
        1196,
        1197,
        1,
        0,
        0,
        0,
        1197,
        1199,
        1,
        0,
        0,
        0,
        1198,
        1200,
        3,
        124,
        62,
        0,
        1199,
        1198,
        1,
        0,
        0,
        0,
        1199,
        1200,
        1,
        0,
        0,
        0,
        1200,
        1201,
        1,
        0,
        0,
        0,
        1201,
        1202,
        3,
        118,
        59,
        0,
        1202,
        113,
        1,
        0,
        0,
        0,
        1203,
        1204,
        3,
        674,
        337,
        0,
        1204,
        1205,
        5,
        97,
        0,
        0,
        1205,
        1207,
        1,
        0,
        0,
        0,
        1206,
        1203,
        1,
        0,
        0,
        0,
        1206,
        1207,
        1,
        0,
        0,
        0,
        1207,
        1208,
        1,
        0,
        0,
        0,
        1208,
        1214,
        3,
        136,
        68,
        0,
        1209,
        1210,
        3,
        160,
        80,
        0,
        1210,
        1211,
        3,
        136,
        68,
        0,
        1211,
        1213,
        1,
        0,
        0,
        0,
        1212,
        1209,
        1,
        0,
        0,
        0,
        1213,
        1216,
        1,
        0,
        0,
        0,
        1214,
        1212,
        1,
        0,
        0,
        0,
        1214,
        1215,
        1,
        0,
        0,
        0,
        1215,
        115,
        1,
        0,
        0,
        0,
        1216,
        1214,
        1,
        0,
        0,
        0,
        1217,
        1218,
        5,
        156,
        0,
        0,
        1218,
        1219,
        5,
        5,
        0,
        0,
        1219,
        1232,
        5,
        225,
        0,
        0,
        1220,
        1222,
        5,
        156,
        0,
        0,
        1221,
        1223,
        5,
        5,
        0,
        0,
        1222,
        1221,
        1,
        0,
        0,
        0,
        1222,
        1223,
        1,
        0,
        0,
        0,
        1223,
        1224,
        1,
        0,
        0,
        0,
        1224,
        1226,
        5,
        46,
        0,
        0,
        1225,
        1227,
        5,
        5,
        0,
        0,
        1226,
        1225,
        1,
        0,
        0,
        0,
        1226,
        1227,
        1,
        0,
        0,
        0,
        1227,
        1228,
        1,
        0,
        0,
        0,
        1228,
        1232,
        5,
        225,
        0,
        0,
        1229,
        1232,
        5,
        207,
        0,
        0,
        1230,
        1232,
        5,
        284,
        0,
        0,
        1231,
        1217,
        1,
        0,
        0,
        0,
        1231,
        1220,
        1,
        0,
        0,
        0,
        1231,
        1229,
        1,
        0,
        0,
        0,
        1231,
        1230,
        1,
        0,
        0,
        0,
        1232,
        117,
        1,
        0,
        0,
        0,
        1233,
        1236,
        3,
        120,
        60,
        0,
        1234,
        1236,
        3,
        122,
        61,
        0,
        1235,
        1233,
        1,
        0,
        0,
        0,
        1235,
        1234,
        1,
        0,
        0,
        0,
        1236,
        119,
        1,
        0,
        0,
        0,
        1237,
        1238,
        7,
        8,
        0,
        0,
        1238,
        1239,
        5,
        165,
        0,
        0,
        1239,
        1240,
        3,
        122,
        61,
        0,
        1240,
        1241,
        5,
        250,
        0,
        0,
        1241,
        121,
        1,
        0,
        0,
        0,
        1242,
        1251,
        3,
        134,
        67,
        0,
        1243,
        1245,
        3,
        158,
        79,
        0,
        1244,
        1246,
        3,
        116,
        58,
        0,
        1245,
        1244,
        1,
        0,
        0,
        0,
        1245,
        1246,
        1,
        0,
        0,
        0,
        1246,
        1247,
        1,
        0,
        0,
        0,
        1247,
        1248,
        3,
        134,
        67,
        0,
        1248,
        1250,
        1,
        0,
        0,
        0,
        1249,
        1243,
        1,
        0,
        0,
        0,
        1250,
        1253,
        1,
        0,
        0,
        0,
        1251,
        1249,
        1,
        0,
        0,
        0,
        1251,
        1252,
        1,
        0,
        0,
        0,
        1252,
        1256,
        1,
        0,
        0,
        0,
        1253,
        1251,
        1,
        0,
        0,
        0,
        1254,
        1256,
        3,
        138,
        69,
        0,
        1255,
        1242,
        1,
        0,
        0,
        0,
        1255,
        1254,
        1,
        0,
        0,
        0,
        1256,
        1257,
        1,
        0,
        0,
        0,
        1257,
        1255,
        1,
        0,
        0,
        0,
        1257,
        1258,
        1,
        0,
        0,
        0,
        1258,
        123,
        1,
        0,
        0,
        0,
        1259,
        1260,
        5,
        21,
        0,
        0,
        1260,
        1262,
        5,
        267,
        0,
        0,
        1261,
        1263,
        3,
        130,
        65,
        0,
        1262,
        1261,
        1,
        0,
        0,
        0,
        1262,
        1263,
        1,
        0,
        0,
        0,
        1263,
        1294,
        1,
        0,
        0,
        0,
        1264,
        1265,
        5,
        18,
        0,
        0,
        1265,
        1267,
        5,
        267,
        0,
        0,
        1266,
        1268,
        3,
        130,
        65,
        0,
        1267,
        1266,
        1,
        0,
        0,
        0,
        1267,
        1268,
        1,
        0,
        0,
        0,
        1268,
        1294,
        1,
        0,
        0,
        0,
        1269,
        1271,
        5,
        21,
        0,
        0,
        1270,
        1272,
        3,
        126,
        63,
        0,
        1271,
        1270,
        1,
        0,
        0,
        0,
        1271,
        1272,
        1,
        0,
        0,
        0,
        1272,
        1274,
        1,
        0,
        0,
        0,
        1273,
        1275,
        3,
        130,
        65,
        0,
        1274,
        1273,
        1,
        0,
        0,
        0,
        1274,
        1275,
        1,
        0,
        0,
        0,
        1275,
        1294,
        1,
        0,
        0,
        0,
        1276,
        1278,
        5,
        18,
        0,
        0,
        1277,
        1279,
        3,
        130,
        65,
        0,
        1278,
        1277,
        1,
        0,
        0,
        0,
        1278,
        1279,
        1,
        0,
        0,
        0,
        1279,
        1294,
        1,
        0,
        0,
        0,
        1280,
        1282,
        5,
        267,
        0,
        0,
        1281,
        1283,
        3,
        126,
        63,
        0,
        1282,
        1281,
        1,
        0,
        0,
        0,
        1282,
        1283,
        1,
        0,
        0,
        0,
        1283,
        1285,
        1,
        0,
        0,
        0,
        1284,
        1286,
        3,
        130,
        65,
        0,
        1285,
        1284,
        1,
        0,
        0,
        0,
        1285,
        1286,
        1,
        0,
        0,
        0,
        1286,
        1287,
        1,
        0,
        0,
        0,
        1287,
        1294,
        3,
        128,
        64,
        0,
        1288,
        1289,
        5,
        267,
        0,
        0,
        1289,
        1291,
        3,
        126,
        63,
        0,
        1290,
        1292,
        3,
        130,
        65,
        0,
        1291,
        1290,
        1,
        0,
        0,
        0,
        1291,
        1292,
        1,
        0,
        0,
        0,
        1292,
        1294,
        1,
        0,
        0,
        0,
        1293,
        1259,
        1,
        0,
        0,
        0,
        1293,
        1264,
        1,
        0,
        0,
        0,
        1293,
        1269,
        1,
        0,
        0,
        0,
        1293,
        1276,
        1,
        0,
        0,
        0,
        1293,
        1280,
        1,
        0,
        0,
        0,
        1293,
        1288,
        1,
        0,
        0,
        0,
        1294,
        125,
        1,
        0,
        0,
        0,
        1295,
        1298,
        5,
        5,
        0,
        0,
        1296,
        1298,
        3,
        274,
        137,
        0,
        1297,
        1295,
        1,
        0,
        0,
        0,
        1297,
        1296,
        1,
        0,
        0,
        0,
        1298,
        127,
        1,
        0,
        0,
        0,
        1299,
        1300,
        7,
        9,
        0,
        0,
        1300,
        129,
        1,
        0,
        0,
        0,
        1301,
        1302,
        7,
        10,
        0,
        0,
        1302,
        131,
        1,
        0,
        0,
        0,
        1303,
        1307,
        3,
        134,
        67,
        0,
        1304,
        1305,
        3,
        158,
        79,
        0,
        1305,
        1306,
        3,
        134,
        67,
        0,
        1306,
        1308,
        1,
        0,
        0,
        0,
        1307,
        1304,
        1,
        0,
        0,
        0,
        1308,
        1309,
        1,
        0,
        0,
        0,
        1309,
        1307,
        1,
        0,
        0,
        0,
        1309,
        1310,
        1,
        0,
        0,
        0,
        1310,
        133,
        1,
        0,
        0,
        0,
        1311,
        1312,
        5,
        165,
        0,
        0,
        1312,
        1313,
        5,
        313,
        0,
        0,
        1313,
        1314,
        3,
        184,
        92,
        0,
        1314,
        1315,
        5,
        250,
        0,
        0,
        1315,
        1332,
        1,
        0,
        0,
        0,
        1316,
        1318,
        5,
        165,
        0,
        0,
        1317,
        1319,
        3,
        286,
        143,
        0,
        1318,
        1317,
        1,
        0,
        0,
        0,
        1318,
        1319,
        1,
        0,
        0,
        0,
        1319,
        1321,
        1,
        0,
        0,
        0,
        1320,
        1322,
        3,
        170,
        85,
        0,
        1321,
        1320,
        1,
        0,
        0,
        0,
        1321,
        1322,
        1,
        0,
        0,
        0,
        1322,
        1324,
        1,
        0,
        0,
        0,
        1323,
        1325,
        3,
        156,
        78,
        0,
        1324,
        1323,
        1,
        0,
        0,
        0,
        1324,
        1325,
        1,
        0,
        0,
        0,
        1325,
        1328,
        1,
        0,
        0,
        0,
        1326,
        1327,
        5,
        313,
        0,
        0,
        1327,
        1329,
        3,
        184,
        92,
        0,
        1328,
        1326,
        1,
        0,
        0,
        0,
        1328,
        1329,
        1,
        0,
        0,
        0,
        1329,
        1330,
        1,
        0,
        0,
        0,
        1330,
        1332,
        5,
        250,
        0,
        0,
        1331,
        1311,
        1,
        0,
        0,
        0,
        1331,
        1316,
        1,
        0,
        0,
        0,
        1332,
        135,
        1,
        0,
        0,
        0,
        1333,
        1334,
        5,
        165,
        0,
        0,
        1334,
        1335,
        5,
        313,
        0,
        0,
        1335,
        1336,
        3,
        184,
        92,
        0,
        1336,
        1337,
        5,
        250,
        0,
        0,
        1337,
        1350,
        1,
        0,
        0,
        0,
        1338,
        1340,
        5,
        165,
        0,
        0,
        1339,
        1341,
        3,
        286,
        143,
        0,
        1340,
        1339,
        1,
        0,
        0,
        0,
        1340,
        1341,
        1,
        0,
        0,
        0,
        1341,
        1343,
        1,
        0,
        0,
        0,
        1342,
        1344,
        3,
        180,
        90,
        0,
        1343,
        1342,
        1,
        0,
        0,
        0,
        1343,
        1344,
        1,
        0,
        0,
        0,
        1344,
        1346,
        1,
        0,
        0,
        0,
        1345,
        1347,
        3,
        666,
        333,
        0,
        1346,
        1345,
        1,
        0,
        0,
        0,
        1346,
        1347,
        1,
        0,
        0,
        0,
        1347,
        1348,
        1,
        0,
        0,
        0,
        1348,
        1350,
        5,
        250,
        0,
        0,
        1349,
        1333,
        1,
        0,
        0,
        0,
        1349,
        1338,
        1,
        0,
        0,
        0,
        1350,
        137,
        1,
        0,
        0,
        0,
        1351,
        1352,
        5,
        165,
        0,
        0,
        1352,
        1355,
        3,
        112,
        56,
        0,
        1353,
        1354,
        5,
        313,
        0,
        0,
        1354,
        1356,
        3,
        184,
        92,
        0,
        1355,
        1353,
        1,
        0,
        0,
        0,
        1355,
        1356,
        1,
        0,
        0,
        0,
        1356,
        1357,
        1,
        0,
        0,
        0,
        1357,
        1359,
        5,
        250,
        0,
        0,
        1358,
        1360,
        3,
        116,
        58,
        0,
        1359,
        1358,
        1,
        0,
        0,
        0,
        1359,
        1360,
        1,
        0,
        0,
        0,
        1360,
        139,
        1,
        0,
        0,
        0,
        1361,
        1364,
        3,
        150,
        75,
        0,
        1362,
        1364,
        3,
        148,
        74,
        0,
        1363,
        1361,
        1,
        0,
        0,
        0,
        1363,
        1362,
        1,
        0,
        0,
        0,
        1364,
        1365,
        1,
        0,
        0,
        0,
        1365,
        1363,
        1,
        0,
        0,
        0,
        1365,
        1366,
        1,
        0,
        0,
        0,
        1366,
        141,
        1,
        0,
        0,
        0,
        1367,
        1370,
        5,
        147,
        0,
        0,
        1368,
        1371,
        3,
        674,
        337,
        0,
        1369,
        1371,
        3,
        144,
        72,
        0,
        1370,
        1368,
        1,
        0,
        0,
        0,
        1370,
        1369,
        1,
        0,
        0,
        0,
        1371,
        1376,
        1,
        0,
        0,
        0,
        1372,
        1375,
        3,
        150,
        75,
        0,
        1373,
        1375,
        3,
        148,
        74,
        0,
        1374,
        1372,
        1,
        0,
        0,
        0,
        1374,
        1373,
        1,
        0,
        0,
        0,
        1375,
        1378,
        1,
        0,
        0,
        0,
        1376,
        1374,
        1,
        0,
        0,
        0,
        1376,
        1377,
        1,
        0,
        0,
        0,
        1377,
        143,
        1,
        0,
        0,
        0,
        1378,
        1376,
        1,
        0,
        0,
        0,
        1379,
        1380,
        5,
        77,
        0,
        0,
        1380,
        1381,
        5,
        165,
        0,
        0,
        1381,
        1382,
        3,
        184,
        92,
        0,
        1382,
        1383,
        5,
        250,
        0,
        0,
        1383,
        145,
        1,
        0,
        0,
        0,
        1384,
        1386,
        5,
        77,
        0,
        0,
        1385,
        1387,
        7,
        11,
        0,
        0,
        1386,
        1385,
        1,
        0,
        0,
        0,
        1386,
        1387,
        1,
        0,
        0,
        0,
        1387,
        1388,
        1,
        0,
        0,
        0,
        1388,
        1389,
        5,
        165,
        0,
        0,
        1389,
        1390,
        3,
        184,
        92,
        0,
        1390,
        1391,
        5,
        250,
        0,
        0,
        1391,
        147,
        1,
        0,
        0,
        0,
        1392,
        1393,
        5,
        44,
        0,
        0,
        1393,
        1394,
        3,
        144,
        72,
        0,
        1394,
        149,
        1,
        0,
        0,
        0,
        1395,
        1396,
        5,
        44,
        0,
        0,
        1396,
        1397,
        3,
        674,
        337,
        0,
        1397,
        151,
        1,
        0,
        0,
        0,
        1398,
        1399,
        5,
        44,
        0,
        0,
        1399,
        1400,
        3,
        674,
        337,
        0,
        1400,
        153,
        1,
        0,
        0,
        0,
        1401,
        1402,
        5,
        44,
        0,
        0,
        1402,
        1403,
        3,
        674,
        337,
        0,
        1403,
        155,
        1,
        0,
        0,
        0,
        1404,
        1407,
        3,
        666,
        333,
        0,
        1405,
        1407,
        3,
        274,
        137,
        0,
        1406,
        1404,
        1,
        0,
        0,
        0,
        1406,
        1405,
        1,
        0,
        0,
        0,
        1407,
        157,
        1,
        0,
        0,
        0,
        1408,
        1410,
        3,
        162,
        81,
        0,
        1409,
        1408,
        1,
        0,
        0,
        0,
        1409,
        1410,
        1,
        0,
        0,
        0,
        1410,
        1411,
        1,
        0,
        0,
        0,
        1411,
        1435,
        3,
        164,
        82,
        0,
        1412,
        1413,
        5,
        155,
        0,
        0,
        1413,
        1414,
        5,
        313,
        0,
        0,
        1414,
        1415,
        3,
        184,
        92,
        0,
        1415,
        1416,
        5,
        224,
        0,
        0,
        1416,
        1436,
        1,
        0,
        0,
        0,
        1417,
        1419,
        5,
        155,
        0,
        0,
        1418,
        1420,
        3,
        286,
        143,
        0,
        1419,
        1418,
        1,
        0,
        0,
        0,
        1419,
        1420,
        1,
        0,
        0,
        0,
        1420,
        1422,
        1,
        0,
        0,
        0,
        1421,
        1423,
        3,
        170,
        85,
        0,
        1422,
        1421,
        1,
        0,
        0,
        0,
        1422,
        1423,
        1,
        0,
        0,
        0,
        1423,
        1425,
        1,
        0,
        0,
        0,
        1424,
        1426,
        3,
        168,
        84,
        0,
        1425,
        1424,
        1,
        0,
        0,
        0,
        1425,
        1426,
        1,
        0,
        0,
        0,
        1426,
        1428,
        1,
        0,
        0,
        0,
        1427,
        1429,
        3,
        156,
        78,
        0,
        1428,
        1427,
        1,
        0,
        0,
        0,
        1428,
        1429,
        1,
        0,
        0,
        0,
        1429,
        1432,
        1,
        0,
        0,
        0,
        1430,
        1431,
        5,
        313,
        0,
        0,
        1431,
        1433,
        3,
        184,
        92,
        0,
        1432,
        1430,
        1,
        0,
        0,
        0,
        1432,
        1433,
        1,
        0,
        0,
        0,
        1433,
        1434,
        1,
        0,
        0,
        0,
        1434,
        1436,
        5,
        224,
        0,
        0,
        1435,
        1412,
        1,
        0,
        0,
        0,
        1435,
        1417,
        1,
        0,
        0,
        0,
        1435,
        1436,
        1,
        0,
        0,
        0,
        1436,
        1437,
        1,
        0,
        0,
        0,
        1437,
        1439,
        3,
        164,
        82,
        0,
        1438,
        1440,
        3,
        166,
        83,
        0,
        1439,
        1438,
        1,
        0,
        0,
        0,
        1439,
        1440,
        1,
        0,
        0,
        0,
        1440,
        159,
        1,
        0,
        0,
        0,
        1441,
        1443,
        3,
        162,
        81,
        0,
        1442,
        1441,
        1,
        0,
        0,
        0,
        1442,
        1443,
        1,
        0,
        0,
        0,
        1443,
        1444,
        1,
        0,
        0,
        0,
        1444,
        1460,
        3,
        164,
        82,
        0,
        1445,
        1446,
        5,
        155,
        0,
        0,
        1446,
        1447,
        5,
        313,
        0,
        0,
        1447,
        1448,
        3,
        184,
        92,
        0,
        1448,
        1449,
        5,
        224,
        0,
        0,
        1449,
        1461,
        1,
        0,
        0,
        0,
        1450,
        1452,
        5,
        155,
        0,
        0,
        1451,
        1453,
        3,
        286,
        143,
        0,
        1452,
        1451,
        1,
        0,
        0,
        0,
        1452,
        1453,
        1,
        0,
        0,
        0,
        1453,
        1454,
        1,
        0,
        0,
        0,
        1454,
        1456,
        3,
        182,
        91,
        0,
        1455,
        1457,
        3,
        666,
        333,
        0,
        1456,
        1455,
        1,
        0,
        0,
        0,
        1456,
        1457,
        1,
        0,
        0,
        0,
        1457,
        1458,
        1,
        0,
        0,
        0,
        1458,
        1459,
        5,
        224,
        0,
        0,
        1459,
        1461,
        1,
        0,
        0,
        0,
        1460,
        1445,
        1,
        0,
        0,
        0,
        1460,
        1450,
        1,
        0,
        0,
        0,
        1461,
        1462,
        1,
        0,
        0,
        0,
        1462,
        1464,
        3,
        164,
        82,
        0,
        1463,
        1465,
        3,
        166,
        83,
        0,
        1464,
        1463,
        1,
        0,
        0,
        0,
        1464,
        1465,
        1,
        0,
        0,
        0,
        1465,
        161,
        1,
        0,
        0,
        0,
        1466,
        1467,
        7,
        12,
        0,
        0,
        1467,
        163,
        1,
        0,
        0,
        0,
        1468,
        1469,
        7,
        13,
        0,
        0,
        1469,
        165,
        1,
        0,
        0,
        0,
        1470,
        1471,
        7,
        14,
        0,
        0,
        1471,
        167,
        1,
        0,
        0,
        0,
        1472,
        1481,
        5,
        284,
        0,
        0,
        1473,
        1475,
        5,
        5,
        0,
        0,
        1474,
        1473,
        1,
        0,
        0,
        0,
        1474,
        1475,
        1,
        0,
        0,
        0,
        1475,
        1476,
        1,
        0,
        0,
        0,
        1476,
        1478,
        5,
        81,
        0,
        0,
        1477,
        1479,
        5,
        5,
        0,
        0,
        1478,
        1477,
        1,
        0,
        0,
        0,
        1478,
        1479,
        1,
        0,
        0,
        0,
        1479,
        1482,
        1,
        0,
        0,
        0,
        1480,
        1482,
        5,
        5,
        0,
        0,
        1481,
        1474,
        1,
        0,
        0,
        0,
        1481,
        1480,
        1,
        0,
        0,
        0,
        1481,
        1482,
        1,
        0,
        0,
        0,
        1482,
        169,
        1,
        0,
        0,
        0,
        1483,
        1484,
        7,
        15,
        0,
        0,
        1484,
        1485,
        3,
        172,
        86,
        0,
        1485,
        171,
        1,
        0,
        0,
        0,
        1486,
        1494,
        3,
        174,
        87,
        0,
        1487,
        1489,
        5,
        29,
        0,
        0,
        1488,
        1490,
        5,
        44,
        0,
        0,
        1489,
        1488,
        1,
        0,
        0,
        0,
        1489,
        1490,
        1,
        0,
        0,
        0,
        1490,
        1491,
        1,
        0,
        0,
        0,
        1491,
        1493,
        3,
        174,
        87,
        0,
        1492,
        1487,
        1,
        0,
        0,
        0,
        1493,
        1496,
        1,
        0,
        0,
        0,
        1494,
        1492,
        1,
        0,
        0,
        0,
        1494,
        1495,
        1,
        0,
        0,
        0,
        1495,
        173,
        1,
        0,
        0,
        0,
        1496,
        1494,
        1,
        0,
        0,
        0,
        1497,
        1502,
        3,
        176,
        88,
        0,
        1498,
        1499,
        7,
        16,
        0,
        0,
        1499,
        1501,
        3,
        176,
        88,
        0,
        1500,
        1498,
        1,
        0,
        0,
        0,
        1501,
        1504,
        1,
        0,
        0,
        0,
        1502,
        1500,
        1,
        0,
        0,
        0,
        1502,
        1503,
        1,
        0,
        0,
        0,
        1503,
        175,
        1,
        0,
        0,
        0,
        1504,
        1502,
        1,
        0,
        0,
        0,
        1505,
        1507,
        5,
        153,
        0,
        0,
        1506,
        1505,
        1,
        0,
        0,
        0,
        1507,
        1510,
        1,
        0,
        0,
        0,
        1508,
        1506,
        1,
        0,
        0,
        0,
        1508,
        1509,
        1,
        0,
        0,
        0,
        1509,
        1511,
        1,
        0,
        0,
        0,
        1510,
        1508,
        1,
        0,
        0,
        0,
        1511,
        1512,
        3,
        178,
        89,
        0,
        1512,
        177,
        1,
        0,
        0,
        0,
        1513,
        1514,
        5,
        165,
        0,
        0,
        1514,
        1515,
        3,
        172,
        86,
        0,
        1515,
        1516,
        5,
        250,
        0,
        0,
        1516,
        1521,
        1,
        0,
        0,
        0,
        1517,
        1521,
        5,
        172,
        0,
        0,
        1518,
        1521,
        3,
        146,
        73,
        0,
        1519,
        1521,
        3,
        674,
        337,
        0,
        1520,
        1513,
        1,
        0,
        0,
        0,
        1520,
        1517,
        1,
        0,
        0,
        0,
        1520,
        1518,
        1,
        0,
        0,
        0,
        1520,
        1519,
        1,
        0,
        0,
        0,
        1521,
        179,
        1,
        0,
        0,
        0,
        1522,
        1523,
        7,
        15,
        0,
        0,
        1523,
        1528,
        3,
        674,
        337,
        0,
        1524,
        1525,
        7,
        16,
        0,
        0,
        1525,
        1527,
        3,
        674,
        337,
        0,
        1526,
        1524,
        1,
        0,
        0,
        0,
        1527,
        1530,
        1,
        0,
        0,
        0,
        1528,
        1526,
        1,
        0,
        0,
        0,
        1528,
        1529,
        1,
        0,
        0,
        0,
        1529,
        181,
        1,
        0,
        0,
        0,
        1530,
        1528,
        1,
        0,
        0,
        0,
        1531,
        1532,
        7,
        15,
        0,
        0,
        1532,
        1533,
        3,
        674,
        337,
        0,
        1533,
        183,
        1,
        0,
        0,
        0,
        1534,
        1539,
        3,
        186,
        93,
        0,
        1535,
        1536,
        5,
        200,
        0,
        0,
        1536,
        1538,
        3,
        186,
        93,
        0,
        1537,
        1535,
        1,
        0,
        0,
        0,
        1538,
        1541,
        1,
        0,
        0,
        0,
        1539,
        1537,
        1,
        0,
        0,
        0,
        1539,
        1540,
        1,
        0,
        0,
        0,
        1540,
        185,
        1,
        0,
        0,
        0,
        1541,
        1539,
        1,
        0,
        0,
        0,
        1542,
        1547,
        3,
        188,
        94,
        0,
        1543,
        1544,
        5,
        317,
        0,
        0,
        1544,
        1546,
        3,
        188,
        94,
        0,
        1545,
        1543,
        1,
        0,
        0,
        0,
        1546,
        1549,
        1,
        0,
        0,
        0,
        1547,
        1545,
        1,
        0,
        0,
        0,
        1547,
        1548,
        1,
        0,
        0,
        0,
        1548,
        187,
        1,
        0,
        0,
        0,
        1549,
        1547,
        1,
        0,
        0,
        0,
        1550,
        1555,
        3,
        190,
        95,
        0,
        1551,
        1552,
        5,
        20,
        0,
        0,
        1552,
        1554,
        3,
        190,
        95,
        0,
        1553,
        1551,
        1,
        0,
        0,
        0,
        1554,
        1557,
        1,
        0,
        0,
        0,
        1555,
        1553,
        1,
        0,
        0,
        0,
        1555,
        1556,
        1,
        0,
        0,
        0,
        1556,
        189,
        1,
        0,
        0,
        0,
        1557,
        1555,
        1,
        0,
        0,
        0,
        1558,
        1560,
        5,
        189,
        0,
        0,
        1559,
        1558,
        1,
        0,
        0,
        0,
        1560,
        1563,
        1,
        0,
        0,
        0,
        1561,
        1559,
        1,
        0,
        0,
        0,
        1561,
        1562,
        1,
        0,
        0,
        0,
        1562,
        1564,
        1,
        0,
        0,
        0,
        1563,
        1561,
        1,
        0,
        0,
        0,
        1564,
        1565,
        3,
        192,
        96,
        0,
        1565,
        191,
        1,
        0,
        0,
        0,
        1566,
        1571,
        3,
        194,
        97,
        0,
        1567,
        1568,
        7,
        17,
        0,
        0,
        1568,
        1570,
        3,
        194,
        97,
        0,
        1569,
        1567,
        1,
        0,
        0,
        0,
        1570,
        1573,
        1,
        0,
        0,
        0,
        1571,
        1569,
        1,
        0,
        0,
        0,
        1571,
        1572,
        1,
        0,
        0,
        0,
        1572,
        193,
        1,
        0,
        0,
        0,
        1573,
        1571,
        1,
        0,
        0,
        0,
        1574,
        1576,
        3,
        200,
        100,
        0,
        1575,
        1577,
        3,
        196,
        98,
        0,
        1576,
        1575,
        1,
        0,
        0,
        0,
        1576,
        1577,
        1,
        0,
        0,
        0,
        1577,
        195,
        1,
        0,
        0,
        0,
        1578,
        1586,
        5,
        230,
        0,
        0,
        1579,
        1580,
        5,
        273,
        0,
        0,
        1580,
        1586,
        5,
        314,
        0,
        0,
        1581,
        1582,
        5,
        96,
        0,
        0,
        1582,
        1586,
        5,
        314,
        0,
        0,
        1583,
        1586,
        5,
        53,
        0,
        0,
        1584,
        1586,
        5,
        131,
        0,
        0,
        1585,
        1578,
        1,
        0,
        0,
        0,
        1585,
        1579,
        1,
        0,
        0,
        0,
        1585,
        1581,
        1,
        0,
        0,
        0,
        1585,
        1583,
        1,
        0,
        0,
        0,
        1585,
        1584,
        1,
        0,
        0,
        0,
        1586,
        1587,
        1,
        0,
        0,
        0,
        1587,
        1612,
        3,
        200,
        100,
        0,
        1588,
        1590,
        5,
        147,
        0,
        0,
        1589,
        1591,
        5,
        189,
        0,
        0,
        1590,
        1589,
        1,
        0,
        0,
        0,
        1590,
        1591,
        1,
        0,
        0,
        0,
        1591,
        1592,
        1,
        0,
        0,
        0,
        1592,
        1612,
        5,
        192,
        0,
        0,
        1593,
        1595,
        5,
        147,
        0,
        0,
        1594,
        1596,
        5,
        189,
        0,
        0,
        1595,
        1594,
        1,
        0,
        0,
        0,
        1595,
        1596,
        1,
        0,
        0,
        0,
        1596,
        1597,
        1,
        0,
        0,
        0,
        1597,
        1600,
        7,
        18,
        0,
        0,
        1598,
        1600,
        5,
        45,
        0,
        0,
        1599,
        1593,
        1,
        0,
        0,
        0,
        1599,
        1598,
        1,
        0,
        0,
        0,
        1600,
        1601,
        1,
        0,
        0,
        0,
        1601,
        1612,
        3,
        290,
        145,
        0,
        1602,
        1604,
        5,
        147,
        0,
        0,
        1603,
        1605,
        5,
        189,
        0,
        0,
        1604,
        1603,
        1,
        0,
        0,
        0,
        1604,
        1605,
        1,
        0,
        0,
        0,
        1605,
        1607,
        1,
        0,
        0,
        0,
        1606,
        1608,
        3,
        198,
        99,
        0,
        1607,
        1606,
        1,
        0,
        0,
        0,
        1607,
        1608,
        1,
        0,
        0,
        0,
        1608,
        1609,
        1,
        0,
        0,
        0,
        1609,
        1612,
        5,
        188,
        0,
        0,
        1610,
        1612,
        3,
        170,
        85,
        0,
        1611,
        1585,
        1,
        0,
        0,
        0,
        1611,
        1588,
        1,
        0,
        0,
        0,
        1611,
        1599,
        1,
        0,
        0,
        0,
        1611,
        1602,
        1,
        0,
        0,
        0,
        1611,
        1610,
        1,
        0,
        0,
        0,
        1612,
        197,
        1,
        0,
        0,
        0,
        1613,
        1614,
        7,
        19,
        0,
        0,
        1614,
        199,
        1,
        0,
        0,
        0,
        1615,
        1620,
        3,
        202,
        101,
        0,
        1616,
        1617,
        7,
        20,
        0,
        0,
        1617,
        1619,
        3,
        202,
        101,
        0,
        1618,
        1616,
        1,
        0,
        0,
        0,
        1619,
        1622,
        1,
        0,
        0,
        0,
        1620,
        1618,
        1,
        0,
        0,
        0,
        1620,
        1621,
        1,
        0,
        0,
        0,
        1621,
        201,
        1,
        0,
        0,
        0,
        1622,
        1620,
        1,
        0,
        0,
        0,
        1623,
        1628,
        3,
        204,
        102,
        0,
        1624,
        1625,
        7,
        21,
        0,
        0,
        1625,
        1627,
        3,
        204,
        102,
        0,
        1626,
        1624,
        1,
        0,
        0,
        0,
        1627,
        1630,
        1,
        0,
        0,
        0,
        1628,
        1626,
        1,
        0,
        0,
        0,
        1628,
        1629,
        1,
        0,
        0,
        0,
        1629,
        203,
        1,
        0,
        0,
        0,
        1630,
        1628,
        1,
        0,
        0,
        0,
        1631,
        1636,
        3,
        206,
        103,
        0,
        1632,
        1633,
        5,
        211,
        0,
        0,
        1633,
        1635,
        3,
        206,
        103,
        0,
        1634,
        1632,
        1,
        0,
        0,
        0,
        1635,
        1638,
        1,
        0,
        0,
        0,
        1636,
        1634,
        1,
        0,
        0,
        0,
        1636,
        1637,
        1,
        0,
        0,
        0,
        1637,
        205,
        1,
        0,
        0,
        0,
        1638,
        1636,
        1,
        0,
        0,
        0,
        1639,
        1643,
        3,
        208,
        104,
        0,
        1640,
        1641,
        7,
        22,
        0,
        0,
        1641,
        1643,
        3,
        208,
        104,
        0,
        1642,
        1639,
        1,
        0,
        0,
        0,
        1642,
        1640,
        1,
        0,
        0,
        0,
        1643,
        207,
        1,
        0,
        0,
        0,
        1644,
        1648,
        3,
        220,
        110,
        0,
        1645,
        1647,
        3,
        210,
        105,
        0,
        1646,
        1645,
        1,
        0,
        0,
        0,
        1647,
        1650,
        1,
        0,
        0,
        0,
        1648,
        1646,
        1,
        0,
        0,
        0,
        1648,
        1649,
        1,
        0,
        0,
        0,
        1649,
        209,
        1,
        0,
        0,
        0,
        1650,
        1648,
        1,
        0,
        0,
        0,
        1651,
        1666,
        3,
        212,
        106,
        0,
        1652,
        1653,
        5,
        155,
        0,
        0,
        1653,
        1654,
        3,
        184,
        92,
        0,
        1654,
        1655,
        5,
        224,
        0,
        0,
        1655,
        1666,
        1,
        0,
        0,
        0,
        1656,
        1658,
        5,
        155,
        0,
        0,
        1657,
        1659,
        3,
        184,
        92,
        0,
        1658,
        1657,
        1,
        0,
        0,
        0,
        1658,
        1659,
        1,
        0,
        0,
        0,
        1659,
        1660,
        1,
        0,
        0,
        0,
        1660,
        1662,
        5,
        81,
        0,
        0,
        1661,
        1663,
        3,
        184,
        92,
        0,
        1662,
        1661,
        1,
        0,
        0,
        0,
        1662,
        1663,
        1,
        0,
        0,
        0,
        1663,
        1664,
        1,
        0,
        0,
        0,
        1664,
        1666,
        5,
        224,
        0,
        0,
        1665,
        1651,
        1,
        0,
        0,
        0,
        1665,
        1652,
        1,
        0,
        0,
        0,
        1665,
        1656,
        1,
        0,
        0,
        0,
        1666,
        211,
        1,
        0,
        0,
        0,
        1667,
        1668,
        5,
        80,
        0,
        0,
        1668,
        1669,
        3,
        272,
        136,
        0,
        1669,
        213,
        1,
        0,
        0,
        0,
        1670,
        1671,
        5,
        155,
        0,
        0,
        1671,
        1672,
        3,
        184,
        92,
        0,
        1672,
        1673,
        5,
        224,
        0,
        0,
        1673,
        215,
        1,
        0,
        0,
        0,
        1674,
        1676,
        3,
        220,
        110,
        0,
        1675,
        1677,
        3,
        212,
        106,
        0,
        1676,
        1675,
        1,
        0,
        0,
        0,
        1677,
        1678,
        1,
        0,
        0,
        0,
        1678,
        1676,
        1,
        0,
        0,
        0,
        1678,
        1679,
        1,
        0,
        0,
        0,
        1679,
        217,
        1,
        0,
        0,
        0,
        1680,
        1681,
        3,
        220,
        110,
        0,
        1681,
        1682,
        3,
        214,
        107,
        0,
        1682,
        219,
        1,
        0,
        0,
        0,
        1683,
        1706,
        3,
        222,
        111,
        0,
        1684,
        1706,
        3,
        274,
        137,
        0,
        1685,
        1706,
        3,
        224,
        112,
        0,
        1686,
        1706,
        3,
        228,
        114,
        0,
        1687,
        1706,
        3,
        258,
        129,
        0,
        1688,
        1706,
        3,
        260,
        130,
        0,
        1689,
        1706,
        3,
        262,
        131,
        0,
        1690,
        1706,
        3,
        264,
        132,
        0,
        1691,
        1706,
        3,
        254,
        127,
        0,
        1692,
        1706,
        3,
        234,
        117,
        0,
        1693,
        1706,
        3,
        270,
        135,
        0,
        1694,
        1706,
        3,
        236,
        118,
        0,
        1695,
        1706,
        3,
        238,
        119,
        0,
        1696,
        1706,
        3,
        240,
        120,
        0,
        1697,
        1706,
        3,
        242,
        121,
        0,
        1698,
        1706,
        3,
        244,
        122,
        0,
        1699,
        1706,
        3,
        246,
        123,
        0,
        1700,
        1706,
        3,
        248,
        124,
        0,
        1701,
        1706,
        3,
        250,
        125,
        0,
        1702,
        1706,
        3,
        252,
        126,
        0,
        1703,
        1706,
        3,
        278,
        139,
        0,
        1704,
        1706,
        3,
        286,
        143,
        0,
        1705,
        1683,
        1,
        0,
        0,
        0,
        1705,
        1684,
        1,
        0,
        0,
        0,
        1705,
        1685,
        1,
        0,
        0,
        0,
        1705,
        1686,
        1,
        0,
        0,
        0,
        1705,
        1687,
        1,
        0,
        0,
        0,
        1705,
        1688,
        1,
        0,
        0,
        0,
        1705,
        1689,
        1,
        0,
        0,
        0,
        1705,
        1690,
        1,
        0,
        0,
        0,
        1705,
        1691,
        1,
        0,
        0,
        0,
        1705,
        1692,
        1,
        0,
        0,
        0,
        1705,
        1693,
        1,
        0,
        0,
        0,
        1705,
        1694,
        1,
        0,
        0,
        0,
        1705,
        1695,
        1,
        0,
        0,
        0,
        1705,
        1696,
        1,
        0,
        0,
        0,
        1705,
        1697,
        1,
        0,
        0,
        0,
        1705,
        1698,
        1,
        0,
        0,
        0,
        1705,
        1699,
        1,
        0,
        0,
        0,
        1705,
        1700,
        1,
        0,
        0,
        0,
        1705,
        1701,
        1,
        0,
        0,
        0,
        1705,
        1702,
        1,
        0,
        0,
        0,
        1705,
        1703,
        1,
        0,
        0,
        0,
        1705,
        1704,
        1,
        0,
        0,
        0,
        1706,
        221,
        1,
        0,
        0,
        0,
        1707,
        1717,
        3,
        266,
        133,
        0,
        1708,
        1717,
        3,
        656,
        328,
        0,
        1709,
        1717,
        3,
        666,
        333,
        0,
        1710,
        1717,
        5,
        294,
        0,
        0,
        1711,
        1717,
        5,
        105,
        0,
        0,
        1712,
        1717,
        5,
        134,
        0,
        0,
        1713,
        1717,
        5,
        135,
        0,
        0,
        1714,
        1717,
        5,
        177,
        0,
        0,
        1715,
        1717,
        5,
        192,
        0,
        0,
        1716,
        1707,
        1,
        0,
        0,
        0,
        1716,
        1708,
        1,
        0,
        0,
        0,
        1716,
        1709,
        1,
        0,
        0,
        0,
        1716,
        1710,
        1,
        0,
        0,
        0,
        1716,
        1711,
        1,
        0,
        0,
        0,
        1716,
        1712,
        1,
        0,
        0,
        0,
        1716,
        1713,
        1,
        0,
        0,
        0,
        1716,
        1714,
        1,
        0,
        0,
        0,
        1716,
        1715,
        1,
        0,
        0,
        0,
        1717,
        223,
        1,
        0,
        0,
        0,
        1718,
        1720,
        5,
        40,
        0,
        0,
        1719,
        1721,
        3,
        226,
        113,
        0,
        1720,
        1719,
        1,
        0,
        0,
        0,
        1721,
        1722,
        1,
        0,
        0,
        0,
        1722,
        1720,
        1,
        0,
        0,
        0,
        1722,
        1723,
        1,
        0,
        0,
        0,
        1723,
        1726,
        1,
        0,
        0,
        0,
        1724,
        1725,
        5,
        93,
        0,
        0,
        1725,
        1727,
        3,
        184,
        92,
        0,
        1726,
        1724,
        1,
        0,
        0,
        0,
        1726,
        1727,
        1,
        0,
        0,
        0,
        1727,
        1728,
        1,
        0,
        0,
        0,
        1728,
        1729,
        5,
        95,
        0,
        0,
        1729,
        225,
        1,
        0,
        0,
        0,
        1730,
        1731,
        5,
        312,
        0,
        0,
        1731,
        1732,
        3,
        184,
        92,
        0,
        1732,
        1733,
        5,
        282,
        0,
        0,
        1733,
        1734,
        3,
        184,
        92,
        0,
        1734,
        227,
        1,
        0,
        0,
        0,
        1735,
        1736,
        5,
        40,
        0,
        0,
        1736,
        1738,
        3,
        184,
        92,
        0,
        1737,
        1739,
        3,
        230,
        115,
        0,
        1738,
        1737,
        1,
        0,
        0,
        0,
        1739,
        1740,
        1,
        0,
        0,
        0,
        1740,
        1738,
        1,
        0,
        0,
        0,
        1740,
        1741,
        1,
        0,
        0,
        0,
        1741,
        1744,
        1,
        0,
        0,
        0,
        1742,
        1743,
        5,
        93,
        0,
        0,
        1743,
        1745,
        3,
        184,
        92,
        0,
        1744,
        1742,
        1,
        0,
        0,
        0,
        1744,
        1745,
        1,
        0,
        0,
        0,
        1745,
        1746,
        1,
        0,
        0,
        0,
        1746,
        1747,
        5,
        95,
        0,
        0,
        1747,
        229,
        1,
        0,
        0,
        0,
        1748,
        1749,
        5,
        312,
        0,
        0,
        1749,
        1754,
        3,
        232,
        116,
        0,
        1750,
        1751,
        5,
        46,
        0,
        0,
        1751,
        1753,
        3,
        232,
        116,
        0,
        1752,
        1750,
        1,
        0,
        0,
        0,
        1753,
        1756,
        1,
        0,
        0,
        0,
        1754,
        1752,
        1,
        0,
        0,
        0,
        1754,
        1755,
        1,
        0,
        0,
        0,
        1755,
        1757,
        1,
        0,
        0,
        0,
        1756,
        1754,
        1,
        0,
        0,
        0,
        1757,
        1758,
        5,
        282,
        0,
        0,
        1758,
        1759,
        3,
        184,
        92,
        0,
        1759,
        231,
        1,
        0,
        0,
        0,
        1760,
        1761,
        7,
        17,
        0,
        0,
        1761,
        1765,
        3,
        194,
        97,
        0,
        1762,
        1765,
        3,
        196,
        98,
        0,
        1763,
        1765,
        3,
        184,
        92,
        0,
        1764,
        1760,
        1,
        0,
        0,
        0,
        1764,
        1762,
        1,
        0,
        0,
        0,
        1764,
        1763,
        1,
        0,
        0,
        0,
        1765,
        233,
        1,
        0,
        0,
        0,
        1766,
        1767,
        5,
        155,
        0,
        0,
        1767,
        1768,
        3,
        286,
        143,
        0,
        1768,
        1769,
        5,
        131,
        0,
        0,
        1769,
        1780,
        3,
        184,
        92,
        0,
        1770,
        1771,
        5,
        313,
        0,
        0,
        1771,
        1773,
        3,
        184,
        92,
        0,
        1772,
        1770,
        1,
        0,
        0,
        0,
        1772,
        1773,
        1,
        0,
        0,
        0,
        1773,
        1774,
        1,
        0,
        0,
        0,
        1774,
        1775,
        5,
        29,
        0,
        0,
        1775,
        1781,
        3,
        184,
        92,
        0,
        1776,
        1777,
        5,
        313,
        0,
        0,
        1777,
        1779,
        3,
        184,
        92,
        0,
        1778,
        1776,
        1,
        0,
        0,
        0,
        1778,
        1779,
        1,
        0,
        0,
        0,
        1779,
        1781,
        1,
        0,
        0,
        0,
        1780,
        1772,
        1,
        0,
        0,
        0,
        1780,
        1778,
        1,
        0,
        0,
        0,
        1781,
        1782,
        1,
        0,
        0,
        0,
        1782,
        1783,
        5,
        224,
        0,
        0,
        1783,
        235,
        1,
        0,
        0,
        0,
        1784,
        1788,
        5,
        155,
        0,
        0,
        1785,
        1786,
        3,
        286,
        143,
        0,
        1786,
        1787,
        5,
        97,
        0,
        0,
        1787,
        1789,
        1,
        0,
        0,
        0,
        1788,
        1785,
        1,
        0,
        0,
        0,
        1788,
        1789,
        1,
        0,
        0,
        0,
        1789,
        1790,
        1,
        0,
        0,
        0,
        1790,
        1793,
        3,
        132,
        66,
        0,
        1791,
        1792,
        5,
        313,
        0,
        0,
        1792,
        1794,
        3,
        184,
        92,
        0,
        1793,
        1791,
        1,
        0,
        0,
        0,
        1793,
        1794,
        1,
        0,
        0,
        0,
        1794,
        1795,
        1,
        0,
        0,
        0,
        1795,
        1796,
        5,
        29,
        0,
        0,
        1796,
        1797,
        3,
        184,
        92,
        0,
        1797,
        1798,
        5,
        224,
        0,
        0,
        1798,
        237,
        1,
        0,
        0,
        0,
        1799,
        1800,
        5,
        228,
        0,
        0,
        1800,
        1801,
        5,
        165,
        0,
        0,
        1801,
        1802,
        3,
        286,
        143,
        0,
        1802,
        1803,
        5,
        97,
        0,
        0,
        1803,
        1804,
        3,
        184,
        92,
        0,
        1804,
        1805,
        5,
        46,
        0,
        0,
        1805,
        1806,
        3,
        286,
        143,
        0,
        1806,
        1807,
        5,
        131,
        0,
        0,
        1807,
        1808,
        3,
        184,
        92,
        0,
        1808,
        1809,
        5,
        29,
        0,
        0,
        1809,
        1810,
        3,
        184,
        92,
        0,
        1810,
        1811,
        5,
        250,
        0,
        0,
        1811,
        239,
        1,
        0,
        0,
        0,
        1812,
        1813,
        7,
        23,
        0,
        0,
        1813,
        1814,
        5,
        165,
        0,
        0,
        1814,
        1815,
        3,
        286,
        143,
        0,
        1815,
        1816,
        5,
        131,
        0,
        0,
        1816,
        1819,
        3,
        184,
        92,
        0,
        1817,
        1818,
        5,
        313,
        0,
        0,
        1818,
        1820,
        3,
        184,
        92,
        0,
        1819,
        1817,
        1,
        0,
        0,
        0,
        1819,
        1820,
        1,
        0,
        0,
        0,
        1820,
        1821,
        1,
        0,
        0,
        0,
        1821,
        1822,
        5,
        250,
        0,
        0,
        1822,
        241,
        1,
        0,
        0,
        0,
        1823,
        1824,
        5,
        187,
        0,
        0,
        1824,
        1825,
        5,
        165,
        0,
        0,
        1825,
        1828,
        3,
        184,
        92,
        0,
        1826,
        1827,
        5,
        46,
        0,
        0,
        1827,
        1829,
        3,
        198,
        99,
        0,
        1828,
        1826,
        1,
        0,
        0,
        0,
        1828,
        1829,
        1,
        0,
        0,
        0,
        1829,
        1830,
        1,
        0,
        0,
        0,
        1830,
        1831,
        5,
        250,
        0,
        0,
        1831,
        243,
        1,
        0,
        0,
        0,
        1832,
        1833,
        5,
        309,
        0,
        0,
        1833,
        1834,
        5,
        165,
        0,
        0,
        1834,
        1835,
        3,
        184,
        92,
        0,
        1835,
        1836,
        5,
        46,
        0,
        0,
        1836,
        1837,
        3,
        184,
        92,
        0,
        1837,
        1838,
        5,
        46,
        0,
        0,
        1838,
        1839,
        3,
        300,
        150,
        0,
        1839,
        1840,
        5,
        250,
        0,
        0,
        1840,
        245,
        1,
        0,
        0,
        0,
        1841,
        1842,
        5,
        293,
        0,
        0,
        1842,
        1850,
        5,
        165,
        0,
        0,
        1843,
        1845,
        7,
        24,
        0,
        0,
        1844,
        1843,
        1,
        0,
        0,
        0,
        1844,
        1845,
        1,
        0,
        0,
        0,
        1845,
        1847,
        1,
        0,
        0,
        0,
        1846,
        1848,
        3,
        184,
        92,
        0,
        1847,
        1846,
        1,
        0,
        0,
        0,
        1847,
        1848,
        1,
        0,
        0,
        0,
        1848,
        1849,
        1,
        0,
        0,
        0,
        1849,
        1851,
        5,
        114,
        0,
        0,
        1850,
        1844,
        1,
        0,
        0,
        0,
        1850,
        1851,
        1,
        0,
        0,
        0,
        1851,
        1852,
        1,
        0,
        0,
        0,
        1852,
        1853,
        3,
        184,
        92,
        0,
        1853,
        1854,
        5,
        250,
        0,
        0,
        1854,
        247,
        1,
        0,
        0,
        0,
        1855,
        1856,
        3,
        132,
        66,
        0,
        1856,
        249,
        1,
        0,
        0,
        0,
        1857,
        1858,
        3,
        120,
        60,
        0,
        1858,
        251,
        1,
        0,
        0,
        0,
        1859,
        1860,
        5,
        165,
        0,
        0,
        1860,
        1861,
        3,
        184,
        92,
        0,
        1861,
        1862,
        5,
        250,
        0,
        0,
        1862,
        253,
        1,
        0,
        0,
        0,
        1863,
        1864,
        3,
        286,
        143,
        0,
        1864,
        1873,
        5,
        156,
        0,
        0,
        1865,
        1870,
        3,
        256,
        128,
        0,
        1866,
        1867,
        5,
        46,
        0,
        0,
        1867,
        1869,
        3,
        256,
        128,
        0,
        1868,
        1866,
        1,
        0,
        0,
        0,
        1869,
        1872,
        1,
        0,
        0,
        0,
        1870,
        1868,
        1,
        0,
        0,
        0,
        1870,
        1871,
        1,
        0,
        0,
        0,
        1871,
        1874,
        1,
        0,
        0,
        0,
        1872,
        1870,
        1,
        0,
        0,
        0,
        1873,
        1865,
        1,
        0,
        0,
        0,
        1873,
        1874,
        1,
        0,
        0,
        0,
        1874,
        1875,
        1,
        0,
        0,
        0,
        1875,
        1876,
        5,
        225,
        0,
        0,
        1876,
        255,
        1,
        0,
        0,
        0,
        1877,
        1878,
        3,
        272,
        136,
        0,
        1878,
        1879,
        5,
        44,
        0,
        0,
        1879,
        1880,
        3,
        184,
        92,
        0,
        1880,
        1886,
        1,
        0,
        0,
        0,
        1881,
        1886,
        3,
        212,
        106,
        0,
        1882,
        1886,
        3,
        286,
        143,
        0,
        1883,
        1884,
        5,
        80,
        0,
        0,
        1884,
        1886,
        5,
        284,
        0,
        0,
        1885,
        1877,
        1,
        0,
        0,
        0,
        1885,
        1881,
        1,
        0,
        0,
        0,
        1885,
        1882,
        1,
        0,
        0,
        0,
        1885,
        1883,
        1,
        0,
        0,
        0,
        1886,
        257,
        1,
        0,
        0,
        0,
        1887,
        1888,
        5,
        56,
        0,
        0,
        1888,
        1889,
        5,
        165,
        0,
        0,
        1889,
        1890,
        5,
        284,
        0,
        0,
        1890,
        1891,
        5,
        250,
        0,
        0,
        1891,
        259,
        1,
        0,
        0,
        0,
        1892,
        1893,
        5,
        102,
        0,
        0,
        1893,
        1902,
        5,
        156,
        0,
        0,
        1894,
        1903,
        3,
        4,
        2,
        0,
        1895,
        1897,
        3,
        64,
        32,
        0,
        1896,
        1895,
        1,
        0,
        0,
        0,
        1896,
        1897,
        1,
        0,
        0,
        0,
        1897,
        1898,
        1,
        0,
        0,
        0,
        1898,
        1900,
        3,
        108,
        54,
        0,
        1899,
        1901,
        3,
        44,
        22,
        0,
        1900,
        1899,
        1,
        0,
        0,
        0,
        1900,
        1901,
        1,
        0,
        0,
        0,
        1901,
        1903,
        1,
        0,
        0,
        0,
        1902,
        1894,
        1,
        0,
        0,
        0,
        1902,
        1896,
        1,
        0,
        0,
        0,
        1903,
        1904,
        1,
        0,
        0,
        0,
        1904,
        1905,
        5,
        225,
        0,
        0,
        1905,
        261,
        1,
        0,
        0,
        0,
        1906,
        1907,
        5,
        56,
        0,
        0,
        1907,
        1916,
        5,
        156,
        0,
        0,
        1908,
        1917,
        3,
        4,
        2,
        0,
        1909,
        1911,
        3,
        64,
        32,
        0,
        1910,
        1909,
        1,
        0,
        0,
        0,
        1910,
        1911,
        1,
        0,
        0,
        0,
        1911,
        1912,
        1,
        0,
        0,
        0,
        1912,
        1914,
        3,
        108,
        54,
        0,
        1913,
        1915,
        3,
        44,
        22,
        0,
        1914,
        1913,
        1,
        0,
        0,
        0,
        1914,
        1915,
        1,
        0,
        0,
        0,
        1915,
        1917,
        1,
        0,
        0,
        0,
        1916,
        1908,
        1,
        0,
        0,
        0,
        1916,
        1910,
        1,
        0,
        0,
        0,
        1917,
        1918,
        1,
        0,
        0,
        0,
        1918,
        1919,
        5,
        225,
        0,
        0,
        1919,
        263,
        1,
        0,
        0,
        0,
        1920,
        1921,
        5,
        43,
        0,
        0,
        1921,
        1922,
        5,
        156,
        0,
        0,
        1922,
        1923,
        3,
        4,
        2,
        0,
        1923,
        1924,
        5,
        225,
        0,
        0,
        1924,
        265,
        1,
        0,
        0,
        0,
        1925,
        1927,
        5,
        171,
        0,
        0,
        1926,
        1925,
        1,
        0,
        0,
        0,
        1926,
        1927,
        1,
        0,
        0,
        0,
        1927,
        1928,
        1,
        0,
        0,
        0,
        1928,
        1929,
        7,
        25,
        0,
        0,
        1929,
        267,
        1,
        0,
        0,
        0,
        1930,
        1932,
        5,
        171,
        0,
        0,
        1931,
        1930,
        1,
        0,
        0,
        0,
        1931,
        1932,
        1,
        0,
        0,
        0,
        1932,
        1933,
        1,
        0,
        0,
        0,
        1933,
        1934,
        5,
        5,
        0,
        0,
        1934,
        269,
        1,
        0,
        0,
        0,
        1935,
        1944,
        5,
        155,
        0,
        0,
        1936,
        1941,
        3,
        184,
        92,
        0,
        1937,
        1938,
        5,
        46,
        0,
        0,
        1938,
        1940,
        3,
        184,
        92,
        0,
        1939,
        1937,
        1,
        0,
        0,
        0,
        1940,
        1943,
        1,
        0,
        0,
        0,
        1941,
        1939,
        1,
        0,
        0,
        0,
        1941,
        1942,
        1,
        0,
        0,
        0,
        1942,
        1945,
        1,
        0,
        0,
        0,
        1943,
        1941,
        1,
        0,
        0,
        0,
        1944,
        1936,
        1,
        0,
        0,
        0,
        1944,
        1945,
        1,
        0,
        0,
        0,
        1945,
        1946,
        1,
        0,
        0,
        0,
        1946,
        1947,
        5,
        224,
        0,
        0,
        1947,
        271,
        1,
        0,
        0,
        0,
        1948,
        1949,
        3,
        674,
        337,
        0,
        1949,
        273,
        1,
        0,
        0,
        0,
        1950,
        1951,
        5,
        77,
        0,
        0,
        1951,
        1952,
        3,
        276,
        138,
        0,
        1952,
        275,
        1,
        0,
        0,
        0,
        1953,
        1958,
        3,
        674,
        337,
        0,
        1954,
        1958,
        5,
        5,
        0,
        0,
        1955,
        1958,
        5,
        7,
        0,
        0,
        1956,
        1958,
        5,
        322,
        0,
        0,
        1957,
        1953,
        1,
        0,
        0,
        0,
        1957,
        1954,
        1,
        0,
        0,
        0,
        1957,
        1955,
        1,
        0,
        0,
        0,
        1957,
        1956,
        1,
        0,
        0,
        0,
        1958,
        277,
        1,
        0,
        0,
        0,
        1959,
        1960,
        3,
        282,
        141,
        0,
        1960,
        1962,
        5,
        165,
        0,
        0,
        1961,
        1963,
        7,
        0,
        0,
        0,
        1962,
        1961,
        1,
        0,
        0,
        0,
        1962,
        1963,
        1,
        0,
        0,
        0,
        1963,
        1972,
        1,
        0,
        0,
        0,
        1964,
        1969,
        3,
        280,
        140,
        0,
        1965,
        1966,
        5,
        46,
        0,
        0,
        1966,
        1968,
        3,
        280,
        140,
        0,
        1967,
        1965,
        1,
        0,
        0,
        0,
        1968,
        1971,
        1,
        0,
        0,
        0,
        1969,
        1967,
        1,
        0,
        0,
        0,
        1969,
        1970,
        1,
        0,
        0,
        0,
        1970,
        1973,
        1,
        0,
        0,
        0,
        1971,
        1969,
        1,
        0,
        0,
        0,
        1972,
        1964,
        1,
        0,
        0,
        0,
        1972,
        1973,
        1,
        0,
        0,
        0,
        1973,
        1974,
        1,
        0,
        0,
        0,
        1974,
        1975,
        5,
        250,
        0,
        0,
        1975,
        279,
        1,
        0,
        0,
        0,
        1976,
        1977,
        3,
        184,
        92,
        0,
        1977,
        281,
        1,
        0,
        0,
        0,
        1978,
        1979,
        3,
        284,
        142,
        0,
        1979,
        1980,
        3,
        674,
        337,
        0,
        1980,
        283,
        1,
        0,
        0,
        0,
        1981,
        1982,
        3,
        674,
        337,
        0,
        1982,
        1983,
        5,
        80,
        0,
        0,
        1983,
        1985,
        1,
        0,
        0,
        0,
        1984,
        1981,
        1,
        0,
        0,
        0,
        1985,
        1988,
        1,
        0,
        0,
        0,
        1986,
        1984,
        1,
        0,
        0,
        0,
        1986,
        1987,
        1,
        0,
        0,
        0,
        1987,
        285,
        1,
        0,
        0,
        0,
        1988,
        1986,
        1,
        0,
        0,
        0,
        1989,
        1990,
        3,
        668,
        334,
        0,
        1990,
        287,
        1,
        0,
        0,
        0,
        1991,
        1996,
        3,
        674,
        337,
        0,
        1992,
        1993,
        5,
        46,
        0,
        0,
        1993,
        1995,
        3,
        674,
        337,
        0,
        1994,
        1992,
        1,
        0,
        0,
        0,
        1995,
        1998,
        1,
        0,
        0,
        0,
        1996,
        1994,
        1,
        0,
        0,
        0,
        1996,
        1997,
        1,
        0,
        0,
        0,
        1997,
        289,
        1,
        0,
        0,
        0,
        1998,
        1996,
        1,
        0,
        0,
        0,
        1999,
        2004,
        3,
        292,
        146,
        0,
        2000,
        2001,
        5,
        29,
        0,
        0,
        2001,
        2003,
        3,
        292,
        146,
        0,
        2002,
        2000,
        1,
        0,
        0,
        0,
        2003,
        2006,
        1,
        0,
        0,
        0,
        2004,
        2002,
        1,
        0,
        0,
        0,
        2004,
        2005,
        1,
        0,
        0,
        0,
        2005,
        291,
        1,
        0,
        0,
        0,
        2006,
        2004,
        1,
        0,
        0,
        0,
        2007,
        2009,
        3,
        294,
        147,
        0,
        2008,
        2010,
        3,
        296,
        148,
        0,
        2009,
        2008,
        1,
        0,
        0,
        0,
        2009,
        2010,
        1,
        0,
        0,
        0,
        2010,
        2014,
        1,
        0,
        0,
        0,
        2011,
        2013,
        3,
        298,
        149,
        0,
        2012,
        2011,
        1,
        0,
        0,
        0,
        2013,
        2016,
        1,
        0,
        0,
        0,
        2014,
        2012,
        1,
        0,
        0,
        0,
        2014,
        2015,
        1,
        0,
        0,
        0,
        2015,
        293,
        1,
        0,
        0,
        0,
        2016,
        2014,
        1,
        0,
        0,
        0,
        2017,
        2102,
        5,
        190,
        0,
        0,
        2018,
        2102,
        5,
        192,
        0,
        0,
        2019,
        2102,
        5,
        31,
        0,
        0,
        2020,
        2102,
        5,
        32,
        0,
        0,
        2021,
        2102,
        5,
        308,
        0,
        0,
        2022,
        2102,
        5,
        276,
        0,
        0,
        2023,
        2102,
        5,
        137,
        0,
        0,
        2024,
        2026,
        5,
        269,
        0,
        0,
        2025,
        2024,
        1,
        0,
        0,
        0,
        2025,
        2026,
        1,
        0,
        0,
        0,
        2026,
        2027,
        1,
        0,
        0,
        0,
        2027,
        2102,
        5,
        142,
        0,
        0,
        2028,
        2102,
        5,
        109,
        0,
        0,
        2029,
        2102,
        5,
        64,
        0,
        0,
        2030,
        2031,
        5,
        163,
        0,
        0,
        2031,
        2102,
        7,
        26,
        0,
        0,
        2032,
        2033,
        5,
        320,
        0,
        0,
        2033,
        2102,
        7,
        26,
        0,
        0,
        2034,
        2035,
        5,
        283,
        0,
        0,
        2035,
        2039,
        7,
        27,
        0,
        0,
        2036,
        2040,
        5,
        286,
        0,
        0,
        2037,
        2038,
        5,
        283,
        0,
        0,
        2038,
        2040,
        5,
        319,
        0,
        0,
        2039,
        2036,
        1,
        0,
        0,
        0,
        2039,
        2037,
        1,
        0,
        0,
        0,
        2040,
        2102,
        1,
        0,
        0,
        0,
        2041,
        2042,
        5,
        285,
        0,
        0,
        2042,
        2046,
        7,
        27,
        0,
        0,
        2043,
        2047,
        5,
        286,
        0,
        0,
        2044,
        2045,
        5,
        283,
        0,
        0,
        2045,
        2047,
        5,
        319,
        0,
        0,
        2046,
        2043,
        1,
        0,
        0,
        0,
        2046,
        2044,
        1,
        0,
        0,
        0,
        2047,
        2102,
        1,
        0,
        0,
        0,
        2048,
        2102,
        5,
        87,
        0,
        0,
        2049,
        2102,
        5,
        209,
        0,
        0,
        2050,
        2102,
        5,
        183,
        0,
        0,
        2051,
        2052,
        5,
        309,
        0,
        0,
        2052,
        2053,
        5,
        165,
        0,
        0,
        2053,
        2054,
        5,
        5,
        0,
        0,
        2054,
        2055,
        5,
        46,
        0,
        0,
        2055,
        2056,
        3,
        300,
        150,
        0,
        2056,
        2057,
        5,
        250,
        0,
        0,
        2057,
        2102,
        1,
        0,
        0,
        0,
        2058,
        2063,
        5,
        309,
        0,
        0,
        2059,
        2060,
        5,
        166,
        0,
        0,
        2060,
        2061,
        3,
        300,
        150,
        0,
        2061,
        2062,
        5,
        124,
        0,
        0,
        2062,
        2064,
        1,
        0,
        0,
        0,
        2063,
        2059,
        1,
        0,
        0,
        0,
        2063,
        2064,
        1,
        0,
        0,
        0,
        2064,
        2068,
        1,
        0,
        0,
        0,
        2065,
        2066,
        5,
        165,
        0,
        0,
        2066,
        2067,
        5,
        5,
        0,
        0,
        2067,
        2069,
        5,
        250,
        0,
        0,
        2068,
        2065,
        1,
        0,
        0,
        0,
        2068,
        2069,
        1,
        0,
        0,
        0,
        2069,
        2102,
        1,
        0,
        0,
        0,
        2070,
        2102,
        5,
        310,
        0,
        0,
        2071,
        2102,
        5,
        232,
        0,
        0,
        2072,
        2102,
        5,
        89,
        0,
        0,
        2073,
        2102,
        5,
        168,
        0,
        0,
        2074,
        2075,
        7,
        28,
        0,
        0,
        2075,
        2076,
        5,
        166,
        0,
        0,
        2076,
        2077,
        3,
        290,
        145,
        0,
        2077,
        2078,
        5,
        124,
        0,
        0,
        2078,
        2102,
        1,
        0,
        0,
        0,
        2079,
        2102,
        5,
        204,
        0,
        0,
        2080,
        2102,
        5,
        205,
        0,
        0,
        2081,
        2082,
        5,
        219,
        0,
        0,
        2082,
        2102,
        5,
        307,
        0,
        0,
        2083,
        2099,
        5,
        21,
        0,
        0,
        2084,
        2100,
        5,
        183,
        0,
        0,
        2085,
        2100,
        5,
        310,
        0,
        0,
        2086,
        2100,
        5,
        232,
        0,
        0,
        2087,
        2100,
        5,
        89,
        0,
        0,
        2088,
        2100,
        5,
        168,
        0,
        0,
        2089,
        2090,
        5,
        219,
        0,
        0,
        2090,
        2100,
        5,
        307,
        0,
        0,
        2091,
        2093,
        5,
        307,
        0,
        0,
        2092,
        2091,
        1,
        0,
        0,
        0,
        2092,
        2093,
        1,
        0,
        0,
        0,
        2093,
        2094,
        1,
        0,
        0,
        0,
        2094,
        2095,
        5,
        166,
        0,
        0,
        2095,
        2096,
        3,
        290,
        145,
        0,
        2096,
        2097,
        5,
        124,
        0,
        0,
        2097,
        2100,
        1,
        0,
        0,
        0,
        2098,
        2100,
        5,
        307,
        0,
        0,
        2099,
        2084,
        1,
        0,
        0,
        0,
        2099,
        2085,
        1,
        0,
        0,
        0,
        2099,
        2086,
        1,
        0,
        0,
        0,
        2099,
        2087,
        1,
        0,
        0,
        0,
        2099,
        2088,
        1,
        0,
        0,
        0,
        2099,
        2089,
        1,
        0,
        0,
        0,
        2099,
        2092,
        1,
        0,
        0,
        0,
        2099,
        2098,
        1,
        0,
        0,
        0,
        2099,
        2100,
        1,
        0,
        0,
        0,
        2100,
        2102,
        1,
        0,
        0,
        0,
        2101,
        2017,
        1,
        0,
        0,
        0,
        2101,
        2018,
        1,
        0,
        0,
        0,
        2101,
        2019,
        1,
        0,
        0,
        0,
        2101,
        2020,
        1,
        0,
        0,
        0,
        2101,
        2021,
        1,
        0,
        0,
        0,
        2101,
        2022,
        1,
        0,
        0,
        0,
        2101,
        2023,
        1,
        0,
        0,
        0,
        2101,
        2025,
        1,
        0,
        0,
        0,
        2101,
        2028,
        1,
        0,
        0,
        0,
        2101,
        2029,
        1,
        0,
        0,
        0,
        2101,
        2030,
        1,
        0,
        0,
        0,
        2101,
        2032,
        1,
        0,
        0,
        0,
        2101,
        2034,
        1,
        0,
        0,
        0,
        2101,
        2041,
        1,
        0,
        0,
        0,
        2101,
        2048,
        1,
        0,
        0,
        0,
        2101,
        2049,
        1,
        0,
        0,
        0,
        2101,
        2050,
        1,
        0,
        0,
        0,
        2101,
        2051,
        1,
        0,
        0,
        0,
        2101,
        2058,
        1,
        0,
        0,
        0,
        2101,
        2070,
        1,
        0,
        0,
        0,
        2101,
        2071,
        1,
        0,
        0,
        0,
        2101,
        2072,
        1,
        0,
        0,
        0,
        2101,
        2073,
        1,
        0,
        0,
        0,
        2101,
        2074,
        1,
        0,
        0,
        0,
        2101,
        2079,
        1,
        0,
        0,
        0,
        2101,
        2080,
        1,
        0,
        0,
        0,
        2101,
        2081,
        1,
        0,
        0,
        0,
        2101,
        2083,
        1,
        0,
        0,
        0,
        2102,
        295,
        1,
        0,
        0,
        0,
        2103,
        2104,
        5,
        189,
        0,
        0,
        2104,
        2107,
        5,
        192,
        0,
        0,
        2105,
        2107,
        5,
        153,
        0,
        0,
        2106,
        2103,
        1,
        0,
        0,
        0,
        2106,
        2105,
        1,
        0,
        0,
        0,
        2107,
        297,
        1,
        0,
        0,
        0,
        2108,
        2110,
        7,
        28,
        0,
        0,
        2109,
        2111,
        3,
        296,
        148,
        0,
        2110,
        2109,
        1,
        0,
        0,
        0,
        2110,
        2111,
        1,
        0,
        0,
        0,
        2111,
        299,
        1,
        0,
        0,
        0,
        2112,
        2129,
        5,
        137,
        0,
        0,
        2113,
        2115,
        5,
        269,
        0,
        0,
        2114,
        2113,
        1,
        0,
        0,
        0,
        2114,
        2115,
        1,
        0,
        0,
        0,
        2115,
        2116,
        1,
        0,
        0,
        0,
        2116,
        2129,
        5,
        142,
        0,
        0,
        2117,
        2129,
        5,
        143,
        0,
        0,
        2118,
        2129,
        5,
        144,
        0,
        0,
        2119,
        2129,
        5,
        145,
        0,
        0,
        2120,
        2129,
        5,
        146,
        0,
        0,
        2121,
        2129,
        5,
        138,
        0,
        0,
        2122,
        2129,
        5,
        139,
        0,
        0,
        2123,
        2129,
        5,
        140,
        0,
        0,
        2124,
        2129,
        5,
        141,
        0,
        0,
        2125,
        2129,
        5,
        109,
        0,
        0,
        2126,
        2129,
        5,
        110,
        0,
        0,
        2127,
        2129,
        5,
        111,
        0,
        0,
        2128,
        2112,
        1,
        0,
        0,
        0,
        2128,
        2114,
        1,
        0,
        0,
        0,
        2128,
        2117,
        1,
        0,
        0,
        0,
        2128,
        2118,
        1,
        0,
        0,
        0,
        2128,
        2119,
        1,
        0,
        0,
        0,
        2128,
        2120,
        1,
        0,
        0,
        0,
        2128,
        2121,
        1,
        0,
        0,
        0,
        2128,
        2122,
        1,
        0,
        0,
        0,
        2128,
        2123,
        1,
        0,
        0,
        0,
        2128,
        2124,
        1,
        0,
        0,
        0,
        2128,
        2125,
        1,
        0,
        0,
        0,
        2128,
        2126,
        1,
        0,
        0,
        0,
        2128,
        2127,
        1,
        0,
        0,
        0,
        2129,
        2131,
        1,
        0,
        0,
        0,
        2130,
        2132,
        3,
        296,
        148,
        0,
        2131,
        2130,
        1,
        0,
        0,
        0,
        2131,
        2132,
        1,
        0,
        0,
        0,
        2132,
        301,
        1,
        0,
        0,
        0,
        2133,
        2135,
        3,
        18,
        9,
        0,
        2134,
        2133,
        1,
        0,
        0,
        0,
        2134,
        2135,
        1,
        0,
        0,
        0,
        2135,
        2149,
        1,
        0,
        0,
        0,
        2136,
        2150,
        3,
        304,
        152,
        0,
        2137,
        2150,
        3,
        306,
        153,
        0,
        2138,
        2150,
        3,
        396,
        198,
        0,
        2139,
        2150,
        3,
        398,
        199,
        0,
        2140,
        2150,
        3,
        402,
        201,
        0,
        2141,
        2150,
        3,
        404,
        202,
        0,
        2142,
        2150,
        3,
        400,
        200,
        0,
        2143,
        2150,
        3,
        606,
        303,
        0,
        2144,
        2150,
        3,
        608,
        304,
        0,
        2145,
        2150,
        3,
        412,
        206,
        0,
        2146,
        2150,
        3,
        422,
        211,
        0,
        2147,
        2150,
        3,
        308,
        154,
        0,
        2148,
        2150,
        3,
        322,
        161,
        0,
        2149,
        2136,
        1,
        0,
        0,
        0,
        2149,
        2137,
        1,
        0,
        0,
        0,
        2149,
        2138,
        1,
        0,
        0,
        0,
        2149,
        2139,
        1,
        0,
        0,
        0,
        2149,
        2140,
        1,
        0,
        0,
        0,
        2149,
        2141,
        1,
        0,
        0,
        0,
        2149,
        2142,
        1,
        0,
        0,
        0,
        2149,
        2143,
        1,
        0,
        0,
        0,
        2149,
        2144,
        1,
        0,
        0,
        0,
        2149,
        2145,
        1,
        0,
        0,
        0,
        2149,
        2146,
        1,
        0,
        0,
        0,
        2149,
        2147,
        1,
        0,
        0,
        0,
        2149,
        2148,
        1,
        0,
        0,
        0,
        2150,
        303,
        1,
        0,
        0,
        0,
        2151,
        2154,
        5,
        57,
        0,
        0,
        2152,
        2153,
        5,
        200,
        0,
        0,
        2153,
        2155,
        5,
        236,
        0,
        0,
        2154,
        2152,
        1,
        0,
        0,
        0,
        2154,
        2155,
        1,
        0,
        0,
        0,
        2155,
        2163,
        1,
        0,
        0,
        0,
        2156,
        2164,
        3,
        622,
        311,
        0,
        2157,
        2164,
        3,
        572,
        286,
        0,
        2158,
        2164,
        3,
        368,
        184,
        0,
        2159,
        2164,
        3,
        574,
        287,
        0,
        2160,
        2164,
        3,
        374,
        187,
        0,
        2161,
        2164,
        3,
        428,
        214,
        0,
        2162,
        2164,
        3,
        440,
        220,
        0,
        2163,
        2156,
        1,
        0,
        0,
        0,
        2163,
        2157,
        1,
        0,
        0,
        0,
        2163,
        2158,
        1,
        0,
        0,
        0,
        2163,
        2159,
        1,
        0,
        0,
        0,
        2163,
        2160,
        1,
        0,
        0,
        0,
        2163,
        2161,
        1,
        0,
        0,
        0,
        2163,
        2162,
        1,
        0,
        0,
        0,
        2164,
        305,
        1,
        0,
        0,
        0,
        2165,
        2173,
        5,
        84,
        0,
        0,
        2166,
        2174,
        3,
        624,
        312,
        0,
        2167,
        2174,
        3,
        372,
        186,
        0,
        2168,
        2174,
        3,
        594,
        297,
        0,
        2169,
        2174,
        3,
        390,
        195,
        0,
        2170,
        2174,
        3,
        430,
        215,
        0,
        2171,
        2174,
        3,
        418,
        209,
        0,
        2172,
        2174,
        3,
        442,
        221,
        0,
        2173,
        2166,
        1,
        0,
        0,
        0,
        2173,
        2167,
        1,
        0,
        0,
        0,
        2173,
        2168,
        1,
        0,
        0,
        0,
        2173,
        2169,
        1,
        0,
        0,
        0,
        2173,
        2170,
        1,
        0,
        0,
        0,
        2173,
        2171,
        1,
        0,
        0,
        0,
        2173,
        2172,
        1,
        0,
        0,
        0,
        2174,
        307,
        1,
        0,
        0,
        0,
        2175,
        2192,
        5,
        268,
        0,
        0,
        2176,
        2193,
        3,
        638,
        319,
        0,
        2177,
        2193,
        3,
        334,
        167,
        0,
        2178,
        2193,
        3,
        470,
        235,
        0,
        2179,
        2193,
        3,
        614,
        307,
        0,
        2180,
        2193,
        3,
        344,
        172,
        0,
        2181,
        2193,
        3,
        328,
        164,
        0,
        2182,
        2193,
        3,
        474,
        237,
        0,
        2183,
        2193,
        3,
        342,
        171,
        0,
        2184,
        2193,
        3,
        476,
        238,
        0,
        2185,
        2193,
        3,
        434,
        217,
        0,
        2186,
        2193,
        3,
        420,
        210,
        0,
        2187,
        2193,
        3,
        356,
        178,
        0,
        2188,
        2193,
        3,
        472,
        236,
        0,
        2189,
        2193,
        3,
        352,
        176,
        0,
        2190,
        2193,
        3,
        478,
        239,
        0,
        2191,
        2193,
        3,
        468,
        234,
        0,
        2192,
        2176,
        1,
        0,
        0,
        0,
        2192,
        2177,
        1,
        0,
        0,
        0,
        2192,
        2178,
        1,
        0,
        0,
        0,
        2192,
        2179,
        1,
        0,
        0,
        0,
        2192,
        2180,
        1,
        0,
        0,
        0,
        2192,
        2181,
        1,
        0,
        0,
        0,
        2192,
        2182,
        1,
        0,
        0,
        0,
        2192,
        2183,
        1,
        0,
        0,
        0,
        2192,
        2184,
        1,
        0,
        0,
        0,
        2192,
        2185,
        1,
        0,
        0,
        0,
        2192,
        2186,
        1,
        0,
        0,
        0,
        2192,
        2187,
        1,
        0,
        0,
        0,
        2192,
        2188,
        1,
        0,
        0,
        0,
        2192,
        2189,
        1,
        0,
        0,
        0,
        2192,
        2190,
        1,
        0,
        0,
        0,
        2192,
        2191,
        1,
        0,
        0,
        0,
        2193,
        309,
        1,
        0,
        0,
        0,
        2194,
        2196,
        3,
        318,
        159,
        0,
        2195,
        2197,
        3,
        24,
        12,
        0,
        2196,
        2195,
        1,
        0,
        0,
        0,
        2196,
        2197,
        1,
        0,
        0,
        0,
        2197,
        2200,
        1,
        0,
        0,
        0,
        2198,
        2200,
        3,
        44,
        22,
        0,
        2199,
        2194,
        1,
        0,
        0,
        0,
        2199,
        2198,
        1,
        0,
        0,
        0,
        2200,
        311,
        1,
        0,
        0,
        0,
        2201,
        2204,
        3,
        286,
        143,
        0,
        2202,
        2203,
        5,
        23,
        0,
        0,
        2203,
        2205,
        3,
        286,
        143,
        0,
        2204,
        2202,
        1,
        0,
        0,
        0,
        2204,
        2205,
        1,
        0,
        0,
        0,
        2205,
        313,
        1,
        0,
        0,
        0,
        2206,
        2207,
        7,
        3,
        0,
        0,
        2207,
        2208,
        3,
        268,
        134,
        0,
        2208,
        315,
        1,
        0,
        0,
        0,
        2209,
        2210,
        5,
        160,
        0,
        0,
        2210,
        2211,
        3,
        268,
        134,
        0,
        2211,
        317,
        1,
        0,
        0,
        0,
        2212,
        2222,
        5,
        318,
        0,
        0,
        2213,
        2223,
        5,
        284,
        0,
        0,
        2214,
        2219,
        3,
        312,
        156,
        0,
        2215,
        2216,
        5,
        46,
        0,
        0,
        2216,
        2218,
        3,
        312,
        156,
        0,
        2217,
        2215,
        1,
        0,
        0,
        0,
        2218,
        2221,
        1,
        0,
        0,
        0,
        2219,
        2217,
        1,
        0,
        0,
        0,
        2219,
        2220,
        1,
        0,
        0,
        0,
        2220,
        2223,
        1,
        0,
        0,
        0,
        2221,
        2219,
        1,
        0,
        0,
        0,
        2222,
        2213,
        1,
        0,
        0,
        0,
        2222,
        2214,
        1,
        0,
        0,
        0,
        2223,
        2225,
        1,
        0,
        0,
        0,
        2224,
        2226,
        3,
        38,
        19,
        0,
        2225,
        2224,
        1,
        0,
        0,
        0,
        2225,
        2226,
        1,
        0,
        0,
        0,
        2226,
        2228,
        1,
        0,
        0,
        0,
        2227,
        2229,
        3,
        314,
        157,
        0,
        2228,
        2227,
        1,
        0,
        0,
        0,
        2228,
        2229,
        1,
        0,
        0,
        0,
        2229,
        2231,
        1,
        0,
        0,
        0,
        2230,
        2232,
        3,
        316,
        158,
        0,
        2231,
        2230,
        1,
        0,
        0,
        0,
        2231,
        2232,
        1,
        0,
        0,
        0,
        2232,
        2234,
        1,
        0,
        0,
        0,
        2233,
        2235,
        3,
        44,
        22,
        0,
        2234,
        2233,
        1,
        0,
        0,
        0,
        2234,
        2235,
        1,
        0,
        0,
        0,
        2235,
        319,
        1,
        0,
        0,
        0,
        2236,
        2237,
        5,
        198,
        0,
        0,
        2237,
        2238,
        3,
        664,
        332,
        0,
        2238,
        321,
        1,
        0,
        0,
        0,
        2239,
        2240,
        5,
        280,
        0,
        0,
        2240,
        2241,
        3,
        354,
        177,
        0,
        2241,
        323,
        1,
        0,
        0,
        0,
        2242,
        2245,
        3,
        322,
        161,
        0,
        2243,
        2245,
        3,
        326,
        163,
        0,
        2244,
        2242,
        1,
        0,
        0,
        0,
        2244,
        2243,
        1,
        0,
        0,
        0,
        2245,
        325,
        1,
        0,
        0,
        0,
        2246,
        2253,
        5,
        268,
        0,
        0,
        2247,
        2254,
        3,
        328,
        164,
        0,
        2248,
        2254,
        3,
        334,
        167,
        0,
        2249,
        2254,
        3,
        344,
        172,
        0,
        2250,
        2254,
        3,
        342,
        171,
        0,
        2251,
        2254,
        3,
        356,
        178,
        0,
        2252,
        2254,
        3,
        352,
        176,
        0,
        2253,
        2247,
        1,
        0,
        0,
        0,
        2253,
        2248,
        1,
        0,
        0,
        0,
        2253,
        2249,
        1,
        0,
        0,
        0,
        2253,
        2250,
        1,
        0,
        0,
        0,
        2253,
        2251,
        1,
        0,
        0,
        0,
        2253,
        2252,
        1,
        0,
        0,
        0,
        2254,
        327,
        1,
        0,
        0,
        0,
        2255,
        2257,
        3,
        330,
        165,
        0,
        2256,
        2255,
        1,
        0,
        0,
        0,
        2256,
        2257,
        1,
        0,
        0,
        0,
        2257,
        2258,
        1,
        0,
        0,
        0,
        2258,
        2259,
        3,
        332,
        166,
        0,
        2259,
        329,
        1,
        0,
        0,
        0,
        2260,
        2261,
        7,
        29,
        0,
        0,
        2261,
        331,
        1,
        0,
        0,
        0,
        2262,
        2264,
        3,
        528,
        264,
        0,
        2263,
        2265,
        3,
        310,
        155,
        0,
        2264,
        2263,
        1,
        0,
        0,
        0,
        2264,
        2265,
        1,
        0,
        0,
        0,
        2265,
        2267,
        1,
        0,
        0,
        0,
        2266,
        2268,
        3,
        324,
        162,
        0,
        2267,
        2266,
        1,
        0,
        0,
        0,
        2267,
        2268,
        1,
        0,
        0,
        0,
        2268,
        333,
        1,
        0,
        0,
        0,
        2269,
        2271,
        5,
        18,
        0,
        0,
        2270,
        2269,
        1,
        0,
        0,
        0,
        2270,
        2271,
        1,
        0,
        0,
        0,
        2271,
        2272,
        1,
        0,
        0,
        0,
        2272,
        2299,
        3,
        340,
        170,
        0,
        2273,
        2275,
        3,
        336,
        168,
        0,
        2274,
        2273,
        1,
        0,
        0,
        0,
        2274,
        2275,
        1,
        0,
        0,
        0,
        2275,
        2276,
        1,
        0,
        0,
        0,
        2276,
        2277,
        3,
        338,
        169,
        0,
        2277,
        2278,
        3,
        340,
        170,
        0,
        2278,
        2299,
        1,
        0,
        0,
        0,
        2279,
        2281,
        3,
        336,
        168,
        0,
        2280,
        2279,
        1,
        0,
        0,
        0,
        2280,
        2281,
        1,
        0,
        0,
        0,
        2281,
        2282,
        1,
        0,
        0,
        0,
        2282,
        2283,
        5,
        149,
        0,
        0,
        2283,
        2299,
        3,
        340,
        170,
        0,
        2284,
        2286,
        3,
        336,
        168,
        0,
        2285,
        2284,
        1,
        0,
        0,
        0,
        2285,
        2286,
        1,
        0,
        0,
        0,
        2286,
        2287,
        1,
        0,
        0,
        0,
        2287,
        2288,
        5,
        219,
        0,
        0,
        2288,
        2289,
        5,
        295,
        0,
        0,
        2289,
        2299,
        3,
        340,
        170,
        0,
        2290,
        2292,
        3,
        336,
        168,
        0,
        2291,
        2290,
        1,
        0,
        0,
        0,
        2291,
        2292,
        1,
        0,
        0,
        0,
        2292,
        2294,
        1,
        0,
        0,
        0,
        2293,
        2295,
        5,
        219,
        0,
        0,
        2294,
        2293,
        1,
        0,
        0,
        0,
        2294,
        2295,
        1,
        0,
        0,
        0,
        2295,
        2296,
        1,
        0,
        0,
        0,
        2296,
        2297,
        7,
        30,
        0,
        0,
        2297,
        2299,
        3,
        340,
        170,
        0,
        2298,
        2270,
        1,
        0,
        0,
        0,
        2298,
        2274,
        1,
        0,
        0,
        0,
        2298,
        2280,
        1,
        0,
        0,
        0,
        2298,
        2285,
        1,
        0,
        0,
        0,
        2298,
        2291,
        1,
        0,
        0,
        0,
        2299,
        335,
        1,
        0,
        0,
        0,
        2300,
        2303,
        5,
        183,
        0,
        0,
        2301,
        2303,
        7,
        31,
        0,
        0,
        2302,
        2300,
        1,
        0,
        0,
        0,
        2302,
        2301,
        1,
        0,
        0,
        0,
        2303,
        337,
        1,
        0,
        0,
        0,
        2304,
        2311,
        5,
        101,
        0,
        0,
        2305,
        2311,
        5,
        100,
        0,
        0,
        2306,
        2307,
        5,
        219,
        0,
        0,
        2307,
        2311,
        5,
        101,
        0,
        0,
        2308,
        2309,
        5,
        219,
        0,
        0,
        2309,
        2311,
        5,
        100,
        0,
        0,
        2310,
        2304,
        1,
        0,
        0,
        0,
        2310,
        2305,
        1,
        0,
        0,
        0,
        2310,
        2306,
        1,
        0,
        0,
        0,
        2310,
        2308,
        1,
        0,
        0,
        0,
        2311,
        339,
        1,
        0,
        0,
        0,
        2312,
        2314,
        3,
        530,
        265,
        0,
        2313,
        2315,
        3,
        310,
        155,
        0,
        2314,
        2313,
        1,
        0,
        0,
        0,
        2314,
        2315,
        1,
        0,
        0,
        0,
        2315,
        2317,
        1,
        0,
        0,
        0,
        2316,
        2318,
        3,
        324,
        162,
        0,
        2317,
        2316,
        1,
        0,
        0,
        0,
        2317,
        2318,
        1,
        0,
        0,
        0,
        2318,
        341,
        1,
        0,
        0,
        0,
        2319,
        2321,
        7,
        32,
        0,
        0,
        2320,
        2322,
        3,
        348,
        174,
        0,
        2321,
        2320,
        1,
        0,
        0,
        0,
        2321,
        2322,
        1,
        0,
        0,
        0,
        2322,
        2324,
        1,
        0,
        0,
        0,
        2323,
        2325,
        3,
        310,
        155,
        0,
        2324,
        2323,
        1,
        0,
        0,
        0,
        2324,
        2325,
        1,
        0,
        0,
        0,
        2325,
        2327,
        1,
        0,
        0,
        0,
        2326,
        2328,
        3,
        324,
        162,
        0,
        2327,
        2326,
        1,
        0,
        0,
        0,
        2327,
        2328,
        1,
        0,
        0,
        0,
        2328,
        343,
        1,
        0,
        0,
        0,
        2329,
        2331,
        3,
        350,
        175,
        0,
        2330,
        2329,
        1,
        0,
        0,
        0,
        2330,
        2331,
        1,
        0,
        0,
        0,
        2331,
        2332,
        1,
        0,
        0,
        0,
        2332,
        2334,
        3,
        346,
        173,
        0,
        2333,
        2335,
        3,
        348,
        174,
        0,
        2334,
        2333,
        1,
        0,
        0,
        0,
        2334,
        2335,
        1,
        0,
        0,
        0,
        2335,
        2337,
        1,
        0,
        0,
        0,
        2336,
        2338,
        3,
        310,
        155,
        0,
        2337,
        2336,
        1,
        0,
        0,
        0,
        2337,
        2338,
        1,
        0,
        0,
        0,
        2338,
        2340,
        1,
        0,
        0,
        0,
        2339,
        2341,
        3,
        324,
        162,
        0,
        2340,
        2339,
        1,
        0,
        0,
        0,
        2340,
        2341,
        1,
        0,
        0,
        0,
        2341,
        345,
        1,
        0,
        0,
        0,
        2342,
        2343,
        7,
        33,
        0,
        0,
        2343,
        347,
        1,
        0,
        0,
        0,
        2344,
        2351,
        5,
        98,
        0,
        0,
        2345,
        2349,
        5,
        37,
        0,
        0,
        2346,
        2347,
        5,
        59,
        0,
        0,
        2347,
        2350,
        5,
        304,
        0,
        0,
        2348,
        2350,
        3,
        674,
        337,
        0,
        2349,
        2346,
        1,
        0,
        0,
        0,
        2349,
        2348,
        1,
        0,
        0,
        0,
        2350,
        2352,
        1,
        0,
        0,
        0,
        2351,
        2345,
        1,
        0,
        0,
        0,
        2351,
        2352,
        1,
        0,
        0,
        0,
        2352,
        349,
        1,
        0,
        0,
        0,
        2353,
        2359,
        5,
        18,
        0,
        0,
        2354,
        2355,
        5,
        36,
        0,
        0,
        2355,
        2359,
        5,
        131,
        0,
        0,
        2356,
        2357,
        5,
        304,
        0,
        0,
        2357,
        2359,
        5,
        69,
        0,
        0,
        2358,
        2353,
        1,
        0,
        0,
        0,
        2358,
        2354,
        1,
        0,
        0,
        0,
        2358,
        2356,
        1,
        0,
        0,
        0,
        2359,
        351,
        1,
        0,
        0,
        0,
        2360,
        2361,
        3,
        532,
        266,
        0,
        2361,
        2362,
        3,
        360,
        180,
        0,
        2362,
        353,
        1,
        0,
        0,
        0,
        2363,
        2364,
        3,
        532,
        266,
        0,
        2364,
        2366,
        3,
        362,
        181,
        0,
        2365,
        2367,
        3,
        310,
        155,
        0,
        2366,
        2365,
        1,
        0,
        0,
        0,
        2366,
        2367,
        1,
        0,
        0,
        0,
        2367,
        2369,
        1,
        0,
        0,
        0,
        2368,
        2370,
        3,
        324,
        162,
        0,
        2369,
        2368,
        1,
        0,
        0,
        0,
        2369,
        2370,
        1,
        0,
        0,
        0,
        2370,
        355,
        1,
        0,
        0,
        0,
        2371,
        2372,
        3,
        358,
        179,
        0,
        2372,
        2373,
        3,
        360,
        180,
        0,
        2373,
        357,
        1,
        0,
        0,
        0,
        2374,
        2375,
        7,
        34,
        0,
        0,
        2375,
        359,
        1,
        0,
        0,
        0,
        2376,
        2378,
        3,
        310,
        155,
        0,
        2377,
        2376,
        1,
        0,
        0,
        0,
        2377,
        2378,
        1,
        0,
        0,
        0,
        2378,
        2384,
        1,
        0,
        0,
        0,
        2379,
        2381,
        3,
        362,
        181,
        0,
        2380,
        2382,
        3,
        310,
        155,
        0,
        2381,
        2380,
        1,
        0,
        0,
        0,
        2381,
        2382,
        1,
        0,
        0,
        0,
        2382,
        2384,
        1,
        0,
        0,
        0,
        2383,
        2377,
        1,
        0,
        0,
        0,
        2383,
        2379,
        1,
        0,
        0,
        0,
        2384,
        2386,
        1,
        0,
        0,
        0,
        2385,
        2387,
        3,
        324,
        162,
        0,
        2386,
        2385,
        1,
        0,
        0,
        0,
        2386,
        2387,
        1,
        0,
        0,
        0,
        2387,
        361,
        1,
        0,
        0,
        0,
        2388,
        2391,
        3,
        654,
        327,
        0,
        2389,
        2391,
        3,
        184,
        92,
        0,
        2390,
        2388,
        1,
        0,
        0,
        0,
        2390,
        2389,
        1,
        0,
        0,
        0,
        2391,
        363,
        1,
        0,
        0,
        0,
        2392,
        2393,
        5,
        165,
        0,
        0,
        2393,
        2394,
        3,
        286,
        143,
        0,
        2394,
        2395,
        3,
        150,
        75,
        0,
        2395,
        2396,
        5,
        250,
        0,
        0,
        2396,
        365,
        1,
        0,
        0,
        0,
        2397,
        2398,
        5,
        165,
        0,
        0,
        2398,
        2400,
        5,
        250,
        0,
        0,
        2399,
        2401,
        3,
        162,
        81,
        0,
        2400,
        2399,
        1,
        0,
        0,
        0,
        2400,
        2401,
        1,
        0,
        0,
        0,
        2401,
        2402,
        1,
        0,
        0,
        0,
        2402,
        2403,
        3,
        164,
        82,
        0,
        2403,
        2404,
        5,
        155,
        0,
        0,
        2404,
        2405,
        3,
        286,
        143,
        0,
        2405,
        2406,
        3,
        152,
        76,
        0,
        2406,
        2407,
        5,
        224,
        0,
        0,
        2407,
        2409,
        3,
        164,
        82,
        0,
        2408,
        2410,
        3,
        166,
        83,
        0,
        2409,
        2408,
        1,
        0,
        0,
        0,
        2409,
        2410,
        1,
        0,
        0,
        0,
        2410,
        2411,
        1,
        0,
        0,
        0,
        2411,
        2412,
        5,
        165,
        0,
        0,
        2412,
        2413,
        5,
        250,
        0,
        0,
        2413,
        367,
        1,
        0,
        0,
        0,
        2414,
        2416,
        5,
        51,
        0,
        0,
        2415,
        2417,
        3,
        640,
        320,
        0,
        2416,
        2415,
        1,
        0,
        0,
        0,
        2416,
        2417,
        1,
        0,
        0,
        0,
        2417,
        2421,
        1,
        0,
        0,
        0,
        2418,
        2419,
        5,
        128,
        0,
        0,
        2419,
        2420,
        5,
        189,
        0,
        0,
        2420,
        2422,
        5,
        102,
        0,
        0,
        2421,
        2418,
        1,
        0,
        0,
        0,
        2421,
        2422,
        1,
        0,
        0,
        0,
        2422,
        2423,
        1,
        0,
        0,
        0,
        2423,
        2426,
        5,
        112,
        0,
        0,
        2424,
        2427,
        3,
        364,
        182,
        0,
        2425,
        2427,
        3,
        366,
        183,
        0,
        2426,
        2424,
        1,
        0,
        0,
        0,
        2426,
        2425,
        1,
        0,
        0,
        0,
        2427,
        2428,
        1,
        0,
        0,
        0,
        2428,
        2430,
        3,
        370,
        185,
        0,
        2429,
        2431,
        3,
        320,
        160,
        0,
        2430,
        2429,
        1,
        0,
        0,
        0,
        2430,
        2431,
        1,
        0,
        0,
        0,
        2431,
        369,
        1,
        0,
        0,
        0,
        2432,
        2433,
        5,
        240,
        0,
        0,
        2433,
        2437,
        3,
        392,
        196,
        0,
        2434,
        2438,
        5,
        45,
        0,
        0,
        2435,
        2436,
        5,
        147,
        0,
        0,
        2436,
        2438,
        7,
        18,
        0,
        0,
        2437,
        2434,
        1,
        0,
        0,
        0,
        2437,
        2435,
        1,
        0,
        0,
        0,
        2438,
        2439,
        1,
        0,
        0,
        0,
        2439,
        2440,
        3,
        290,
        145,
        0,
        2440,
        2464,
        1,
        0,
        0,
        0,
        2441,
        2442,
        5,
        240,
        0,
        0,
        2442,
        2443,
        3,
        392,
        196,
        0,
        2443,
        2445,
        5,
        147,
        0,
        0,
        2444,
        2446,
        7,
        35,
        0,
        0,
        2445,
        2444,
        1,
        0,
        0,
        0,
        2445,
        2446,
        1,
        0,
        0,
        0,
        2446,
        2447,
        1,
        0,
        0,
        0,
        2447,
        2448,
        5,
        299,
        0,
        0,
        2448,
        2464,
        1,
        0,
        0,
        0,
        2449,
        2450,
        5,
        240,
        0,
        0,
        2450,
        2451,
        3,
        392,
        196,
        0,
        2451,
        2453,
        5,
        147,
        0,
        0,
        2452,
        2454,
        7,
        35,
        0,
        0,
        2453,
        2452,
        1,
        0,
        0,
        0,
        2453,
        2454,
        1,
        0,
        0,
        0,
        2454,
        2455,
        1,
        0,
        0,
        0,
        2455,
        2456,
        5,
        149,
        0,
        0,
        2456,
        2464,
        1,
        0,
        0,
        0,
        2457,
        2458,
        5,
        240,
        0,
        0,
        2458,
        2459,
        3,
        392,
        196,
        0,
        2459,
        2460,
        5,
        147,
        0,
        0,
        2460,
        2461,
        5,
        189,
        0,
        0,
        2461,
        2462,
        5,
        192,
        0,
        0,
        2462,
        2464,
        1,
        0,
        0,
        0,
        2463,
        2432,
        1,
        0,
        0,
        0,
        2463,
        2441,
        1,
        0,
        0,
        0,
        2463,
        2449,
        1,
        0,
        0,
        0,
        2463,
        2457,
        1,
        0,
        0,
        0,
        2464,
        371,
        1,
        0,
        0,
        0,
        2465,
        2466,
        5,
        51,
        0,
        0,
        2466,
        2469,
        3,
        640,
        320,
        0,
        2467,
        2468,
        5,
        128,
        0,
        0,
        2468,
        2470,
        5,
        102,
        0,
        0,
        2469,
        2467,
        1,
        0,
        0,
        0,
        2469,
        2470,
        1,
        0,
        0,
        0,
        2470,
        373,
        1,
        0,
        0,
        0,
        2471,
        2472,
        5,
        223,
        0,
        0,
        2472,
        2473,
        5,
        132,
        0,
        0,
        2473,
        2492,
        3,
        376,
        188,
        0,
        2474,
        2475,
        5,
        281,
        0,
        0,
        2475,
        2476,
        5,
        132,
        0,
        0,
        2476,
        2492,
        3,
        376,
        188,
        0,
        2477,
        2478,
        5,
        209,
        0,
        0,
        2478,
        2479,
        5,
        132,
        0,
        0,
        2479,
        2492,
        3,
        376,
        188,
        0,
        2480,
        2481,
        5,
        309,
        0,
        0,
        2481,
        2482,
        5,
        132,
        0,
        0,
        2482,
        2492,
        3,
        376,
        188,
        0,
        2483,
        2484,
        5,
        164,
        0,
        0,
        2484,
        2485,
        5,
        132,
        0,
        0,
        2485,
        2492,
        3,
        384,
        192,
        0,
        2486,
        2487,
        5,
        115,
        0,
        0,
        2487,
        2488,
        5,
        132,
        0,
        0,
        2488,
        2492,
        3,
        378,
        189,
        0,
        2489,
        2490,
        5,
        132,
        0,
        0,
        2490,
        2492,
        3,
        376,
        188,
        0,
        2491,
        2471,
        1,
        0,
        0,
        0,
        2491,
        2474,
        1,
        0,
        0,
        0,
        2491,
        2477,
        1,
        0,
        0,
        0,
        2491,
        2480,
        1,
        0,
        0,
        0,
        2491,
        2483,
        1,
        0,
        0,
        0,
        2491,
        2486,
        1,
        0,
        0,
        0,
        2491,
        2489,
        1,
        0,
        0,
        0,
        2492,
        375,
        1,
        0,
        0,
        0,
        2493,
        2495,
        3,
        640,
        320,
        0,
        2494,
        2493,
        1,
        0,
        0,
        0,
        2494,
        2495,
        1,
        0,
        0,
        0,
        2495,
        2499,
        1,
        0,
        0,
        0,
        2496,
        2497,
        5,
        128,
        0,
        0,
        2497,
        2498,
        5,
        189,
        0,
        0,
        2498,
        2500,
        5,
        102,
        0,
        0,
        2499,
        2496,
        1,
        0,
        0,
        0,
        2499,
        2500,
        1,
        0,
        0,
        0,
        2500,
        2501,
        1,
        0,
        0,
        0,
        2501,
        2504,
        5,
        112,
        0,
        0,
        2502,
        2505,
        3,
        364,
        182,
        0,
        2503,
        2505,
        3,
        366,
        183,
        0,
        2504,
        2502,
        1,
        0,
        0,
        0,
        2504,
        2503,
        1,
        0,
        0,
        0,
        2505,
        2506,
        1,
        0,
        0,
        0,
        2506,
        2507,
        5,
        195,
        0,
        0,
        2507,
        2509,
        3,
        392,
        196,
        0,
        2508,
        2510,
        3,
        320,
        160,
        0,
        2509,
        2508,
        1,
        0,
        0,
        0,
        2509,
        2510,
        1,
        0,
        0,
        0,
        2510,
        377,
        1,
        0,
        0,
        0,
        2511,
        2513,
        3,
        640,
        320,
        0,
        2512,
        2511,
        1,
        0,
        0,
        0,
        2512,
        2513,
        1,
        0,
        0,
        0,
        2513,
        2517,
        1,
        0,
        0,
        0,
        2514,
        2515,
        5,
        128,
        0,
        0,
        2515,
        2516,
        5,
        189,
        0,
        0,
        2516,
        2518,
        5,
        102,
        0,
        0,
        2517,
        2514,
        1,
        0,
        0,
        0,
        2517,
        2518,
        1,
        0,
        0,
        0,
        2518,
        2519,
        1,
        0,
        0,
        0,
        2519,
        2522,
        5,
        112,
        0,
        0,
        2520,
        2523,
        3,
        380,
        190,
        0,
        2521,
        2523,
        3,
        382,
        191,
        0,
        2522,
        2520,
        1,
        0,
        0,
        0,
        2522,
        2521,
        1,
        0,
        0,
        0,
        2523,
        2524,
        1,
        0,
        0,
        0,
        2524,
        2525,
        5,
        195,
        0,
        0,
        2525,
        2526,
        5,
        88,
        0,
        0,
        2526,
        2527,
        5,
        155,
        0,
        0,
        2527,
        2528,
        3,
        394,
        197,
        0,
        2528,
        2530,
        5,
        224,
        0,
        0,
        2529,
        2531,
        3,
        320,
        160,
        0,
        2530,
        2529,
        1,
        0,
        0,
        0,
        2530,
        2531,
        1,
        0,
        0,
        0,
        2531,
        379,
        1,
        0,
        0,
        0,
        2532,
        2533,
        5,
        165,
        0,
        0,
        2533,
        2534,
        3,
        286,
        143,
        0,
        2534,
        2535,
        5,
        44,
        0,
        0,
        2535,
        2540,
        3,
        674,
        337,
        0,
        2536,
        2537,
        5,
        29,
        0,
        0,
        2537,
        2539,
        3,
        674,
        337,
        0,
        2538,
        2536,
        1,
        0,
        0,
        0,
        2539,
        2542,
        1,
        0,
        0,
        0,
        2540,
        2538,
        1,
        0,
        0,
        0,
        2540,
        2541,
        1,
        0,
        0,
        0,
        2541,
        2543,
        1,
        0,
        0,
        0,
        2542,
        2540,
        1,
        0,
        0,
        0,
        2543,
        2544,
        5,
        250,
        0,
        0,
        2544,
        381,
        1,
        0,
        0,
        0,
        2545,
        2546,
        5,
        165,
        0,
        0,
        2546,
        2548,
        5,
        250,
        0,
        0,
        2547,
        2549,
        3,
        162,
        81,
        0,
        2548,
        2547,
        1,
        0,
        0,
        0,
        2548,
        2549,
        1,
        0,
        0,
        0,
        2549,
        2550,
        1,
        0,
        0,
        0,
        2550,
        2551,
        3,
        164,
        82,
        0,
        2551,
        2552,
        5,
        155,
        0,
        0,
        2552,
        2553,
        3,
        286,
        143,
        0,
        2553,
        2554,
        5,
        44,
        0,
        0,
        2554,
        2559,
        3,
        674,
        337,
        0,
        2555,
        2556,
        5,
        29,
        0,
        0,
        2556,
        2558,
        3,
        674,
        337,
        0,
        2557,
        2555,
        1,
        0,
        0,
        0,
        2558,
        2561,
        1,
        0,
        0,
        0,
        2559,
        2557,
        1,
        0,
        0,
        0,
        2559,
        2560,
        1,
        0,
        0,
        0,
        2560,
        2562,
        1,
        0,
        0,
        0,
        2561,
        2559,
        1,
        0,
        0,
        0,
        2562,
        2563,
        5,
        224,
        0,
        0,
        2563,
        2565,
        3,
        164,
        82,
        0,
        2564,
        2566,
        3,
        166,
        83,
        0,
        2565,
        2564,
        1,
        0,
        0,
        0,
        2565,
        2566,
        1,
        0,
        0,
        0,
        2566,
        2567,
        1,
        0,
        0,
        0,
        2567,
        2568,
        5,
        165,
        0,
        0,
        2568,
        2569,
        5,
        250,
        0,
        0,
        2569,
        383,
        1,
        0,
        0,
        0,
        2570,
        2572,
        3,
        640,
        320,
        0,
        2571,
        2570,
        1,
        0,
        0,
        0,
        2571,
        2572,
        1,
        0,
        0,
        0,
        2572,
        2576,
        1,
        0,
        0,
        0,
        2573,
        2574,
        5,
        128,
        0,
        0,
        2574,
        2575,
        5,
        189,
        0,
        0,
        2575,
        2577,
        5,
        102,
        0,
        0,
        2576,
        2573,
        1,
        0,
        0,
        0,
        2576,
        2577,
        1,
        0,
        0,
        0,
        2577,
        2578,
        1,
        0,
        0,
        0,
        2578,
        2581,
        5,
        112,
        0,
        0,
        2579,
        2582,
        3,
        386,
        193,
        0,
        2580,
        2582,
        3,
        388,
        194,
        0,
        2581,
        2579,
        1,
        0,
        0,
        0,
        2581,
        2580,
        1,
        0,
        0,
        0,
        2582,
        2583,
        1,
        0,
        0,
        0,
        2583,
        2584,
        3,
        674,
        337,
        0,
        2584,
        2585,
        5,
        165,
        0,
        0,
        2585,
        2586,
        3,
        286,
        143,
        0,
        2586,
        2588,
        5,
        250,
        0,
        0,
        2587,
        2589,
        3,
        320,
        160,
        0,
        2588,
        2587,
        1,
        0,
        0,
        0,
        2588,
        2589,
        1,
        0,
        0,
        0,
        2589,
        385,
        1,
        0,
        0,
        0,
        2590,
        2591,
        5,
        165,
        0,
        0,
        2591,
        2592,
        3,
        286,
        143,
        0,
        2592,
        2593,
        5,
        250,
        0,
        0,
        2593,
        2594,
        5,
        195,
        0,
        0,
        2594,
        2595,
        5,
        88,
        0,
        0,
        2595,
        387,
        1,
        0,
        0,
        0,
        2596,
        2597,
        5,
        165,
        0,
        0,
        2597,
        2599,
        5,
        250,
        0,
        0,
        2598,
        2600,
        3,
        162,
        81,
        0,
        2599,
        2598,
        1,
        0,
        0,
        0,
        2599,
        2600,
        1,
        0,
        0,
        0,
        2600,
        2601,
        1,
        0,
        0,
        0,
        2601,
        2602,
        3,
        164,
        82,
        0,
        2602,
        2603,
        5,
        155,
        0,
        0,
        2603,
        2604,
        3,
        286,
        143,
        0,
        2604,
        2605,
        5,
        224,
        0,
        0,
        2605,
        2607,
        3,
        164,
        82,
        0,
        2606,
        2608,
        3,
        166,
        83,
        0,
        2607,
        2606,
        1,
        0,
        0,
        0,
        2607,
        2608,
        1,
        0,
        0,
        0,
        2608,
        2609,
        1,
        0,
        0,
        0,
        2609,
        2610,
        5,
        165,
        0,
        0,
        2610,
        2611,
        5,
        250,
        0,
        0,
        2611,
        2613,
        5,
        195,
        0,
        0,
        2612,
        2614,
        5,
        88,
        0,
        0,
        2613,
        2612,
        1,
        0,
        0,
        0,
        2613,
        2614,
        1,
        0,
        0,
        0,
        2614,
        389,
        1,
        0,
        0,
        0,
        2615,
        2616,
        5,
        132,
        0,
        0,
        2616,
        2619,
        3,
        640,
        320,
        0,
        2617,
        2618,
        5,
        128,
        0,
        0,
        2618,
        2620,
        5,
        102,
        0,
        0,
        2619,
        2617,
        1,
        0,
        0,
        0,
        2619,
        2620,
        1,
        0,
        0,
        0,
        2620,
        391,
        1,
        0,
        0,
        0,
        2621,
        2622,
        3,
        286,
        143,
        0,
        2622,
        2623,
        3,
        212,
        106,
        0,
        2623,
        2629,
        1,
        0,
        0,
        0,
        2624,
        2625,
        5,
        165,
        0,
        0,
        2625,
        2626,
        3,
        394,
        197,
        0,
        2626,
        2627,
        5,
        250,
        0,
        0,
        2627,
        2629,
        1,
        0,
        0,
        0,
        2628,
        2621,
        1,
        0,
        0,
        0,
        2628,
        2624,
        1,
        0,
        0,
        0,
        2629,
        393,
        1,
        0,
        0,
        0,
        2630,
        2631,
        3,
        286,
        143,
        0,
        2631,
        2638,
        3,
        212,
        106,
        0,
        2632,
        2633,
        5,
        46,
        0,
        0,
        2633,
        2634,
        3,
        286,
        143,
        0,
        2634,
        2635,
        3,
        212,
        106,
        0,
        2635,
        2637,
        1,
        0,
        0,
        0,
        2636,
        2632,
        1,
        0,
        0,
        0,
        2637,
        2640,
        1,
        0,
        0,
        0,
        2638,
        2636,
        1,
        0,
        0,
        0,
        2638,
        2639,
        1,
        0,
        0,
        0,
        2639,
        395,
        1,
        0,
        0,
        0,
        2640,
        2638,
        1,
        0,
        0,
        0,
        2641,
        2647,
        5,
        19,
        0,
        0,
        2642,
        2648,
        3,
        626,
        313,
        0,
        2643,
        2648,
        3,
        446,
        223,
        0,
        2644,
        2648,
        3,
        598,
        299,
        0,
        2645,
        2648,
        3,
        448,
        224,
        0,
        2646,
        2648,
        3,
        414,
        207,
        0,
        2647,
        2642,
        1,
        0,
        0,
        0,
        2647,
        2643,
        1,
        0,
        0,
        0,
        2647,
        2644,
        1,
        0,
        0,
        0,
        2647,
        2645,
        1,
        0,
        0,
        0,
        2647,
        2646,
        1,
        0,
        0,
        0,
        2648,
        397,
        1,
        0,
        0,
        0,
        2649,
        2653,
        5,
        229,
        0,
        0,
        2650,
        2654,
        3,
        432,
        216,
        0,
        2651,
        2654,
        3,
        416,
        208,
        0,
        2652,
        2654,
        3,
        444,
        222,
        0,
        2653,
        2650,
        1,
        0,
        0,
        0,
        2653,
        2651,
        1,
        0,
        0,
        0,
        2653,
        2652,
        1,
        0,
        0,
        0,
        2654,
        399,
        1,
        0,
        0,
        0,
        2655,
        2666,
        5,
        119,
        0,
        0,
        2656,
        2658,
        5,
        130,
        0,
        0,
        2657,
        2656,
        1,
        0,
        0,
        0,
        2657,
        2658,
        1,
        0,
        0,
        0,
        2658,
        2659,
        1,
        0,
        0,
        0,
        2659,
        2660,
        3,
        484,
        242,
        0,
        2660,
        2661,
        5,
        287,
        0,
        0,
        2661,
        2662,
        3,
        408,
        204,
        0,
        2662,
        2667,
        1,
        0,
        0,
        0,
        2663,
        2664,
        3,
        410,
        205,
        0,
        2664,
        2665,
        3,
        436,
        218,
        0,
        2665,
        2667,
        1,
        0,
        0,
        0,
        2666,
        2657,
        1,
        0,
        0,
        0,
        2666,
        2663,
        1,
        0,
        0,
        0,
        2667,
        401,
        1,
        0,
        0,
        0,
        2668,
        2670,
        5,
        71,
        0,
        0,
        2669,
        2671,
        5,
        130,
        0,
        0,
        2670,
        2669,
        1,
        0,
        0,
        0,
        2670,
        2671,
        1,
        0,
        0,
        0,
        2671,
        2672,
        1,
        0,
        0,
        0,
        2672,
        2673,
        3,
        484,
        242,
        0,
        2673,
        2674,
        5,
        287,
        0,
        0,
        2674,
        2675,
        3,
        408,
        204,
        0,
        2675,
        403,
        1,
        0,
        0,
        0,
        2676,
        2690,
        5,
        245,
        0,
        0,
        2677,
        2679,
        7,
        36,
        0,
        0,
        2678,
        2677,
        1,
        0,
        0,
        0,
        2678,
        2679,
        1,
        0,
        0,
        0,
        2679,
        2681,
        1,
        0,
        0,
        0,
        2680,
        2682,
        5,
        130,
        0,
        0,
        2681,
        2680,
        1,
        0,
        0,
        0,
        2681,
        2682,
        1,
        0,
        0,
        0,
        2682,
        2683,
        1,
        0,
        0,
        0,
        2683,
        2684,
        3,
        484,
        242,
        0,
        2684,
        2685,
        5,
        114,
        0,
        0,
        2685,
        2686,
        3,
        408,
        204,
        0,
        2686,
        2691,
        1,
        0,
        0,
        0,
        2687,
        2688,
        3,
        410,
        205,
        0,
        2688,
        2689,
        3,
        438,
        219,
        0,
        2689,
        2691,
        1,
        0,
        0,
        0,
        2690,
        2678,
        1,
        0,
        0,
        0,
        2690,
        2687,
        1,
        0,
        0,
        0,
        2691,
        405,
        1,
        0,
        0,
        0,
        2692,
        2693,
        3,
        644,
        322,
        0,
        2693,
        407,
        1,
        0,
        0,
        0,
        2694,
        2695,
        3,
        644,
        322,
        0,
        2695,
        409,
        1,
        0,
        0,
        0,
        2696,
        2697,
        7,
        37,
        0,
        0,
        2697,
        411,
        1,
        0,
        0,
        0,
        2698,
        2699,
        5,
        90,
        0,
        0,
        2699,
        2700,
        5,
        259,
        0,
        0,
        2700,
        2702,
        3,
        660,
        330,
        0,
        2701,
        2703,
        3,
        320,
        160,
        0,
        2702,
        2701,
        1,
        0,
        0,
        0,
        2702,
        2703,
        1,
        0,
        0,
        0,
        2703,
        413,
        1,
        0,
        0,
        0,
        2704,
        2705,
        5,
        259,
        0,
        0,
        2705,
        2706,
        3,
        660,
        330,
        0,
        2706,
        2707,
        5,
        261,
        0,
        0,
        2707,
        2708,
        3,
        320,
        160,
        0,
        2708,
        415,
        1,
        0,
        0,
        0,
        2709,
        2710,
        5,
        259,
        0,
        0,
        2710,
        2711,
        3,
        660,
        330,
        0,
        2711,
        2712,
        5,
        287,
        0,
        0,
        2712,
        2713,
        3,
        660,
        330,
        0,
        2713,
        417,
        1,
        0,
        0,
        0,
        2714,
        2715,
        5,
        259,
        0,
        0,
        2715,
        2716,
        3,
        660,
        330,
        0,
        2716,
        419,
        1,
        0,
        0,
        0,
        2717,
        2719,
        7,
        38,
        0,
        0,
        2718,
        2720,
        3,
        310,
        155,
        0,
        2719,
        2718,
        1,
        0,
        0,
        0,
        2719,
        2720,
        1,
        0,
        0,
        0,
        2720,
        421,
        1,
        0,
        0,
        0,
        2721,
        2723,
        5,
        85,
        0,
        0,
        2722,
        2721,
        1,
        0,
        0,
        0,
        2722,
        2723,
        1,
        0,
        0,
        0,
        2723,
        2726,
        1,
        0,
        0,
        0,
        2724,
        2727,
        3,
        424,
        212,
        0,
        2725,
        2727,
        3,
        426,
        213,
        0,
        2726,
        2724,
        1,
        0,
        0,
        0,
        2726,
        2725,
        1,
        0,
        0,
        0,
        2727,
        423,
        1,
        0,
        0,
        0,
        2728,
        2729,
        5,
        67,
        0,
        0,
        2729,
        2730,
        7,
        39,
        0,
        0,
        2730,
        2731,
        5,
        114,
        0,
        0,
        2731,
        2732,
        7,
        38,
        0,
        0,
        2732,
        2737,
        3,
        660,
        330,
        0,
        2733,
        2734,
        5,
        46,
        0,
        0,
        2734,
        2736,
        3,
        660,
        330,
        0,
        2735,
        2733,
        1,
        0,
        0,
        0,
        2736,
        2739,
        1,
        0,
        0,
        0,
        2737,
        2735,
        1,
        0,
        0,
        0,
        2737,
        2738,
        1,
        0,
        0,
        0,
        2738,
        425,
        1,
        0,
        0,
        0,
        2739,
        2737,
        1,
        0,
        0,
        0,
        2740,
        2741,
        5,
        227,
        0,
        0,
        2741,
        2742,
        7,
        39,
        0,
        0,
        2742,
        427,
        1,
        0,
        0,
        0,
        2743,
        2745,
        5,
        130,
        0,
        0,
        2744,
        2743,
        1,
        0,
        0,
        0,
        2744,
        2745,
        1,
        0,
        0,
        0,
        2745,
        2746,
        1,
        0,
        0,
        0,
        2746,
        2747,
        5,
        246,
        0,
        0,
        2747,
        2751,
        3,
        642,
        321,
        0,
        2748,
        2749,
        5,
        128,
        0,
        0,
        2749,
        2750,
        5,
        189,
        0,
        0,
        2750,
        2752,
        5,
        102,
        0,
        0,
        2751,
        2748,
        1,
        0,
        0,
        0,
        2751,
        2752,
        1,
        0,
        0,
        0,
        2752,
        2757,
        1,
        0,
        0,
        0,
        2753,
        2754,
        5,
        23,
        0,
        0,
        2754,
        2755,
        5,
        54,
        0,
        0,
        2755,
        2756,
        5,
        193,
        0,
        0,
        2756,
        2758,
        3,
        642,
        321,
        0,
        2757,
        2753,
        1,
        0,
        0,
        0,
        2757,
        2758,
        1,
        0,
        0,
        0,
        2758,
        429,
        1,
        0,
        0,
        0,
        2759,
        2760,
        5,
        246,
        0,
        0,
        2760,
        2763,
        3,
        642,
        321,
        0,
        2761,
        2762,
        5,
        128,
        0,
        0,
        2762,
        2764,
        5,
        102,
        0,
        0,
        2763,
        2761,
        1,
        0,
        0,
        0,
        2763,
        2764,
        1,
        0,
        0,
        0,
        2764,
        431,
        1,
        0,
        0,
        0,
        2765,
        2766,
        5,
        246,
        0,
        0,
        2766,
        2769,
        3,
        642,
        321,
        0,
        2767,
        2768,
        5,
        128,
        0,
        0,
        2768,
        2770,
        5,
        102,
        0,
        0,
        2769,
        2767,
        1,
        0,
        0,
        0,
        2769,
        2770,
        1,
        0,
        0,
        0,
        2770,
        2771,
        1,
        0,
        0,
        0,
        2771,
        2772,
        5,
        287,
        0,
        0,
        2772,
        2773,
        3,
        642,
        321,
        0,
        2773,
        433,
        1,
        0,
        0,
        0,
        2774,
        2776,
        7,
        40,
        0,
        0,
        2775,
        2774,
        1,
        0,
        0,
        0,
        2775,
        2776,
        1,
        0,
        0,
        0,
        2776,
        2777,
        1,
        0,
        0,
        0,
        2777,
        2780,
        3,
        410,
        205,
        0,
        2778,
        2779,
        5,
        314,
        0,
        0,
        2779,
        2781,
        7,
        41,
        0,
        0,
        2780,
        2778,
        1,
        0,
        0,
        0,
        2780,
        2781,
        1,
        0,
        0,
        0,
        2781,
        2783,
        1,
        0,
        0,
        0,
        2782,
        2784,
        3,
        310,
        155,
        0,
        2783,
        2782,
        1,
        0,
        0,
        0,
        2783,
        2784,
        1,
        0,
        0,
        0,
        2784,
        435,
        1,
        0,
        0,
        0,
        2785,
        2786,
        3,
        408,
        204,
        0,
        2786,
        2787,
        5,
        287,
        0,
        0,
        2787,
        2788,
        3,
        406,
        203,
        0,
        2788,
        437,
        1,
        0,
        0,
        0,
        2789,
        2790,
        3,
        408,
        204,
        0,
        2790,
        2791,
        5,
        114,
        0,
        0,
        2791,
        2792,
        3,
        406,
        203,
        0,
        2792,
        439,
        1,
        0,
        0,
        0,
        2793,
        2794,
        5,
        304,
        0,
        0,
        2794,
        2798,
        3,
        642,
        321,
        0,
        2795,
        2796,
        5,
        128,
        0,
        0,
        2796,
        2797,
        5,
        189,
        0,
        0,
        2797,
        2799,
        5,
        102,
        0,
        0,
        2798,
        2795,
        1,
        0,
        0,
        0,
        2798,
        2799,
        1,
        0,
        0,
        0,
        2799,
        2809,
        1,
        0,
        0,
        0,
        2800,
        2807,
        5,
        261,
        0,
        0,
        2801,
        2808,
        3,
        452,
        226,
        0,
        2802,
        2803,
        5,
        202,
        0,
        0,
        2803,
        2808,
        3,
        458,
        229,
        0,
        2804,
        2808,
        3,
        460,
        230,
        0,
        2805,
        2808,
        3,
        462,
        231,
        0,
        2806,
        2808,
        3,
        464,
        232,
        0,
        2807,
        2801,
        1,
        0,
        0,
        0,
        2807,
        2802,
        1,
        0,
        0,
        0,
        2807,
        2804,
        1,
        0,
        0,
        0,
        2807,
        2805,
        1,
        0,
        0,
        0,
        2807,
        2806,
        1,
        0,
        0,
        0,
        2808,
        2810,
        1,
        0,
        0,
        0,
        2809,
        2800,
        1,
        0,
        0,
        0,
        2810,
        2811,
        1,
        0,
        0,
        0,
        2811,
        2809,
        1,
        0,
        0,
        0,
        2811,
        2812,
        1,
        0,
        0,
        0,
        2812,
        441,
        1,
        0,
        0,
        0,
        2813,
        2814,
        5,
        304,
        0,
        0,
        2814,
        2817,
        3,
        642,
        321,
        0,
        2815,
        2816,
        5,
        128,
        0,
        0,
        2816,
        2818,
        5,
        102,
        0,
        0,
        2817,
        2815,
        1,
        0,
        0,
        0,
        2817,
        2818,
        1,
        0,
        0,
        0,
        2818,
        443,
        1,
        0,
        0,
        0,
        2819,
        2820,
        5,
        304,
        0,
        0,
        2820,
        2823,
        3,
        642,
        321,
        0,
        2821,
        2822,
        5,
        128,
        0,
        0,
        2822,
        2824,
        5,
        102,
        0,
        0,
        2823,
        2821,
        1,
        0,
        0,
        0,
        2823,
        2824,
        1,
        0,
        0,
        0,
        2824,
        2825,
        1,
        0,
        0,
        0,
        2825,
        2826,
        5,
        287,
        0,
        0,
        2826,
        2827,
        3,
        642,
        321,
        0,
        2827,
        445,
        1,
        0,
        0,
        0,
        2828,
        2829,
        5,
        59,
        0,
        0,
        2829,
        2830,
        5,
        304,
        0,
        0,
        2830,
        2831,
        5,
        261,
        0,
        0,
        2831,
        2832,
        5,
        202,
        0,
        0,
        2832,
        2833,
        5,
        114,
        0,
        0,
        2833,
        2834,
        3,
        456,
        228,
        0,
        2834,
        2835,
        5,
        287,
        0,
        0,
        2835,
        2836,
        3,
        456,
        228,
        0,
        2836,
        447,
        1,
        0,
        0,
        0,
        2837,
        2838,
        5,
        304,
        0,
        0,
        2838,
        2841,
        3,
        642,
        321,
        0,
        2839,
        2840,
        5,
        128,
        0,
        0,
        2840,
        2842,
        5,
        102,
        0,
        0,
        2841,
        2839,
        1,
        0,
        0,
        0,
        2841,
        2842,
        1,
        0,
        0,
        0,
        2842,
        2856,
        1,
        0,
        0,
        0,
        2843,
        2852,
        5,
        234,
        0,
        0,
        2844,
        2845,
        5,
        126,
        0,
        0,
        2845,
        2853,
        5,
        62,
        0,
        0,
        2846,
        2847,
        5,
        18,
        0,
        0,
        2847,
        2849,
        5,
        28,
        0,
        0,
        2848,
        2850,
        7,
        42,
        0,
        0,
        2849,
        2848,
        1,
        0,
        0,
        0,
        2849,
        2850,
        1,
        0,
        0,
        0,
        2850,
        2853,
        1,
        0,
        0,
        0,
        2851,
        2853,
        3,
        450,
        225,
        0,
        2852,
        2844,
        1,
        0,
        0,
        0,
        2852,
        2846,
        1,
        0,
        0,
        0,
        2852,
        2851,
        1,
        0,
        0,
        0,
        2853,
        2855,
        1,
        0,
        0,
        0,
        2854,
        2843,
        1,
        0,
        0,
        0,
        2855,
        2858,
        1,
        0,
        0,
        0,
        2856,
        2854,
        1,
        0,
        0,
        0,
        2856,
        2857,
        1,
        0,
        0,
        0,
        2857,
        2870,
        1,
        0,
        0,
        0,
        2858,
        2856,
        1,
        0,
        0,
        0,
        2859,
        2866,
        5,
        261,
        0,
        0,
        2860,
        2867,
        3,
        452,
        226,
        0,
        2861,
        2862,
        5,
        202,
        0,
        0,
        2862,
        2867,
        3,
        458,
        229,
        0,
        2863,
        2867,
        3,
        460,
        230,
        0,
        2864,
        2867,
        3,
        462,
        231,
        0,
        2865,
        2867,
        3,
        464,
        232,
        0,
        2866,
        2860,
        1,
        0,
        0,
        0,
        2866,
        2861,
        1,
        0,
        0,
        0,
        2866,
        2863,
        1,
        0,
        0,
        0,
        2866,
        2864,
        1,
        0,
        0,
        0,
        2866,
        2865,
        1,
        0,
        0,
        0,
        2867,
        2869,
        1,
        0,
        0,
        0,
        2868,
        2859,
        1,
        0,
        0,
        0,
        2869,
        2872,
        1,
        0,
        0,
        0,
        2870,
        2868,
        1,
        0,
        0,
        0,
        2870,
        2871,
        1,
        0,
        0,
        0,
        2871,
        449,
        1,
        0,
        0,
        0,
        2872,
        2870,
        1,
        0,
        0,
        0,
        2873,
        2875,
        5,
        28,
        0,
        0,
        2874,
        2876,
        7,
        42,
        0,
        0,
        2875,
        2874,
        1,
        0,
        0,
        0,
        2875,
        2876,
        1,
        0,
        0,
        0,
        2876,
        2880,
        1,
        0,
        0,
        0,
        2877,
        2881,
        3,
        656,
        328,
        0,
        2878,
        2881,
        3,
        652,
        326,
        0,
        2879,
        2881,
        3,
        274,
        137,
        0,
        2880,
        2877,
        1,
        0,
        0,
        0,
        2880,
        2878,
        1,
        0,
        0,
        0,
        2880,
        2879,
        1,
        0,
        0,
        0,
        2881,
        451,
        1,
        0,
        0,
        0,
        2882,
        2884,
        7,
        43,
        0,
        0,
        2883,
        2882,
        1,
        0,
        0,
        0,
        2883,
        2884,
        1,
        0,
        0,
        0,
        2884,
        2885,
        1,
        0,
        0,
        0,
        2885,
        2886,
        5,
        202,
        0,
        0,
        2886,
        2888,
        3,
        456,
        228,
        0,
        2887,
        2889,
        3,
        458,
        229,
        0,
        2888,
        2887,
        1,
        0,
        0,
        0,
        2888,
        2889,
        1,
        0,
        0,
        0,
        2889,
        453,
        1,
        0,
        0,
        0,
        2890,
        2892,
        7,
        43,
        0,
        0,
        2891,
        2890,
        1,
        0,
        0,
        0,
        2891,
        2892,
        1,
        0,
        0,
        0,
        2892,
        2893,
        1,
        0,
        0,
        0,
        2893,
        2894,
        5,
        202,
        0,
        0,
        2894,
        2895,
        3,
        456,
        228,
        0,
        2895,
        455,
        1,
        0,
        0,
        0,
        2896,
        2899,
        3,
        656,
        328,
        0,
        2897,
        2899,
        3,
        274,
        137,
        0,
        2898,
        2896,
        1,
        0,
        0,
        0,
        2898,
        2897,
        1,
        0,
        0,
        0,
        2899,
        457,
        1,
        0,
        0,
        0,
        2900,
        2902,
        5,
        41,
        0,
        0,
        2901,
        2903,
        5,
        189,
        0,
        0,
        2902,
        2901,
        1,
        0,
        0,
        0,
        2902,
        2903,
        1,
        0,
        0,
        0,
        2903,
        2904,
        1,
        0,
        0,
        0,
        2904,
        2905,
        5,
        241,
        0,
        0,
        2905,
        459,
        1,
        0,
        0,
        0,
        2906,
        2907,
        5,
        274,
        0,
        0,
        2907,
        2908,
        7,
        44,
        0,
        0,
        2908,
        461,
        1,
        0,
        0,
        0,
        2909,
        2910,
        5,
        126,
        0,
        0,
        2910,
        2911,
        5,
        62,
        0,
        0,
        2911,
        2912,
        3,
        648,
        324,
        0,
        2912,
        463,
        1,
        0,
        0,
        0,
        2913,
        2915,
        5,
        28,
        0,
        0,
        2914,
        2916,
        5,
        220,
        0,
        0,
        2915,
        2914,
        1,
        0,
        0,
        0,
        2915,
        2916,
        1,
        0,
        0,
        0,
        2916,
        2917,
        1,
        0,
        0,
        0,
        2917,
        2918,
        3,
        656,
        328,
        0,
        2918,
        2921,
        5,
        156,
        0,
        0,
        2919,
        2920,
        5,
        261,
        0,
        0,
        2920,
        2922,
        3,
        466,
        233,
        0,
        2921,
        2919,
        1,
        0,
        0,
        0,
        2922,
        2923,
        1,
        0,
        0,
        0,
        2923,
        2921,
        1,
        0,
        0,
        0,
        2923,
        2924,
        1,
        0,
        0,
        0,
        2924,
        2925,
        1,
        0,
        0,
        0,
        2925,
        2926,
        5,
        225,
        0,
        0,
        2926,
        465,
        1,
        0,
        0,
        0,
        2927,
        2928,
        5,
        127,
        0,
        0,
        2928,
        2933,
        3,
        658,
        329,
        0,
        2929,
        2933,
        3,
        454,
        227,
        0,
        2930,
        2931,
        5,
        202,
        0,
        0,
        2931,
        2933,
        3,
        458,
        229,
        0,
        2932,
        2927,
        1,
        0,
        0,
        0,
        2932,
        2929,
        1,
        0,
        0,
        0,
        2932,
        2930,
        1,
        0,
        0,
        0,
        2933,
        467,
        1,
        0,
        0,
        0,
        2934,
        2937,
        7,
        41,
        0,
        0,
        2935,
        2936,
        5,
        314,
        0,
        0,
        2936,
        2938,
        5,
        28,
        0,
        0,
        2937,
        2935,
        1,
        0,
        0,
        0,
        2937,
        2938,
        1,
        0,
        0,
        0,
        2938,
        2940,
        1,
        0,
        0,
        0,
        2939,
        2941,
        3,
        310,
        155,
        0,
        2940,
        2939,
        1,
        0,
        0,
        0,
        2940,
        2941,
        1,
        0,
        0,
        0,
        2941,
        469,
        1,
        0,
        0,
        0,
        2942,
        2943,
        5,
        59,
        0,
        0,
        2943,
        2945,
        5,
        304,
        0,
        0,
        2944,
        2946,
        3,
        310,
        155,
        0,
        2945,
        2944,
        1,
        0,
        0,
        0,
        2945,
        2946,
        1,
        0,
        0,
        0,
        2946,
        471,
        1,
        0,
        0,
        0,
        2947,
        2948,
        5,
        277,
        0,
        0,
        2948,
        2950,
        3,
        482,
        241,
        0,
        2949,
        2951,
        3,
        310,
        155,
        0,
        2950,
        2949,
        1,
        0,
        0,
        0,
        2950,
        2951,
        1,
        0,
        0,
        0,
        2951,
        473,
        1,
        0,
        0,
        0,
        2952,
        2954,
        5,
        18,
        0,
        0,
        2953,
        2952,
        1,
        0,
        0,
        0,
        2953,
        2954,
        1,
        0,
        0,
        0,
        2954,
        2955,
        1,
        0,
        0,
        0,
        2955,
        2957,
        3,
        482,
        241,
        0,
        2956,
        2958,
        3,
        480,
        240,
        0,
        2957,
        2956,
        1,
        0,
        0,
        0,
        2957,
        2958,
        1,
        0,
        0,
        0,
        2958,
        2960,
        1,
        0,
        0,
        0,
        2959,
        2961,
        3,
        310,
        155,
        0,
        2960,
        2959,
        1,
        0,
        0,
        0,
        2960,
        2961,
        1,
        0,
        0,
        0,
        2961,
        475,
        1,
        0,
        0,
        0,
        2962,
        2963,
        7,
        37,
        0,
        0,
        2963,
        2964,
        3,
        408,
        204,
        0,
        2964,
        2966,
        3,
        482,
        241,
        0,
        2965,
        2967,
        3,
        480,
        240,
        0,
        2966,
        2965,
        1,
        0,
        0,
        0,
        2966,
        2967,
        1,
        0,
        0,
        0,
        2967,
        2969,
        1,
        0,
        0,
        0,
        2968,
        2970,
        3,
        310,
        155,
        0,
        2969,
        2968,
        1,
        0,
        0,
        0,
        2969,
        2970,
        1,
        0,
        0,
        0,
        2970,
        477,
        1,
        0,
        0,
        0,
        2971,
        2973,
        7,
        41,
        0,
        0,
        2972,
        2974,
        3,
        406,
        203,
        0,
        2973,
        2972,
        1,
        0,
        0,
        0,
        2973,
        2974,
        1,
        0,
        0,
        0,
        2974,
        2975,
        1,
        0,
        0,
        0,
        2975,
        2977,
        3,
        482,
        241,
        0,
        2976,
        2978,
        3,
        480,
        240,
        0,
        2977,
        2976,
        1,
        0,
        0,
        0,
        2977,
        2978,
        1,
        0,
        0,
        0,
        2978,
        2980,
        1,
        0,
        0,
        0,
        2979,
        2981,
        3,
        310,
        155,
        0,
        2980,
        2979,
        1,
        0,
        0,
        0,
        2980,
        2981,
        1,
        0,
        0,
        0,
        2981,
        479,
        1,
        0,
        0,
        0,
        2982,
        2984,
        5,
        23,
        0,
        0,
        2983,
        2985,
        5,
        245,
        0,
        0,
        2984,
        2983,
        1,
        0,
        0,
        0,
        2984,
        2985,
        1,
        0,
        0,
        0,
        2985,
        2986,
        1,
        0,
        0,
        0,
        2986,
        2987,
        7,
        45,
        0,
        0,
        2987,
        481,
        1,
        0,
        0,
        0,
        2988,
        2989,
        7,
        46,
        0,
        0,
        2989,
        483,
        1,
        0,
        0,
        0,
        2990,
        3002,
        3,
        486,
        243,
        0,
        2991,
        3002,
        3,
        492,
        246,
        0,
        2992,
        3002,
        3,
        518,
        259,
        0,
        2993,
        3002,
        3,
        520,
        260,
        0,
        2994,
        3002,
        3,
        504,
        252,
        0,
        2995,
        3002,
        3,
        506,
        253,
        0,
        2996,
        3002,
        3,
        550,
        275,
        0,
        2997,
        3002,
        3,
        514,
        257,
        0,
        2998,
        3002,
        3,
        510,
        255,
        0,
        2999,
        3002,
        3,
        508,
        254,
        0,
        3000,
        3002,
        3,
        516,
        258,
        0,
        3001,
        2990,
        1,
        0,
        0,
        0,
        3001,
        2991,
        1,
        0,
        0,
        0,
        3001,
        2992,
        1,
        0,
        0,
        0,
        3001,
        2993,
        1,
        0,
        0,
        0,
        3001,
        2994,
        1,
        0,
        0,
        0,
        3001,
        2995,
        1,
        0,
        0,
        0,
        3001,
        2996,
        1,
        0,
        0,
        0,
        3001,
        2997,
        1,
        0,
        0,
        0,
        3001,
        2998,
        1,
        0,
        0,
        0,
        3001,
        2999,
        1,
        0,
        0,
        0,
        3001,
        3000,
        1,
        0,
        0,
        0,
        3002,
        485,
        1,
        0,
        0,
        0,
        3003,
        3005,
        5,
        18,
        0,
        0,
        3004,
        3006,
        3,
        488,
        244,
        0,
        3005,
        3004,
        1,
        0,
        0,
        0,
        3005,
        3006,
        1,
        0,
        0,
        0,
        3006,
        3007,
        1,
        0,
        0,
        0,
        3007,
        3008,
        5,
        195,
        0,
        0,
        3008,
        3009,
        3,
        490,
        245,
        0,
        3009,
        487,
        1,
        0,
        0,
        0,
        3010,
        3012,
        7,
        47,
        0,
        0,
        3011,
        3010,
        1,
        0,
        0,
        0,
        3011,
        3012,
        1,
        0,
        0,
        0,
        3012,
        3013,
        1,
        0,
        0,
        0,
        3013,
        3014,
        5,
        215,
        0,
        0,
        3014,
        489,
        1,
        0,
        0,
        0,
        3015,
        3016,
        5,
        126,
        0,
        0,
        3016,
        3029,
        7,
        48,
        0,
        0,
        3017,
        3020,
        7,
        39,
        0,
        0,
        3018,
        3021,
        5,
        284,
        0,
        0,
        3019,
        3021,
        3,
        646,
        323,
        0,
        3020,
        3018,
        1,
        0,
        0,
        0,
        3020,
        3019,
        1,
        0,
        0,
        0,
        3021,
        3029,
        1,
        0,
        0,
        0,
        3022,
        3025,
        7,
        49,
        0,
        0,
        3023,
        3026,
        5,
        284,
        0,
        0,
        3024,
        3026,
        3,
        646,
        323,
        0,
        3025,
        3023,
        1,
        0,
        0,
        0,
        3025,
        3024,
        1,
        0,
        0,
        0,
        3026,
        3029,
        1,
        0,
        0,
        0,
        3027,
        3029,
        5,
        66,
        0,
        0,
        3028,
        3015,
        1,
        0,
        0,
        0,
        3028,
        3017,
        1,
        0,
        0,
        0,
        3028,
        3022,
        1,
        0,
        0,
        0,
        3028,
        3027,
        1,
        0,
        0,
        0,
        3029,
        491,
        1,
        0,
        0,
        0,
        3030,
        3043,
        5,
        57,
        0,
        0,
        3031,
        3032,
        3,
        494,
        247,
        0,
        3032,
        3033,
        5,
        195,
        0,
        0,
        3033,
        3034,
        3,
        568,
        284,
        0,
        3034,
        3044,
        1,
        0,
        0,
        0,
        3035,
        3036,
        3,
        502,
        251,
        0,
        3036,
        3037,
        5,
        195,
        0,
        0,
        3037,
        3038,
        5,
        66,
        0,
        0,
        3038,
        3044,
        1,
        0,
        0,
        0,
        3039,
        3040,
        5,
        195,
        0,
        0,
        3040,
        3041,
        3,
        570,
        285,
        0,
        3041,
        3042,
        3,
        558,
        279,
        0,
        3042,
        3044,
        1,
        0,
        0,
        0,
        3043,
        3031,
        1,
        0,
        0,
        0,
        3043,
        3035,
        1,
        0,
        0,
        0,
        3043,
        3039,
        1,
        0,
        0,
        0,
        3044,
        493,
        1,
        0,
        0,
        0,
        3045,
        3051,
        3,
        528,
        264,
        0,
        3046,
        3051,
        3,
        530,
        265,
        0,
        3047,
        3051,
        3,
        496,
        248,
        0,
        3048,
        3051,
        3,
        498,
        249,
        0,
        3049,
        3051,
        3,
        500,
        250,
        0,
        3050,
        3045,
        1,
        0,
        0,
        0,
        3050,
        3046,
        1,
        0,
        0,
        0,
        3050,
        3047,
        1,
        0,
        0,
        0,
        3050,
        3048,
        1,
        0,
        0,
        0,
        3050,
        3049,
        1,
        0,
        0,
        0,
        3051,
        495,
        1,
        0,
        0,
        0,
        3052,
        3054,
        5,
        182,
        0,
        0,
        3053,
        3055,
        5,
        183,
        0,
        0,
        3054,
        3053,
        1,
        0,
        0,
        0,
        3054,
        3055,
        1,
        0,
        0,
        0,
        3055,
        3056,
        1,
        0,
        0,
        0,
        3056,
        3057,
        7,
        50,
        0,
        0,
        3057,
        497,
        1,
        0,
        0,
        0,
        3058,
        3060,
        5,
        182,
        0,
        0,
        3059,
        3061,
        5,
        232,
        0,
        0,
        3060,
        3059,
        1,
        0,
        0,
        0,
        3060,
        3061,
        1,
        0,
        0,
        0,
        3061,
        3062,
        1,
        0,
        0,
        0,
        3062,
        3063,
        7,
        51,
        0,
        0,
        3063,
        499,
        1,
        0,
        0,
        0,
        3064,
        3066,
        5,
        182,
        0,
        0,
        3065,
        3067,
        5,
        219,
        0,
        0,
        3066,
        3065,
        1,
        0,
        0,
        0,
        3066,
        3067,
        1,
        0,
        0,
        0,
        3067,
        3068,
        1,
        0,
        0,
        0,
        3068,
        3069,
        7,
        52,
        0,
        0,
        3069,
        501,
        1,
        0,
        0,
        0,
        3070,
        3078,
        5,
        15,
        0,
        0,
        3071,
        3073,
        5,
        49,
        0,
        0,
        3072,
        3071,
        1,
        0,
        0,
        0,
        3072,
        3073,
        1,
        0,
        0,
        0,
        3073,
        3074,
        1,
        0,
        0,
        0,
        3074,
        3078,
        5,
        62,
        0,
        0,
        3075,
        3078,
        5,
        246,
        0,
        0,
        3076,
        3078,
        5,
        304,
        0,
        0,
        3077,
        3070,
        1,
        0,
        0,
        0,
        3077,
        3072,
        1,
        0,
        0,
        0,
        3077,
        3075,
        1,
        0,
        0,
        0,
        3077,
        3076,
        1,
        0,
        0,
        0,
        3078,
        503,
        1,
        0,
        0,
        0,
        3079,
        3091,
        5,
        84,
        0,
        0,
        3080,
        3083,
        3,
        528,
        264,
        0,
        3081,
        3083,
        3,
        530,
        265,
        0,
        3082,
        3080,
        1,
        0,
        0,
        0,
        3082,
        3081,
        1,
        0,
        0,
        0,
        3083,
        3084,
        1,
        0,
        0,
        0,
        3084,
        3085,
        5,
        195,
        0,
        0,
        3085,
        3086,
        3,
        568,
        284,
        0,
        3086,
        3092,
        1,
        0,
        0,
        0,
        3087,
        3088,
        3,
        502,
        251,
        0,
        3088,
        3089,
        5,
        195,
        0,
        0,
        3089,
        3090,
        5,
        66,
        0,
        0,
        3090,
        3092,
        1,
        0,
        0,
        0,
        3091,
        3082,
        1,
        0,
        0,
        0,
        3091,
        3087,
        1,
        0,
        0,
        0,
        3092,
        505,
        1,
        0,
        0,
        0,
        3093,
        3094,
        5,
        162,
        0,
        0,
        3094,
        3099,
        5,
        195,
        0,
        0,
        3095,
        3096,
        7,
        53,
        0,
        0,
        3096,
        3100,
        3,
        660,
        330,
        0,
        3097,
        3098,
        5,
        18,
        0,
        0,
        3098,
        3100,
        5,
        61,
        0,
        0,
        3099,
        3095,
        1,
        0,
        0,
        0,
        3099,
        3097,
        1,
        0,
        0,
        0,
        3100,
        507,
        1,
        0,
        0,
        0,
        3101,
        3126,
        5,
        268,
        0,
        0,
        3102,
        3109,
        3,
        528,
        264,
        0,
        3103,
        3109,
        3,
        530,
        265,
        0,
        3104,
        3106,
        3,
        532,
        266,
        0,
        3105,
        3107,
        3,
        534,
        267,
        0,
        3106,
        3105,
        1,
        0,
        0,
        0,
        3106,
        3107,
        1,
        0,
        0,
        0,
        3107,
        3109,
        1,
        0,
        0,
        0,
        3108,
        3102,
        1,
        0,
        0,
        0,
        3108,
        3103,
        1,
        0,
        0,
        0,
        3108,
        3104,
        1,
        0,
        0,
        0,
        3109,
        3110,
        1,
        0,
        0,
        0,
        3110,
        3111,
        5,
        195,
        0,
        0,
        3111,
        3112,
        3,
        568,
        284,
        0,
        3112,
        3127,
        1,
        0,
        0,
        0,
        3113,
        3123,
        5,
        15,
        0,
        0,
        3114,
        3123,
        5,
        214,
        0,
        0,
        3115,
        3123,
        5,
        246,
        0,
        0,
        3116,
        3123,
        5,
        259,
        0,
        0,
        3117,
        3123,
        5,
        260,
        0,
        0,
        3118,
        3119,
        3,
        358,
        179,
        0,
        3119,
        3120,
        3,
        540,
        270,
        0,
        3120,
        3123,
        1,
        0,
        0,
        0,
        3121,
        3123,
        5,
        304,
        0,
        0,
        3122,
        3113,
        1,
        0,
        0,
        0,
        3122,
        3114,
        1,
        0,
        0,
        0,
        3122,
        3115,
        1,
        0,
        0,
        0,
        3122,
        3116,
        1,
        0,
        0,
        0,
        3122,
        3117,
        1,
        0,
        0,
        0,
        3122,
        3118,
        1,
        0,
        0,
        0,
        3122,
        3121,
        1,
        0,
        0,
        0,
        3123,
        3124,
        1,
        0,
        0,
        0,
        3124,
        3125,
        5,
        195,
        0,
        0,
        3125,
        3127,
        5,
        66,
        0,
        0,
        3126,
        3108,
        1,
        0,
        0,
        0,
        3126,
        3122,
        1,
        0,
        0,
        0,
        3127,
        509,
        1,
        0,
        0,
        0,
        3128,
        3158,
        5,
        261,
        0,
        0,
        3129,
        3144,
        3,
        512,
        256,
        0,
        3130,
        3134,
        5,
        304,
        0,
        0,
        3131,
        3135,
        5,
        274,
        0,
        0,
        3132,
        3133,
        5,
        126,
        0,
        0,
        3133,
        3135,
        5,
        62,
        0,
        0,
        3134,
        3131,
        1,
        0,
        0,
        0,
        3134,
        3132,
        1,
        0,
        0,
        0,
        3135,
        3144,
        1,
        0,
        0,
        0,
        3136,
        3140,
        5,
        62,
        0,
        0,
        3137,
        3141,
        5,
        11,
        0,
        0,
        3138,
        3139,
        5,
        68,
        0,
        0,
        3139,
        3141,
        5,
        154,
        0,
        0,
        3140,
        3137,
        1,
        0,
        0,
        0,
        3140,
        3138,
        1,
        0,
        0,
        0,
        3141,
        3144,
        1,
        0,
        0,
        0,
        3142,
        3144,
        5,
        28,
        0,
        0,
        3143,
        3129,
        1,
        0,
        0,
        0,
        3143,
        3130,
        1,
        0,
        0,
        0,
        3143,
        3136,
        1,
        0,
        0,
        0,
        3143,
        3142,
        1,
        0,
        0,
        0,
        3144,
        3145,
        1,
        0,
        0,
        0,
        3145,
        3146,
        5,
        195,
        0,
        0,
        3146,
        3159,
        5,
        66,
        0,
        0,
        3147,
        3148,
        5,
        150,
        0,
        0,
        3148,
        3149,
        3,
        552,
        276,
        0,
        3149,
        3150,
        5,
        195,
        0,
        0,
        3150,
        3151,
        3,
        570,
        285,
        0,
        3151,
        3159,
        1,
        0,
        0,
        0,
        3152,
        3153,
        5,
        219,
        0,
        0,
        3153,
        3154,
        3,
        554,
        277,
        0,
        3154,
        3155,
        5,
        195,
        0,
        0,
        3155,
        3156,
        3,
        570,
        285,
        0,
        3156,
        3157,
        3,
        558,
        279,
        0,
        3157,
        3159,
        1,
        0,
        0,
        0,
        3158,
        3143,
        1,
        0,
        0,
        0,
        3158,
        3147,
        1,
        0,
        0,
        0,
        3158,
        3152,
        1,
        0,
        0,
        0,
        3159,
        511,
        1,
        0,
        0,
        0,
        3160,
        3161,
        7,
        54,
        0,
        0,
        3161,
        513,
        1,
        0,
        0,
        0,
        3162,
        3171,
        5,
        234,
        0,
        0,
        3163,
        3164,
        7,
        55,
        0,
        0,
        3164,
        3165,
        5,
        195,
        0,
        0,
        3165,
        3172,
        5,
        66,
        0,
        0,
        3166,
        3167,
        5,
        150,
        0,
        0,
        3167,
        3168,
        3,
        552,
        276,
        0,
        3168,
        3169,
        5,
        195,
        0,
        0,
        3169,
        3170,
        3,
        570,
        285,
        0,
        3170,
        3172,
        1,
        0,
        0,
        0,
        3171,
        3163,
        1,
        0,
        0,
        0,
        3171,
        3166,
        1,
        0,
        0,
        0,
        3172,
        515,
        1,
        0,
        0,
        0,
        3173,
        3174,
        5,
        316,
        0,
        0,
        3174,
        3175,
        5,
        195,
        0,
        0,
        3175,
        3176,
        3,
        570,
        285,
        0,
        3176,
        517,
        1,
        0,
        0,
        0,
        3177,
        3200,
        5,
        11,
        0,
        0,
        3178,
        3200,
        5,
        272,
        0,
        0,
        3179,
        3200,
        5,
        275,
        0,
        0,
        3180,
        3184,
        3,
        528,
        264,
        0,
        3181,
        3184,
        3,
        530,
        265,
        0,
        3182,
        3184,
        5,
        175,
        0,
        0,
        3183,
        3180,
        1,
        0,
        0,
        0,
        3183,
        3181,
        1,
        0,
        0,
        0,
        3183,
        3182,
        1,
        0,
        0,
        0,
        3184,
        3186,
        1,
        0,
        0,
        0,
        3185,
        3187,
        5,
        167,
        0,
        0,
        3186,
        3185,
        1,
        0,
        0,
        0,
        3186,
        3187,
        1,
        0,
        0,
        0,
        3187,
        3200,
        1,
        0,
        0,
        0,
        3188,
        3190,
        5,
        290,
        0,
        0,
        3189,
        3191,
        5,
        167,
        0,
        0,
        3190,
        3189,
        1,
        0,
        0,
        0,
        3190,
        3191,
        1,
        0,
        0,
        0,
        3191,
        3195,
        1,
        0,
        0,
        0,
        3192,
        3193,
        5,
        280,
        0,
        0,
        3193,
        3195,
        3,
        532,
        266,
        0,
        3194,
        3188,
        1,
        0,
        0,
        0,
        3194,
        3192,
        1,
        0,
        0,
        0,
        3195,
        3197,
        1,
        0,
        0,
        0,
        3196,
        3198,
        3,
        534,
        267,
        0,
        3197,
        3196,
        1,
        0,
        0,
        0,
        3197,
        3198,
        1,
        0,
        0,
        0,
        3198,
        3200,
        1,
        0,
        0,
        0,
        3199,
        3177,
        1,
        0,
        0,
        0,
        3199,
        3178,
        1,
        0,
        0,
        0,
        3199,
        3179,
        1,
        0,
        0,
        0,
        3199,
        3183,
        1,
        0,
        0,
        0,
        3199,
        3194,
        1,
        0,
        0,
        0,
        3200,
        3201,
        1,
        0,
        0,
        0,
        3201,
        3202,
        5,
        195,
        0,
        0,
        3202,
        3203,
        3,
        568,
        284,
        0,
        3203,
        519,
        1,
        0,
        0,
        0,
        3204,
        3211,
        5,
        19,
        0,
        0,
        3205,
        3212,
        5,
        15,
        0,
        0,
        3206,
        3208,
        5,
        49,
        0,
        0,
        3207,
        3206,
        1,
        0,
        0,
        0,
        3207,
        3208,
        1,
        0,
        0,
        0,
        3208,
        3209,
        1,
        0,
        0,
        0,
        3209,
        3212,
        5,
        62,
        0,
        0,
        3210,
        3212,
        5,
        304,
        0,
        0,
        3211,
        3205,
        1,
        0,
        0,
        0,
        3211,
        3207,
        1,
        0,
        0,
        0,
        3211,
        3210,
        1,
        0,
        0,
        0,
        3212,
        3235,
        1,
        0,
        0,
        0,
        3213,
        3214,
        5,
        26,
        0,
        0,
        3214,
        3235,
        7,
        55,
        0,
        0,
        3215,
        3225,
        5,
        15,
        0,
        0,
        3216,
        3218,
        5,
        49,
        0,
        0,
        3217,
        3216,
        1,
        0,
        0,
        0,
        3217,
        3218,
        1,
        0,
        0,
        0,
        3218,
        3219,
        1,
        0,
        0,
        0,
        3219,
        3225,
        5,
        62,
        0,
        0,
        3220,
        3225,
        5,
        214,
        0,
        0,
        3221,
        3225,
        5,
        246,
        0,
        0,
        3222,
        3225,
        5,
        259,
        0,
        0,
        3223,
        3225,
        5,
        304,
        0,
        0,
        3224,
        3215,
        1,
        0,
        0,
        0,
        3224,
        3217,
        1,
        0,
        0,
        0,
        3224,
        3220,
        1,
        0,
        0,
        0,
        3224,
        3221,
        1,
        0,
        0,
        0,
        3224,
        3222,
        1,
        0,
        0,
        0,
        3224,
        3223,
        1,
        0,
        0,
        0,
        3225,
        3226,
        1,
        0,
        0,
        0,
        3226,
        3235,
        5,
        167,
        0,
        0,
        3227,
        3235,
        3,
        522,
        261,
        0,
        3228,
        3229,
        5,
        229,
        0,
        0,
        3229,
        3235,
        7,
        56,
        0,
        0,
        3230,
        3232,
        5,
        129,
        0,
        0,
        3231,
        3233,
        3,
        534,
        267,
        0,
        3232,
        3231,
        1,
        0,
        0,
        0,
        3232,
        3233,
        1,
        0,
        0,
        0,
        3233,
        3235,
        1,
        0,
        0,
        0,
        3234,
        3204,
        1,
        0,
        0,
        0,
        3234,
        3213,
        1,
        0,
        0,
        0,
        3234,
        3224,
        1,
        0,
        0,
        0,
        3234,
        3227,
        1,
        0,
        0,
        0,
        3234,
        3228,
        1,
        0,
        0,
        0,
        3234,
        3230,
        1,
        0,
        0,
        0,
        3235,
        3236,
        1,
        0,
        0,
        0,
        3236,
        3237,
        5,
        195,
        0,
        0,
        3237,
        3238,
        5,
        66,
        0,
        0,
        3238,
        521,
        1,
        0,
        0,
        0,
        3239,
        3260,
        5,
        99,
        0,
        0,
        3240,
        3241,
        3,
        524,
        262,
        0,
        3241,
        3242,
        5,
        217,
        0,
        0,
        3242,
        3261,
        1,
        0,
        0,
        0,
        3243,
        3245,
        5,
        33,
        0,
        0,
        3244,
        3243,
        1,
        0,
        0,
        0,
        3244,
        3245,
        1,
        0,
        0,
        0,
        3245,
        3258,
        1,
        0,
        0,
        0,
        3246,
        3247,
        3,
        526,
        263,
        0,
        3247,
        3248,
        3,
        538,
        269,
        0,
        3248,
        3259,
        1,
        0,
        0,
        0,
        3249,
        3251,
        5,
        304,
        0,
        0,
        3250,
        3252,
        5,
        69,
        0,
        0,
        3251,
        3250,
        1,
        0,
        0,
        0,
        3251,
        3252,
        1,
        0,
        0,
        0,
        3252,
        3254,
        1,
        0,
        0,
        0,
        3253,
        3249,
        1,
        0,
        0,
        0,
        3253,
        3254,
        1,
        0,
        0,
        0,
        3254,
        3255,
        1,
        0,
        0,
        0,
        3255,
        3256,
        3,
        346,
        173,
        0,
        3256,
        3257,
        3,
        536,
        268,
        0,
        3257,
        3259,
        1,
        0,
        0,
        0,
        3258,
        3246,
        1,
        0,
        0,
        0,
        3258,
        3253,
        1,
        0,
        0,
        0,
        3259,
        3261,
        1,
        0,
        0,
        0,
        3260,
        3240,
        1,
        0,
        0,
        0,
        3260,
        3244,
        1,
        0,
        0,
        0,
        3261,
        523,
        1,
        0,
        0,
        0,
        3262,
        3263,
        7,
        57,
        0,
        0,
        3263,
        525,
        1,
        0,
        0,
        0,
        3264,
        3265,
        7,
        32,
        0,
        0,
        3265,
        527,
        1,
        0,
        0,
        0,
        3266,
        3267,
        7,
        58,
        0,
        0,
        3267,
        529,
        1,
        0,
        0,
        0,
        3268,
        3269,
        7,
        59,
        0,
        0,
        3269,
        531,
        1,
        0,
        0,
        0,
        3270,
        3271,
        7,
        60,
        0,
        0,
        3271,
        533,
        1,
        0,
        0,
        0,
        3272,
        3275,
        5,
        165,
        0,
        0,
        3273,
        3276,
        5,
        284,
        0,
        0,
        3274,
        3276,
        3,
        406,
        203,
        0,
        3275,
        3273,
        1,
        0,
        0,
        0,
        3275,
        3274,
        1,
        0,
        0,
        0,
        3276,
        3277,
        1,
        0,
        0,
        0,
        3277,
        3278,
        5,
        250,
        0,
        0,
        3278,
        535,
        1,
        0,
        0,
        0,
        3279,
        3280,
        3,
        542,
        271,
        0,
        3280,
        537,
        1,
        0,
        0,
        0,
        3281,
        3282,
        3,
        542,
        271,
        0,
        3282,
        539,
        1,
        0,
        0,
        0,
        3283,
        3284,
        3,
        542,
        271,
        0,
        3284,
        541,
        1,
        0,
        0,
        0,
        3285,
        3290,
        3,
        544,
        272,
        0,
        3286,
        3287,
        5,
        46,
        0,
        0,
        3287,
        3289,
        3,
        544,
        272,
        0,
        3288,
        3286,
        1,
        0,
        0,
        0,
        3289,
        3292,
        1,
        0,
        0,
        0,
        3290,
        3288,
        1,
        0,
        0,
        0,
        3290,
        3291,
        1,
        0,
        0,
        0,
        3291,
        543,
        1,
        0,
        0,
        0,
        3292,
        3290,
        1,
        0,
        0,
        0,
        3293,
        3295,
        3,
        676,
        338,
        0,
        3294,
        3296,
        3,
        546,
        273,
        0,
        3295,
        3294,
        1,
        0,
        0,
        0,
        3295,
        3296,
        1,
        0,
        0,
        0,
        3296,
        3299,
        1,
        0,
        0,
        0,
        3297,
        3299,
        3,
        546,
        273,
        0,
        3298,
        3293,
        1,
        0,
        0,
        0,
        3298,
        3297,
        1,
        0,
        0,
        0,
        3299,
        545,
        1,
        0,
        0,
        0,
        3300,
        3302,
        3,
        548,
        274,
        0,
        3301,
        3303,
        3,
        546,
        273,
        0,
        3302,
        3301,
        1,
        0,
        0,
        0,
        3302,
        3303,
        1,
        0,
        0,
        0,
        3303,
        547,
        1,
        0,
        0,
        0,
        3304,
        3306,
        5,
        80,
        0,
        0,
        3305,
        3307,
        3,
        676,
        338,
        0,
        3306,
        3305,
        1,
        0,
        0,
        0,
        3306,
        3307,
        1,
        0,
        0,
        0,
        3307,
        3312,
        1,
        0,
        0,
        0,
        3308,
        3312,
        5,
        222,
        0,
        0,
        3309,
        3312,
        5,
        284,
        0,
        0,
        3310,
        3312,
        3,
        678,
        339,
        0,
        3311,
        3304,
        1,
        0,
        0,
        0,
        3311,
        3308,
        1,
        0,
        0,
        0,
        3311,
        3309,
        1,
        0,
        0,
        0,
        3311,
        3310,
        1,
        0,
        0,
        0,
        3312,
        549,
        1,
        0,
        0,
        0,
        3313,
        3318,
        5,
        292,
        0,
        0,
        3314,
        3318,
        5,
        70,
        0,
        0,
        3315,
        3316,
        7,
        61,
        0,
        0,
        3316,
        3318,
        3,
        554,
        277,
        0,
        3317,
        3313,
        1,
        0,
        0,
        0,
        3317,
        3314,
        1,
        0,
        0,
        0,
        3317,
        3315,
        1,
        0,
        0,
        0,
        3318,
        3319,
        1,
        0,
        0,
        0,
        3319,
        3320,
        5,
        195,
        0,
        0,
        3320,
        3321,
        3,
        570,
        285,
        0,
        3321,
        3322,
        3,
        558,
        279,
        0,
        3322,
        551,
        1,
        0,
        0,
        0,
        3323,
        3326,
        5,
        284,
        0,
        0,
        3324,
        3326,
        3,
        556,
        278,
        0,
        3325,
        3323,
        1,
        0,
        0,
        0,
        3325,
        3324,
        1,
        0,
        0,
        0,
        3326,
        553,
        1,
        0,
        0,
        0,
        3327,
        3330,
        5,
        156,
        0,
        0,
        3328,
        3331,
        5,
        284,
        0,
        0,
        3329,
        3331,
        3,
        556,
        278,
        0,
        3330,
        3328,
        1,
        0,
        0,
        0,
        3330,
        3329,
        1,
        0,
        0,
        0,
        3331,
        3332,
        1,
        0,
        0,
        0,
        3332,
        3333,
        5,
        225,
        0,
        0,
        3333,
        555,
        1,
        0,
        0,
        0,
        3334,
        3339,
        3,
        674,
        337,
        0,
        3335,
        3336,
        5,
        46,
        0,
        0,
        3336,
        3338,
        3,
        674,
        337,
        0,
        3337,
        3335,
        1,
        0,
        0,
        0,
        3338,
        3341,
        1,
        0,
        0,
        0,
        3339,
        3337,
        1,
        0,
        0,
        0,
        3339,
        3340,
        1,
        0,
        0,
        0,
        3340,
        557,
        1,
        0,
        0,
        0,
        3341,
        3339,
        1,
        0,
        0,
        0,
        3342,
        3345,
        3,
        560,
        280,
        0,
        3343,
        3346,
        5,
        284,
        0,
        0,
        3344,
        3346,
        3,
        556,
        278,
        0,
        3345,
        3343,
        1,
        0,
        0,
        0,
        3345,
        3344,
        1,
        0,
        0,
        0,
        3346,
        3424,
        1,
        0,
        0,
        0,
        3347,
        3421,
        5,
        112,
        0,
        0,
        3348,
        3350,
        5,
        165,
        0,
        0,
        3349,
        3351,
        3,
        286,
        143,
        0,
        3350,
        3349,
        1,
        0,
        0,
        0,
        3350,
        3351,
        1,
        0,
        0,
        0,
        3351,
        3361,
        1,
        0,
        0,
        0,
        3352,
        3353,
        5,
        44,
        0,
        0,
        3353,
        3358,
        3,
        674,
        337,
        0,
        3354,
        3355,
        5,
        29,
        0,
        0,
        3355,
        3357,
        3,
        674,
        337,
        0,
        3356,
        3354,
        1,
        0,
        0,
        0,
        3357,
        3360,
        1,
        0,
        0,
        0,
        3358,
        3356,
        1,
        0,
        0,
        0,
        3358,
        3359,
        1,
        0,
        0,
        0,
        3359,
        3362,
        1,
        0,
        0,
        0,
        3360,
        3358,
        1,
        0,
        0,
        0,
        3361,
        3352,
        1,
        0,
        0,
        0,
        3361,
        3362,
        1,
        0,
        0,
        0,
        3362,
        3373,
        1,
        0,
        0,
        0,
        3363,
        3364,
        5,
        250,
        0,
        0,
        3364,
        3365,
        5,
        313,
        0,
        0,
        3365,
        3374,
        3,
        184,
        92,
        0,
        3366,
        3367,
        5,
        313,
        0,
        0,
        3367,
        3370,
        3,
        184,
        92,
        0,
        3368,
        3370,
        3,
        666,
        333,
        0,
        3369,
        3366,
        1,
        0,
        0,
        0,
        3369,
        3368,
        1,
        0,
        0,
        0,
        3370,
        3371,
        1,
        0,
        0,
        0,
        3371,
        3372,
        5,
        250,
        0,
        0,
        3372,
        3374,
        1,
        0,
        0,
        0,
        3373,
        3363,
        1,
        0,
        0,
        0,
        3373,
        3369,
        1,
        0,
        0,
        0,
        3374,
        3422,
        1,
        0,
        0,
        0,
        3375,
        3376,
        5,
        165,
        0,
        0,
        3376,
        3378,
        5,
        250,
        0,
        0,
        3377,
        3379,
        3,
        162,
        81,
        0,
        3378,
        3377,
        1,
        0,
        0,
        0,
        3378,
        3379,
        1,
        0,
        0,
        0,
        3379,
        3380,
        1,
        0,
        0,
        0,
        3380,
        3381,
        3,
        164,
        82,
        0,
        3381,
        3383,
        5,
        155,
        0,
        0,
        3382,
        3384,
        3,
        286,
        143,
        0,
        3383,
        3382,
        1,
        0,
        0,
        0,
        3383,
        3384,
        1,
        0,
        0,
        0,
        3384,
        3394,
        1,
        0,
        0,
        0,
        3385,
        3386,
        5,
        44,
        0,
        0,
        3386,
        3391,
        3,
        674,
        337,
        0,
        3387,
        3388,
        5,
        29,
        0,
        0,
        3388,
        3390,
        3,
        674,
        337,
        0,
        3389,
        3387,
        1,
        0,
        0,
        0,
        3390,
        3393,
        1,
        0,
        0,
        0,
        3391,
        3389,
        1,
        0,
        0,
        0,
        3391,
        3392,
        1,
        0,
        0,
        0,
        3392,
        3395,
        1,
        0,
        0,
        0,
        3393,
        3391,
        1,
        0,
        0,
        0,
        3394,
        3385,
        1,
        0,
        0,
        0,
        3394,
        3395,
        1,
        0,
        0,
        0,
        3395,
        3419,
        1,
        0,
        0,
        0,
        3396,
        3397,
        5,
        224,
        0,
        0,
        3397,
        3399,
        3,
        164,
        82,
        0,
        3398,
        3400,
        3,
        166,
        83,
        0,
        3399,
        3398,
        1,
        0,
        0,
        0,
        3399,
        3400,
        1,
        0,
        0,
        0,
        3400,
        3401,
        1,
        0,
        0,
        0,
        3401,
        3402,
        5,
        165,
        0,
        0,
        3402,
        3403,
        5,
        250,
        0,
        0,
        3403,
        3404,
        5,
        313,
        0,
        0,
        3404,
        3405,
        3,
        184,
        92,
        0,
        3405,
        3420,
        1,
        0,
        0,
        0,
        3406,
        3407,
        5,
        313,
        0,
        0,
        3407,
        3410,
        3,
        184,
        92,
        0,
        3408,
        3410,
        3,
        666,
        333,
        0,
        3409,
        3406,
        1,
        0,
        0,
        0,
        3409,
        3408,
        1,
        0,
        0,
        0,
        3410,
        3411,
        1,
        0,
        0,
        0,
        3411,
        3412,
        5,
        224,
        0,
        0,
        3412,
        3414,
        3,
        164,
        82,
        0,
        3413,
        3415,
        3,
        166,
        83,
        0,
        3414,
        3413,
        1,
        0,
        0,
        0,
        3414,
        3415,
        1,
        0,
        0,
        0,
        3415,
        3416,
        1,
        0,
        0,
        0,
        3416,
        3417,
        5,
        165,
        0,
        0,
        3417,
        3418,
        5,
        250,
        0,
        0,
        3418,
        3420,
        1,
        0,
        0,
        0,
        3419,
        3396,
        1,
        0,
        0,
        0,
        3419,
        3409,
        1,
        0,
        0,
        0,
        3420,
        3422,
        1,
        0,
        0,
        0,
        3421,
        3348,
        1,
        0,
        0,
        0,
        3421,
        3375,
        1,
        0,
        0,
        0,
        3422,
        3424,
        1,
        0,
        0,
        0,
        3423,
        3342,
        1,
        0,
        0,
        0,
        3423,
        3347,
        1,
        0,
        0,
        0,
        3423,
        3424,
        1,
        0,
        0,
        0,
        3424,
        559,
        1,
        0,
        0,
        0,
        3425,
        3429,
        3,
        562,
        281,
        0,
        3426,
        3429,
        3,
        566,
        283,
        0,
        3427,
        3429,
        3,
        564,
        282,
        0,
        3428,
        3425,
        1,
        0,
        0,
        0,
        3428,
        3426,
        1,
        0,
        0,
        0,
        3428,
        3427,
        1,
        0,
        0,
        0,
        3429,
        561,
        1,
        0,
        0,
        0,
        3430,
        3431,
        7,
        62,
        0,
        0,
        3431,
        563,
        1,
        0,
        0,
        0,
        3432,
        3433,
        7,
        63,
        0,
        0,
        3433,
        565,
        1,
        0,
        0,
        0,
        3434,
        3435,
        7,
        64,
        0,
        0,
        3435,
        567,
        1,
        0,
        0,
        0,
        3436,
        3437,
        5,
        126,
        0,
        0,
        3437,
        3444,
        5,
        62,
        0,
        0,
        3438,
        3441,
        7,
        39,
        0,
        0,
        3439,
        3442,
        5,
        284,
        0,
        0,
        3440,
        3442,
        3,
        646,
        323,
        0,
        3441,
        3439,
        1,
        0,
        0,
        0,
        3441,
        3440,
        1,
        0,
        0,
        0,
        3442,
        3444,
        1,
        0,
        0,
        0,
        3443,
        3436,
        1,
        0,
        0,
        0,
        3443,
        3438,
        1,
        0,
        0,
        0,
        3444,
        569,
        1,
        0,
        0,
        0,
        3445,
        3446,
        5,
        126,
        0,
        0,
        3446,
        3453,
        5,
        120,
        0,
        0,
        3447,
        3450,
        7,
        49,
        0,
        0,
        3448,
        3451,
        5,
        284,
        0,
        0,
        3449,
        3451,
        3,
        646,
        323,
        0,
        3450,
        3448,
        1,
        0,
        0,
        0,
        3450,
        3449,
        1,
        0,
        0,
        0,
        3451,
        3453,
        1,
        0,
        0,
        0,
        3452,
        3445,
        1,
        0,
        0,
        0,
        3452,
        3447,
        1,
        0,
        0,
        0,
        3453,
        571,
        1,
        0,
        0,
        0,
        3454,
        3455,
        5,
        49,
        0,
        0,
        3455,
        3456,
        5,
        62,
        0,
        0,
        3456,
        3460,
        3,
        620,
        310,
        0,
        3457,
        3458,
        5,
        128,
        0,
        0,
        3458,
        3459,
        5,
        189,
        0,
        0,
        3459,
        3461,
        5,
        102,
        0,
        0,
        3460,
        3457,
        1,
        0,
        0,
        0,
        3460,
        3461,
        1,
        0,
        0,
        0,
        3461,
        3466,
        1,
        0,
        0,
        0,
        3462,
        3464,
        5,
        261,
        0,
        0,
        3463,
        3462,
        1,
        0,
        0,
        0,
        3463,
        3464,
        1,
        0,
        0,
        0,
        3464,
        3465,
        1,
        0,
        0,
        0,
        3465,
        3467,
        3,
        592,
        296,
        0,
        3466,
        3463,
        1,
        0,
        0,
        0,
        3466,
        3467,
        1,
        0,
        0,
        0,
        3467,
        3469,
        1,
        0,
        0,
        0,
        3468,
        3470,
        3,
        320,
        160,
        0,
        3469,
        3468,
        1,
        0,
        0,
        0,
        3469,
        3470,
        1,
        0,
        0,
        0,
        3470,
        3472,
        1,
        0,
        0,
        0,
        3471,
        3473,
        3,
        610,
        305,
        0,
        3472,
        3471,
        1,
        0,
        0,
        0,
        3472,
        3473,
        1,
        0,
        0,
        0,
        3473,
        573,
        1,
        0,
        0,
        0,
        3474,
        3475,
        5,
        62,
        0,
        0,
        3475,
        3479,
        3,
        620,
        310,
        0,
        3476,
        3477,
        5,
        128,
        0,
        0,
        3477,
        3478,
        5,
        189,
        0,
        0,
        3478,
        3480,
        5,
        102,
        0,
        0,
        3479,
        3476,
        1,
        0,
        0,
        0,
        3479,
        3480,
        1,
        0,
        0,
        0,
        3480,
        3485,
        1,
        0,
        0,
        0,
        3481,
        3483,
        5,
        261,
        0,
        0,
        3482,
        3481,
        1,
        0,
        0,
        0,
        3482,
        3483,
        1,
        0,
        0,
        0,
        3483,
        3484,
        1,
        0,
        0,
        0,
        3484,
        3486,
        3,
        592,
        296,
        0,
        3485,
        3482,
        1,
        0,
        0,
        0,
        3485,
        3486,
        1,
        0,
        0,
        0,
        3486,
        3489,
        1,
        0,
        0,
        0,
        3487,
        3490,
        3,
        582,
        291,
        0,
        3488,
        3490,
        3,
        576,
        288,
        0,
        3489,
        3487,
        1,
        0,
        0,
        0,
        3489,
        3488,
        1,
        0,
        0,
        0,
        3489,
        3490,
        1,
        0,
        0,
        0,
        3490,
        3492,
        1,
        0,
        0,
        0,
        3491,
        3493,
        3,
        320,
        160,
        0,
        3492,
        3491,
        1,
        0,
        0,
        0,
        3492,
        3493,
        1,
        0,
        0,
        0,
        3493,
        3495,
        1,
        0,
        0,
        0,
        3494,
        3496,
        3,
        610,
        305,
        0,
        3495,
        3494,
        1,
        0,
        0,
        0,
        3495,
        3496,
        1,
        0,
        0,
        0,
        3496,
        575,
        1,
        0,
        0,
        0,
        3497,
        3499,
        5,
        261,
        0,
        0,
        3498,
        3497,
        1,
        0,
        0,
        0,
        3498,
        3499,
        1,
        0,
        0,
        0,
        3499,
        3500,
        1,
        0,
        0,
        0,
        3500,
        3502,
        3,
        578,
        289,
        0,
        3501,
        3498,
        1,
        0,
        0,
        0,
        3501,
        3502,
        1,
        0,
        0,
        0,
        3502,
        3504,
        1,
        0,
        0,
        0,
        3503,
        3505,
        5,
        261,
        0,
        0,
        3504,
        3503,
        1,
        0,
        0,
        0,
        3504,
        3505,
        1,
        0,
        0,
        0,
        3505,
        3506,
        1,
        0,
        0,
        0,
        3506,
        3507,
        3,
        580,
        290,
        0,
        3507,
        577,
        1,
        0,
        0,
        0,
        3508,
        3509,
        5,
        120,
        0,
        0,
        3509,
        3510,
        5,
        264,
        0,
        0,
        3510,
        3515,
        5,
        156,
        0,
        0,
        3511,
        3513,
        5,
        261,
        0,
        0,
        3512,
        3511,
        1,
        0,
        0,
        0,
        3512,
        3513,
        1,
        0,
        0,
        0,
        3513,
        3514,
        1,
        0,
        0,
        0,
        3514,
        3516,
        3,
        582,
        291,
        0,
        3515,
        3512,
        1,
        0,
        0,
        0,
        3515,
        3516,
        1,
        0,
        0,
        0,
        3516,
        3517,
        1,
        0,
        0,
        0,
        3517,
        3518,
        5,
        225,
        0,
        0,
        3518,
        579,
        1,
        0,
        0,
        0,
        3519,
        3520,
        5,
        219,
        0,
        0,
        3520,
        3521,
        7,
        65,
        0,
        0,
        3521,
        3522,
        5,
        156,
        0,
        0,
        3522,
        3523,
        5,
        56,
        0,
        0,
        3523,
        3531,
        5,
        5,
        0,
        0,
        3524,
        3526,
        5,
        261,
        0,
        0,
        3525,
        3524,
        1,
        0,
        0,
        0,
        3525,
        3526,
        1,
        0,
        0,
        0,
        3526,
        3527,
        1,
        0,
        0,
        0,
        3527,
        3528,
        5,
        288,
        0,
        0,
        3528,
        3529,
        3,
        662,
        331,
        0,
        3529,
        3530,
        7,
        66,
        0,
        0,
        3530,
        3532,
        1,
        0,
        0,
        0,
        3531,
        3525,
        1,
        0,
        0,
        0,
        3531,
        3532,
        1,
        0,
        0,
        0,
        3532,
        3533,
        1,
        0,
        0,
        0,
        3533,
        3534,
        5,
        225,
        0,
        0,
        3534,
        581,
        1,
        0,
        0,
        0,
        3535,
        3537,
        5,
        261,
        0,
        0,
        3536,
        3535,
        1,
        0,
        0,
        0,
        3536,
        3537,
        1,
        0,
        0,
        0,
        3537,
        3538,
        1,
        0,
        0,
        0,
        3538,
        3541,
        5,
        288,
        0,
        0,
        3539,
        3542,
        3,
        584,
        292,
        0,
        3540,
        3542,
        3,
        588,
        294,
        0,
        3541,
        3539,
        1,
        0,
        0,
        0,
        3541,
        3540,
        1,
        0,
        0,
        0,
        3542,
        3543,
        1,
        0,
        0,
        0,
        3543,
        3541,
        1,
        0,
        0,
        0,
        3543,
        3544,
        1,
        0,
        0,
        0,
        3544,
        583,
        1,
        0,
        0,
        0,
        3545,
        3546,
        3,
        662,
        331,
        0,
        3546,
        3547,
        3,
        586,
        293,
        0,
        3547,
        585,
        1,
        0,
        0,
        0,
        3548,
        3549,
        7,
        67,
        0,
        0,
        3549,
        587,
        1,
        0,
        0,
        0,
        3550,
        3551,
        3,
        662,
        331,
        0,
        3551,
        3552,
        3,
        590,
        295,
        0,
        3552,
        589,
        1,
        0,
        0,
        0,
        3553,
        3554,
        7,
        68,
        0,
        0,
        3554,
        591,
        1,
        0,
        0,
        0,
        3555,
        3556,
        5,
        68,
        0,
        0,
        3556,
        3557,
        5,
        154,
        0,
        0,
        3557,
        3558,
        5,
        60,
        0,
        0,
        3558,
        3559,
        5,
        5,
        0,
        0,
        3559,
        593,
        1,
        0,
        0,
        0,
        3560,
        3562,
        5,
        49,
        0,
        0,
        3561,
        3560,
        1,
        0,
        0,
        0,
        3561,
        3562,
        1,
        0,
        0,
        0,
        3562,
        3563,
        1,
        0,
        0,
        0,
        3563,
        3564,
        5,
        62,
        0,
        0,
        3564,
        3567,
        3,
        648,
        324,
        0,
        3565,
        3566,
        5,
        128,
        0,
        0,
        3566,
        3568,
        5,
        102,
        0,
        0,
        3567,
        3565,
        1,
        0,
        0,
        0,
        3567,
        3568,
        1,
        0,
        0,
        0,
        3568,
        3570,
        1,
        0,
        0,
        0,
        3569,
        3571,
        3,
        596,
        298,
        0,
        3570,
        3569,
        1,
        0,
        0,
        0,
        3570,
        3571,
        1,
        0,
        0,
        0,
        3571,
        3574,
        1,
        0,
        0,
        0,
        3572,
        3573,
        7,
        69,
        0,
        0,
        3573,
        3575,
        5,
        61,
        0,
        0,
        3574,
        3572,
        1,
        0,
        0,
        0,
        3574,
        3575,
        1,
        0,
        0,
        0,
        3575,
        3577,
        1,
        0,
        0,
        0,
        3576,
        3578,
        3,
        610,
        305,
        0,
        3577,
        3576,
        1,
        0,
        0,
        0,
        3577,
        3578,
        1,
        0,
        0,
        0,
        3578,
        595,
        1,
        0,
        0,
        0,
        3579,
        3583,
        5,
        242,
        0,
        0,
        3580,
        3581,
        5,
        39,
        0,
        0,
        3581,
        3583,
        7,
        70,
        0,
        0,
        3582,
        3579,
        1,
        0,
        0,
        0,
        3582,
        3580,
        1,
        0,
        0,
        0,
        3583,
        597,
        1,
        0,
        0,
        0,
        3584,
        3585,
        5,
        62,
        0,
        0,
        3585,
        3588,
        3,
        648,
        324,
        0,
        3586,
        3587,
        5,
        128,
        0,
        0,
        3587,
        3589,
        5,
        102,
        0,
        0,
        3588,
        3586,
        1,
        0,
        0,
        0,
        3588,
        3589,
        1,
        0,
        0,
        0,
        3589,
        3608,
        1,
        0,
        0,
        0,
        3590,
        3595,
        5,
        261,
        0,
        0,
        3591,
        3596,
        3,
        600,
        300,
        0,
        3592,
        3596,
        3,
        602,
        301,
        0,
        3593,
        3596,
        3,
        604,
        302,
        0,
        3594,
        3596,
        3,
        592,
        296,
        0,
        3595,
        3591,
        1,
        0,
        0,
        0,
        3595,
        3592,
        1,
        0,
        0,
        0,
        3595,
        3593,
        1,
        0,
        0,
        0,
        3595,
        3594,
        1,
        0,
        0,
        0,
        3596,
        3598,
        1,
        0,
        0,
        0,
        3597,
        3590,
        1,
        0,
        0,
        0,
        3598,
        3599,
        1,
        0,
        0,
        0,
        3599,
        3597,
        1,
        0,
        0,
        0,
        3599,
        3600,
        1,
        0,
        0,
        0,
        3600,
        3609,
        1,
        0,
        0,
        0,
        3601,
        3602,
        5,
        234,
        0,
        0,
        3602,
        3603,
        5,
        199,
        0,
        0,
        3603,
        3605,
        3,
        674,
        337,
        0,
        3604,
        3601,
        1,
        0,
        0,
        0,
        3605,
        3606,
        1,
        0,
        0,
        0,
        3606,
        3604,
        1,
        0,
        0,
        0,
        3606,
        3607,
        1,
        0,
        0,
        0,
        3607,
        3609,
        1,
        0,
        0,
        0,
        3608,
        3597,
        1,
        0,
        0,
        0,
        3608,
        3604,
        1,
        0,
        0,
        0,
        3609,
        3611,
        1,
        0,
        0,
        0,
        3610,
        3612,
        3,
        610,
        305,
        0,
        3611,
        3610,
        1,
        0,
        0,
        0,
        3611,
        3612,
        1,
        0,
        0,
        0,
        3612,
        599,
        1,
        0,
        0,
        0,
        3613,
        3614,
        5,
        11,
        0,
        0,
        3614,
        3615,
        5,
        226,
        0,
        0,
        3615,
        3616,
        7,
        71,
        0,
        0,
        3616,
        601,
        1,
        0,
        0,
        0,
        3617,
        3620,
        5,
        288,
        0,
        0,
        3618,
        3621,
        3,
        584,
        292,
        0,
        3619,
        3621,
        3,
        588,
        294,
        0,
        3620,
        3618,
        1,
        0,
        0,
        0,
        3620,
        3619,
        1,
        0,
        0,
        0,
        3621,
        3622,
        1,
        0,
        0,
        0,
        3622,
        3620,
        1,
        0,
        0,
        0,
        3622,
        3623,
        1,
        0,
        0,
        0,
        3623,
        603,
        1,
        0,
        0,
        0,
        3624,
        3625,
        5,
        199,
        0,
        0,
        3625,
        3626,
        3,
        674,
        337,
        0,
        3626,
        3627,
        3,
        184,
        92,
        0,
        3627,
        605,
        1,
        0,
        0,
        0,
        3628,
        3629,
        5,
        272,
        0,
        0,
        3629,
        3630,
        5,
        62,
        0,
        0,
        3630,
        3632,
        3,
        648,
        324,
        0,
        3631,
        3633,
        3,
        610,
        305,
        0,
        3632,
        3631,
        1,
        0,
        0,
        0,
        3632,
        3633,
        1,
        0,
        0,
        0,
        3633,
        607,
        1,
        0,
        0,
        0,
        3634,
        3635,
        5,
        275,
        0,
        0,
        3635,
        3636,
        5,
        62,
        0,
        0,
        3636,
        3638,
        3,
        648,
        324,
        0,
        3637,
        3639,
        3,
        610,
        305,
        0,
        3638,
        3637,
        1,
        0,
        0,
        0,
        3638,
        3639,
        1,
        0,
        0,
        0,
        3639,
        609,
        1,
        0,
        0,
        0,
        3640,
        3645,
        5,
        311,
        0,
        0,
        3641,
        3643,
        5,
        5,
        0,
        0,
        3642,
        3644,
        3,
        612,
        306,
        0,
        3643,
        3642,
        1,
        0,
        0,
        0,
        3643,
        3644,
        1,
        0,
        0,
        0,
        3644,
        3646,
        1,
        0,
        0,
        0,
        3645,
        3641,
        1,
        0,
        0,
        0,
        3645,
        3646,
        1,
        0,
        0,
        0,
        3646,
        3649,
        1,
        0,
        0,
        0,
        3647,
        3649,
        5,
        191,
        0,
        0,
        3648,
        3640,
        1,
        0,
        0,
        0,
        3648,
        3647,
        1,
        0,
        0,
        0,
        3649,
        611,
        1,
        0,
        0,
        0,
        3650,
        3651,
        7,
        72,
        0,
        0,
        3651,
        613,
        1,
        0,
        0,
        0,
        3652,
        3653,
        7,
        73,
        0,
        0,
        3653,
        3655,
        5,
        62,
        0,
        0,
        3654,
        3656,
        3,
        310,
        155,
        0,
        3655,
        3654,
        1,
        0,
        0,
        0,
        3655,
        3656,
        1,
        0,
        0,
        0,
        3656,
        3665,
        1,
        0,
        0,
        0,
        3657,
        3659,
        7,
        39,
        0,
        0,
        3658,
        3660,
        3,
        648,
        324,
        0,
        3659,
        3658,
        1,
        0,
        0,
        0,
        3659,
        3660,
        1,
        0,
        0,
        0,
        3660,
        3662,
        1,
        0,
        0,
        0,
        3661,
        3663,
        3,
        310,
        155,
        0,
        3662,
        3661,
        1,
        0,
        0,
        0,
        3662,
        3663,
        1,
        0,
        0,
        0,
        3663,
        3665,
        1,
        0,
        0,
        0,
        3664,
        3652,
        1,
        0,
        0,
        0,
        3664,
        3657,
        1,
        0,
        0,
        0,
        3665,
        615,
        1,
        0,
        0,
        0,
        3666,
        3667,
        3,
        648,
        324,
        0,
        3667,
        617,
        1,
        0,
        0,
        0,
        3668,
        3669,
        3,
        648,
        324,
        0,
        3669,
        619,
        1,
        0,
        0,
        0,
        3670,
        3671,
        3,
        640,
        320,
        0,
        3671,
        621,
        1,
        0,
        0,
        0,
        3672,
        3673,
        5,
        15,
        0,
        0,
        3673,
        3677,
        3,
        616,
        308,
        0,
        3674,
        3675,
        5,
        128,
        0,
        0,
        3675,
        3676,
        5,
        189,
        0,
        0,
        3676,
        3678,
        5,
        102,
        0,
        0,
        3677,
        3674,
        1,
        0,
        0,
        0,
        3677,
        3678,
        1,
        0,
        0,
        0,
        3678,
        3679,
        1,
        0,
        0,
        0,
        3679,
        3680,
        5,
        112,
        0,
        0,
        3680,
        3681,
        5,
        62,
        0,
        0,
        3681,
        3695,
        3,
        618,
        309,
        0,
        3682,
        3683,
        5,
        27,
        0,
        0,
        3683,
        3684,
        3,
        660,
        330,
        0,
        3684,
        3685,
        5,
        304,
        0,
        0,
        3685,
        3686,
        3,
        642,
        321,
        0,
        3686,
        3687,
        5,
        202,
        0,
        0,
        3687,
        3690,
        3,
        456,
        228,
        0,
        3688,
        3689,
        5,
        83,
        0,
        0,
        3689,
        3691,
        3,
        664,
        332,
        0,
        3690,
        3688,
        1,
        0,
        0,
        0,
        3690,
        3691,
        1,
        0,
        0,
        0,
        3691,
        3693,
        1,
        0,
        0,
        0,
        3692,
        3694,
        3,
        592,
        296,
        0,
        3693,
        3692,
        1,
        0,
        0,
        0,
        3693,
        3694,
        1,
        0,
        0,
        0,
        3694,
        3696,
        1,
        0,
        0,
        0,
        3695,
        3682,
        1,
        0,
        0,
        0,
        3695,
        3696,
        1,
        0,
        0,
        0,
        3696,
        3699,
        1,
        0,
        0,
        0,
        3697,
        3698,
        5,
        218,
        0,
        0,
        3698,
        3700,
        3,
        664,
        332,
        0,
        3699,
        3697,
        1,
        0,
        0,
        0,
        3699,
        3700,
        1,
        0,
        0,
        0,
        3700,
        623,
        1,
        0,
        0,
        0,
        3701,
        3702,
        5,
        15,
        0,
        0,
        3702,
        3705,
        3,
        616,
        308,
        0,
        3703,
        3704,
        5,
        128,
        0,
        0,
        3704,
        3706,
        5,
        102,
        0,
        0,
        3705,
        3703,
        1,
        0,
        0,
        0,
        3705,
        3706,
        1,
        0,
        0,
        0,
        3706,
        3707,
        1,
        0,
        0,
        0,
        3707,
        3708,
        5,
        112,
        0,
        0,
        3708,
        3709,
        5,
        62,
        0,
        0,
        3709,
        625,
        1,
        0,
        0,
        0,
        3710,
        3711,
        5,
        15,
        0,
        0,
        3711,
        3714,
        3,
        616,
        308,
        0,
        3712,
        3713,
        5,
        128,
        0,
        0,
        3713,
        3715,
        5,
        102,
        0,
        0,
        3714,
        3712,
        1,
        0,
        0,
        0,
        3714,
        3715,
        1,
        0,
        0,
        0,
        3715,
        3716,
        1,
        0,
        0,
        0,
        3716,
        3717,
        5,
        261,
        0,
        0,
        3717,
        3724,
        5,
        62,
        0,
        0,
        3718,
        3725,
        3,
        628,
        314,
        0,
        3719,
        3725,
        3,
        630,
        315,
        0,
        3720,
        3725,
        3,
        632,
        316,
        0,
        3721,
        3725,
        3,
        634,
        317,
        0,
        3722,
        3725,
        3,
        636,
        318,
        0,
        3723,
        3725,
        3,
        592,
        296,
        0,
        3724,
        3718,
        1,
        0,
        0,
        0,
        3724,
        3719,
        1,
        0,
        0,
        0,
        3724,
        3720,
        1,
        0,
        0,
        0,
        3724,
        3721,
        1,
        0,
        0,
        0,
        3724,
        3722,
        1,
        0,
        0,
        0,
        3724,
        3723,
        1,
        0,
        0,
        0,
        3725,
        3726,
        1,
        0,
        0,
        0,
        3726,
        3724,
        1,
        0,
        0,
        0,
        3726,
        3727,
        1,
        0,
        0,
        0,
        3727,
        627,
        1,
        0,
        0,
        0,
        3728,
        3729,
        5,
        279,
        0,
        0,
        3729,
        3732,
        3,
        618,
        309,
        0,
        3730,
        3731,
        5,
        27,
        0,
        0,
        3731,
        3733,
        3,
        660,
        330,
        0,
        3732,
        3730,
        1,
        0,
        0,
        0,
        3732,
        3733,
        1,
        0,
        0,
        0,
        3733,
        629,
        1,
        0,
        0,
        0,
        3734,
        3735,
        5,
        304,
        0,
        0,
        3735,
        3736,
        3,
        642,
        321,
        0,
        3736,
        631,
        1,
        0,
        0,
        0,
        3737,
        3738,
        5,
        202,
        0,
        0,
        3738,
        3739,
        3,
        456,
        228,
        0,
        3739,
        633,
        1,
        0,
        0,
        0,
        3740,
        3741,
        5,
        83,
        0,
        0,
        3741,
        3742,
        3,
        664,
        332,
        0,
        3742,
        635,
        1,
        0,
        0,
        0,
        3743,
        3744,
        5,
        218,
        0,
        0,
        3744,
        3745,
        3,
        664,
        332,
        0,
        3745,
        637,
        1,
        0,
        0,
        0,
        3746,
        3748,
        7,
        70,
        0,
        0,
        3747,
        3749,
        3,
        616,
        308,
        0,
        3748,
        3747,
        1,
        0,
        0,
        0,
        3748,
        3749,
        1,
        0,
        0,
        0,
        3749,
        3750,
        1,
        0,
        0,
        0,
        3750,
        3751,
        5,
        112,
        0,
        0,
        3751,
        3753,
        7,
        39,
        0,
        0,
        3752,
        3754,
        3,
        310,
        155,
        0,
        3753,
        3752,
        1,
        0,
        0,
        0,
        3753,
        3754,
        1,
        0,
        0,
        0,
        3754,
        639,
        1,
        0,
        0,
        0,
        3755,
        3758,
        3,
        674,
        337,
        0,
        3756,
        3758,
        3,
        274,
        137,
        0,
        3757,
        3755,
        1,
        0,
        0,
        0,
        3757,
        3756,
        1,
        0,
        0,
        0,
        3758,
        641,
        1,
        0,
        0,
        0,
        3759,
        3762,
        3,
        674,
        337,
        0,
        3760,
        3762,
        3,
        274,
        137,
        0,
        3761,
        3759,
        1,
        0,
        0,
        0,
        3761,
        3760,
        1,
        0,
        0,
        0,
        3762,
        643,
        1,
        0,
        0,
        0,
        3763,
        3768,
        3,
        642,
        321,
        0,
        3764,
        3765,
        5,
        46,
        0,
        0,
        3765,
        3767,
        3,
        642,
        321,
        0,
        3766,
        3764,
        1,
        0,
        0,
        0,
        3767,
        3770,
        1,
        0,
        0,
        0,
        3768,
        3766,
        1,
        0,
        0,
        0,
        3768,
        3769,
        1,
        0,
        0,
        0,
        3769,
        645,
        1,
        0,
        0,
        0,
        3770,
        3768,
        1,
        0,
        0,
        0,
        3771,
        3776,
        3,
        648,
        324,
        0,
        3772,
        3773,
        5,
        46,
        0,
        0,
        3773,
        3775,
        3,
        648,
        324,
        0,
        3774,
        3772,
        1,
        0,
        0,
        0,
        3775,
        3778,
        1,
        0,
        0,
        0,
        3776,
        3774,
        1,
        0,
        0,
        0,
        3776,
        3777,
        1,
        0,
        0,
        0,
        3777,
        647,
        1,
        0,
        0,
        0,
        3778,
        3776,
        1,
        0,
        0,
        0,
        3779,
        3782,
        3,
        650,
        325,
        0,
        3780,
        3782,
        3,
        274,
        137,
        0,
        3781,
        3779,
        1,
        0,
        0,
        0,
        3781,
        3780,
        1,
        0,
        0,
        0,
        3782,
        649,
        1,
        0,
        0,
        0,
        3783,
        3788,
        3,
        674,
        337,
        0,
        3784,
        3785,
        5,
        80,
        0,
        0,
        3785,
        3787,
        3,
        674,
        337,
        0,
        3786,
        3784,
        1,
        0,
        0,
        0,
        3787,
        3790,
        1,
        0,
        0,
        0,
        3788,
        3786,
        1,
        0,
        0,
        0,
        3788,
        3789,
        1,
        0,
        0,
        0,
        3789,
        651,
        1,
        0,
        0,
        0,
        3790,
        3788,
        1,
        0,
        0,
        0,
        3791,
        3800,
        5,
        155,
        0,
        0,
        3792,
        3797,
        3,
        656,
        328,
        0,
        3793,
        3794,
        5,
        46,
        0,
        0,
        3794,
        3796,
        3,
        656,
        328,
        0,
        3795,
        3793,
        1,
        0,
        0,
        0,
        3796,
        3799,
        1,
        0,
        0,
        0,
        3797,
        3795,
        1,
        0,
        0,
        0,
        3797,
        3798,
        1,
        0,
        0,
        0,
        3798,
        3801,
        1,
        0,
        0,
        0,
        3799,
        3797,
        1,
        0,
        0,
        0,
        3800,
        3792,
        1,
        0,
        0,
        0,
        3800,
        3801,
        1,
        0,
        0,
        0,
        3801,
        3802,
        1,
        0,
        0,
        0,
        3802,
        3803,
        5,
        224,
        0,
        0,
        3803,
        653,
        1,
        0,
        0,
        0,
        3804,
        3807,
        3,
        656,
        328,
        0,
        3805,
        3806,
        5,
        46,
        0,
        0,
        3806,
        3808,
        3,
        656,
        328,
        0,
        3807,
        3805,
        1,
        0,
        0,
        0,
        3808,
        3809,
        1,
        0,
        0,
        0,
        3809,
        3807,
        1,
        0,
        0,
        0,
        3809,
        3810,
        1,
        0,
        0,
        0,
        3810,
        655,
        1,
        0,
        0,
        0,
        3811,
        3812,
        7,
        74,
        0,
        0,
        3812,
        657,
        1,
        0,
        0,
        0,
        3813,
        3816,
        3,
        656,
        328,
        0,
        3814,
        3816,
        3,
        274,
        137,
        0,
        3815,
        3813,
        1,
        0,
        0,
        0,
        3815,
        3814,
        1,
        0,
        0,
        0,
        3816,
        659,
        1,
        0,
        0,
        0,
        3817,
        3820,
        3,
        656,
        328,
        0,
        3818,
        3820,
        3,
        274,
        137,
        0,
        3819,
        3817,
        1,
        0,
        0,
        0,
        3819,
        3818,
        1,
        0,
        0,
        0,
        3820,
        661,
        1,
        0,
        0,
        0,
        3821,
        3824,
        5,
        5,
        0,
        0,
        3822,
        3824,
        3,
        274,
        137,
        0,
        3823,
        3821,
        1,
        0,
        0,
        0,
        3823,
        3822,
        1,
        0,
        0,
        0,
        3824,
        663,
        1,
        0,
        0,
        0,
        3825,
        3828,
        3,
        666,
        333,
        0,
        3826,
        3828,
        3,
        274,
        137,
        0,
        3827,
        3825,
        1,
        0,
        0,
        0,
        3827,
        3826,
        1,
        0,
        0,
        0,
        3828,
        665,
        1,
        0,
        0,
        0,
        3829,
        3843,
        5,
        156,
        0,
        0,
        3830,
        3831,
        3,
        272,
        136,
        0,
        3831,
        3832,
        5,
        44,
        0,
        0,
        3832,
        3840,
        3,
        184,
        92,
        0,
        3833,
        3834,
        5,
        46,
        0,
        0,
        3834,
        3835,
        3,
        272,
        136,
        0,
        3835,
        3836,
        5,
        44,
        0,
        0,
        3836,
        3837,
        3,
        184,
        92,
        0,
        3837,
        3839,
        1,
        0,
        0,
        0,
        3838,
        3833,
        1,
        0,
        0,
        0,
        3839,
        3842,
        1,
        0,
        0,
        0,
        3840,
        3838,
        1,
        0,
        0,
        0,
        3840,
        3841,
        1,
        0,
        0,
        0,
        3841,
        3844,
        1,
        0,
        0,
        0,
        3842,
        3840,
        1,
        0,
        0,
        0,
        3843,
        3830,
        1,
        0,
        0,
        0,
        3843,
        3844,
        1,
        0,
        0,
        0,
        3844,
        3845,
        1,
        0,
        0,
        0,
        3845,
        3846,
        5,
        225,
        0,
        0,
        3846,
        667,
        1,
        0,
        0,
        0,
        3847,
        3850,
        3,
        670,
        335,
        0,
        3848,
        3850,
        3,
        672,
        336,
        0,
        3849,
        3847,
        1,
        0,
        0,
        0,
        3849,
        3848,
        1,
        0,
        0,
        0,
        3850,
        669,
        1,
        0,
        0,
        0,
        3851,
        3852,
        3,
        676,
        338,
        0,
        3852,
        671,
        1,
        0,
        0,
        0,
        3853,
        3854,
        3,
        678,
        339,
        0,
        3854,
        673,
        1,
        0,
        0,
        0,
        3855,
        3858,
        3,
        676,
        338,
        0,
        3856,
        3858,
        3,
        678,
        339,
        0,
        3857,
        3855,
        1,
        0,
        0,
        0,
        3857,
        3856,
        1,
        0,
        0,
        0,
        3858,
        675,
        1,
        0,
        0,
        0,
        3859,
        3860,
        5,
        10,
        0,
        0,
        3860,
        677,
        1,
        0,
        0,
        0,
        3861,
        3862,
        3,
        680,
        340,
        0,
        3862,
        679,
        1,
        0,
        0,
        0,
        3863,
        3864,
        7,
        75,
        0,
        0,
        3864,
        681,
        1,
        0,
        0,
        0,
        3865,
        3866,
        5,
        0,
        0,
        1,
        3866,
        683,
        1,
        0,
        0,
        0,
        498,
        689,
        693,
        699,
        703,
        708,
        713,
        719,
        722,
        735,
        738,
        744,
        765,
        769,
        779,
        787,
        791,
        794,
        797,
        802,
        806,
        812,
        818,
        831,
        846,
        860,
        885,
        893,
        904,
        907,
        915,
        919,
        923,
        929,
        933,
        938,
        941,
        946,
        949,
        951,
        961,
        964,
        979,
        986,
        995,
        1010,
        1018,
        1028,
        1031,
        1034,
        1043,
        1047,
        1049,
        1051,
        1061,
        1067,
        1075,
        1086,
        1091,
        1095,
        1101,
        1110,
        1113,
        1119,
        1122,
        1128,
        1130,
        1141,
        1145,
        1150,
        1153,
        1165,
        1168,
        1172,
        1175,
        1182,
        1190,
        1196,
        1199,
        1206,
        1214,
        1222,
        1226,
        1231,
        1235,
        1245,
        1251,
        1255,
        1257,
        1262,
        1267,
        1271,
        1274,
        1278,
        1282,
        1285,
        1291,
        1293,
        1297,
        1309,
        1318,
        1321,
        1324,
        1328,
        1331,
        1340,
        1343,
        1346,
        1349,
        1355,
        1359,
        1363,
        1365,
        1370,
        1374,
        1376,
        1386,
        1406,
        1409,
        1419,
        1422,
        1425,
        1428,
        1432,
        1435,
        1439,
        1442,
        1452,
        1456,
        1460,
        1464,
        1474,
        1478,
        1481,
        1489,
        1494,
        1502,
        1508,
        1520,
        1528,
        1539,
        1547,
        1555,
        1561,
        1571,
        1576,
        1585,
        1590,
        1595,
        1599,
        1604,
        1607,
        1611,
        1620,
        1628,
        1636,
        1642,
        1648,
        1658,
        1662,
        1665,
        1678,
        1705,
        1716,
        1722,
        1726,
        1740,
        1744,
        1754,
        1764,
        1772,
        1778,
        1780,
        1788,
        1793,
        1819,
        1828,
        1844,
        1847,
        1850,
        1870,
        1873,
        1885,
        1896,
        1900,
        1902,
        1910,
        1914,
        1916,
        1926,
        1931,
        1941,
        1944,
        1957,
        1962,
        1969,
        1972,
        1986,
        1996,
        2004,
        2009,
        2014,
        2025,
        2039,
        2046,
        2063,
        2068,
        2092,
        2099,
        2101,
        2106,
        2110,
        2114,
        2128,
        2131,
        2134,
        2149,
        2154,
        2163,
        2173,
        2192,
        2196,
        2199,
        2204,
        2219,
        2222,
        2225,
        2228,
        2231,
        2234,
        2244,
        2253,
        2256,
        2264,
        2267,
        2270,
        2274,
        2280,
        2285,
        2291,
        2294,
        2298,
        2302,
        2310,
        2314,
        2317,
        2321,
        2324,
        2327,
        2330,
        2334,
        2337,
        2340,
        2349,
        2351,
        2358,
        2366,
        2369,
        2377,
        2381,
        2383,
        2386,
        2390,
        2400,
        2409,
        2416,
        2421,
        2426,
        2430,
        2437,
        2445,
        2453,
        2463,
        2469,
        2491,
        2494,
        2499,
        2504,
        2509,
        2512,
        2517,
        2522,
        2530,
        2540,
        2548,
        2559,
        2565,
        2571,
        2576,
        2581,
        2588,
        2599,
        2607,
        2613,
        2619,
        2628,
        2638,
        2647,
        2653,
        2657,
        2666,
        2670,
        2678,
        2681,
        2690,
        2702,
        2719,
        2722,
        2726,
        2737,
        2744,
        2751,
        2757,
        2763,
        2769,
        2775,
        2780,
        2783,
        2798,
        2807,
        2811,
        2817,
        2823,
        2841,
        2849,
        2852,
        2856,
        2866,
        2870,
        2875,
        2880,
        2883,
        2888,
        2891,
        2898,
        2902,
        2915,
        2923,
        2932,
        2937,
        2940,
        2945,
        2950,
        2953,
        2957,
        2960,
        2966,
        2969,
        2973,
        2977,
        2980,
        2984,
        3001,
        3005,
        3011,
        3020,
        3025,
        3028,
        3043,
        3050,
        3054,
        3060,
        3066,
        3072,
        3077,
        3082,
        3091,
        3099,
        3106,
        3108,
        3122,
        3126,
        3134,
        3140,
        3143,
        3158,
        3171,
        3183,
        3186,
        3190,
        3194,
        3197,
        3199,
        3207,
        3211,
        3217,
        3224,
        3232,
        3234,
        3244,
        3251,
        3253,
        3258,
        3260,
        3275,
        3290,
        3295,
        3298,
        3302,
        3306,
        3311,
        3317,
        3325,
        3330,
        3339,
        3345,
        3350,
        3358,
        3361,
        3369,
        3373,
        3378,
        3383,
        3391,
        3394,
        3399,
        3409,
        3414,
        3419,
        3421,
        3423,
        3428,
        3441,
        3443,
        3450,
        3452,
        3460,
        3463,
        3466,
        3469,
        3472,
        3479,
        3482,
        3485,
        3489,
        3492,
        3495,
        3498,
        3501,
        3504,
        3512,
        3515,
        3525,
        3531,
        3536,
        3541,
        3543,
        3561,
        3567,
        3570,
        3574,
        3577,
        3582,
        3588,
        3595,
        3599,
        3606,
        3608,
        3611,
        3620,
        3622,
        3632,
        3638,
        3643,
        3645,
        3648,
        3655,
        3659,
        3662,
        3664,
        3677,
        3690,
        3693,
        3695,
        3699,
        3705,
        3714,
        3724,
        3726,
        3732,
        3748,
        3753,
        3757,
        3761,
        3768,
        3776,
        3781,
        3788,
        3797,
        3800,
        3809,
        3815,
        3819,
        3823,
        3827,
        3840,
        3843,
        3849,
        3857,
    ]


class Cypher25Parser(Parser):
    grammarFileName = 'Cypher25Parser.g4'

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'|'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "':'",
        "'::'",
        "','",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'$'",
        '<INVALID>',
        "'/'",
        "'.'",
        "'..'",
        "'||'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'='",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'>='",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'>'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'&'",
        "'!'",
        '<INVALID>',
        "'['",
        "'{'",
        "'<='",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'('",
        "'<'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'-'",
        "'%'",
        "'!='",
        "'<>'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'+'",
        "'+='",
        '<INVALID>',
        '<INVALID>',
        "'^'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'?'",
        '<INVALID>',
        "']'",
        "'}'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'=~'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "')'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "';'",
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        '<INVALID>',
        "'*'",
    ]

    symbolicNames = [
        '<INVALID>',
        'SPACE',
        'SINGLE_LINE_COMMENT',
        'MULTI_LINE_COMMENT',
        'DECIMAL_DOUBLE',
        'UNSIGNED_DECIMAL_INTEGER',
        'UNSIGNED_HEX_INTEGER',
        'UNSIGNED_OCTAL_INTEGER',
        'STRING_LITERAL1',
        'STRING_LITERAL2',
        'ESCAPED_SYMBOLIC_NAME',
        'ACCESS',
        'ACTIVE',
        'ADMIN',
        'ADMINISTRATOR',
        'ALIAS',
        'ALIASES',
        'ALL_SHORTEST_PATHS',
        'ALL',
        'ALTER',
        'AND',
        'ANY',
        'ARRAY',
        'AS',
        'ASC',
        'ASCENDING',
        'ASSIGN',
        'AT',
        'AUTH',
        'BAR',
        'BINDINGS',
        'BOOL',
        'BOOLEAN',
        'BOOSTED',
        'BOTH',
        'BREAK',
        'BUILT',
        'BY',
        'CALL',
        'CASCADE',
        'CASE',
        'CHANGE',
        'CIDR',
        'COLLECT',
        'COLON',
        'COLONCOLON',
        'COMMA',
        'COMMAND',
        'COMMANDS',
        'COMPOSITE',
        'CONCURRENT',
        'CONSTRAINT',
        'CONSTRAINTS',
        'CONTAINS',
        'COPY',
        'CONTINUE',
        'COUNT',
        'CREATE',
        'CSV',
        'CURRENT',
        'CYPHER',
        'DATA',
        'DATABASE',
        'DATABASES',
        'DATE',
        'DATETIME',
        'DBMS',
        'DEALLOCATE',
        'DEFAULT',
        'DEFINED',
        'DELETE',
        'DENY',
        'DESC',
        'DESCENDING',
        'DESTROY',
        'DETACH',
        'DIFFERENT',
        'DOLLAR',
        'DISTINCT',
        'DIVIDE',
        'DOT',
        'DOTDOT',
        'DOUBLEBAR',
        'DRIVER',
        'DROP',
        'DRYRUN',
        'DUMP',
        'DURATION',
        'EACH',
        'EDGE',
        'ENABLE',
        'ELEMENT',
        'ELEMENTS',
        'ELSE',
        'ENCRYPTED',
        'END',
        'ENDS',
        'EQ',
        'EXECUTABLE',
        'EXECUTE',
        'EXIST',
        'EXISTENCE',
        'EXISTS',
        'ERROR',
        'FAIL',
        'FALSE',
        'FIELDTERMINATOR',
        'FILTER',
        'FINISH',
        'FLOAT',
        'FLOAT64',
        'FLOAT32',
        'FOR',
        'FOREACH',
        'FROM',
        'FULLTEXT',
        'FUNCTION',
        'FUNCTIONS',
        'GE',
        'GRANT',
        'GRAPH',
        'GRAPHS',
        'GROUP',
        'GROUPS',
        'GT',
        'HEADERS',
        'HOME',
        'ID',
        'IF',
        'IMPERSONATE',
        'IMMUTABLE',
        'IN',
        'INDEX',
        'INDEXES',
        'INF',
        'INFINITY',
        'INSERT',
        'INT',
        'INT64',
        'INT32',
        'INT16',
        'INT8',
        'INTEGER',
        'INTEGER64',
        'INTEGER32',
        'INTEGER16',
        'INTEGER8',
        'IS',
        'JOIN',
        'KEY',
        'LABEL',
        'LABELS',
        'AMPERSAND',
        'EXCLAMATION_MARK',
        'LANGUAGE',
        'LBRACKET',
        'LCURLY',
        'LE',
        'LEADING',
        'LET',
        'LIMITROWS',
        'LIST',
        'LOAD',
        'LOCAL',
        'LOOKUP',
        'LPAREN',
        'LT',
        'MANAGEMENT',
        'MAP',
        'MATCH',
        'MERGE',
        'MINUS',
        'PERCENT',
        'INVALID_NEQ',
        'NEQ',
        'NAME',
        'NAMES',
        'NAN',
        'NFC',
        'NFD',
        'NFKC',
        'NFKD',
        'NEW',
        'NODE',
        'NODETACH',
        'NODES',
        'NONE',
        'NORMALIZE',
        'NORMALIZED',
        'NOT',
        'NOTHING',
        'NOWAIT',
        'NULL',
        'OF',
        'OFFSET',
        'ON',
        'ONLY',
        'OPTIONAL',
        'OPTIONS',
        'OPTION',
        'OR',
        'ORDER',
        'PASSWORD',
        'PASSWORDS',
        'PATH',
        'PATHS',
        'PLAINTEXT',
        'PLUS',
        'PLUSEQUAL',
        'POINT',
        'POPULATED',
        'POW',
        'PRIMARY',
        'PRIMARIES',
        'PRIVILEGE',
        'PRIVILEGES',
        'PROCEDURE',
        'PROCEDURES',
        'PROPERTIES',
        'PROPERTY',
        'PROVIDER',
        'PROVIDERS',
        'QUESTION',
        'RANGE',
        'RBRACKET',
        'RCURLY',
        'READ',
        'REALLOCATE',
        'REDUCE',
        'RENAME',
        'REGEQ',
        'REL',
        'RELATIONSHIP',
        'RELATIONSHIPS',
        'REMOVE',
        'REPEATABLE',
        'REPLACE',
        'REPLICA',
        'REPLICAS',
        'REPORT',
        'REQUIRE',
        'REQUIRED',
        'RESTRICT',
        'RETRY',
        'RETURN',
        'REVOKE',
        'ROLE',
        'ROLES',
        'ROW',
        'ROWS',
        'RPAREN',
        'SCAN',
        'SEC',
        'SECOND',
        'SECONDARY',
        'SECONDARIES',
        'SECONDS',
        'SEEK',
        'SEMICOLON',
        'SERVER',
        'SERVERS',
        'SET',
        'SETTING',
        'SETTINGS',
        'SHARD',
        'SHARDS',
        'SHORTEST_PATH',
        'SHORTEST',
        'SHOW',
        'SIGNED',
        'SINGLE',
        'SKIPROWS',
        'START',
        'STARTS',
        'STATUS',
        'STOP',
        'STRING',
        'SUPPORTED',
        'SUSPENDED',
        'TARGET',
        'TERMINATE',
        'TEXT',
        'THEN',
        'TIME',
        'TIMES',
        'TIMESTAMP',
        'TIMEZONE',
        'TO',
        'TOPOLOGY',
        'TRAILING',
        'TRANSACTION',
        'TRANSACTIONS',
        'TRAVERSE',
        'TRIM',
        'TRUE',
        'TYPE',
        'TYPED',
        'TYPES',
        'UNION',
        'UNIQUE',
        'UNIQUENESS',
        'UNWIND',
        'URL',
        'USE',
        'USER',
        'USERS',
        'USING',
        'VALUE',
        'VARCHAR',
        'VECTOR',
        'VERTEX',
        'WAIT',
        'WHEN',
        'WHERE',
        'WITH',
        'WITHOUT',
        'WRITE',
        'XOR',
        'YIELD',
        'ZONE',
        'ZONED',
        'IDENTIFIER',
        'EXTENDED_IDENTIFIER',
        'ARROW_LINE',
        'ARROW_LEFT_HEAD',
        'ARROW_RIGHT_HEAD',
        'ErrorChar',
    ]

    RULE_statements = 0
    RULE_statement = 1
    RULE_regularQuery = 2
    RULE_union = 3
    RULE_when = 4
    RULE_whenBranch = 5
    RULE_elseBranch = 6
    RULE_singleQuery = 7
    RULE_clause = 8
    RULE_useClause = 9
    RULE_graphReference = 10
    RULE_finishClause = 11
    RULE_returnClause = 12
    RULE_returnBody = 13
    RULE_returnItem = 14
    RULE_returnItems = 15
    RULE_orderItem = 16
    RULE_ascToken = 17
    RULE_descToken = 18
    RULE_orderBy = 19
    RULE_skip = 20
    RULE_limit = 21
    RULE_whereClause = 22
    RULE_withClause = 23
    RULE_createClause = 24
    RULE_insertClause = 25
    RULE_setClause = 26
    RULE_setItem = 27
    RULE_removeClause = 28
    RULE_removeItem = 29
    RULE_deleteClause = 30
    RULE_matchClause = 31
    RULE_matchMode = 32
    RULE_hint = 33
    RULE_mergeClause = 34
    RULE_mergeAction = 35
    RULE_filterClause = 36
    RULE_unwindClause = 37
    RULE_letClause = 38
    RULE_letItem = 39
    RULE_callClause = 40
    RULE_procedureName = 41
    RULE_procedureArgument = 42
    RULE_procedureResultItem = 43
    RULE_loadCSVClause = 44
    RULE_foreachClause = 45
    RULE_subqueryClause = 46
    RULE_subqueryScope = 47
    RULE_subqueryInTransactionsParameters = 48
    RULE_subqueryInTransactionsBatchParameters = 49
    RULE_subqueryInTransactionsErrorParameters = 50
    RULE_subqueryInTransactionsRetryParameters = 51
    RULE_subqueryInTransactionsReportParameters = 52
    RULE_orderBySkipLimitClause = 53
    RULE_patternList = 54
    RULE_insertPatternList = 55
    RULE_pattern = 56
    RULE_insertPattern = 57
    RULE_quantifier = 58
    RULE_anonymousPattern = 59
    RULE_shortestPathPattern = 60
    RULE_patternElement = 61
    RULE_selector = 62
    RULE_nonNegativeIntegerSpecification = 63
    RULE_groupToken = 64
    RULE_pathToken = 65
    RULE_pathPatternNonEmpty = 66
    RULE_nodePattern = 67
    RULE_insertNodePattern = 68
    RULE_parenthesizedPath = 69
    RULE_nodeLabels = 70
    RULE_nodeLabelsIs = 71
    RULE_dynamicExpression = 72
    RULE_dynamicAnyAllExpression = 73
    RULE_dynamicLabelType = 74
    RULE_labelType = 75
    RULE_relType = 76
    RULE_labelOrRelType = 77
    RULE_properties = 78
    RULE_relationshipPattern = 79
    RULE_insertRelationshipPattern = 80
    RULE_leftArrow = 81
    RULE_arrowLine = 82
    RULE_rightArrow = 83
    RULE_pathLength = 84
    RULE_labelExpression = 85
    RULE_labelExpression4 = 86
    RULE_labelExpression3 = 87
    RULE_labelExpression2 = 88
    RULE_labelExpression1 = 89
    RULE_insertNodeLabelExpression = 90
    RULE_insertRelationshipLabelExpression = 91
    RULE_expression = 92
    RULE_expression11 = 93
    RULE_expression10 = 94
    RULE_expression9 = 95
    RULE_expression8 = 96
    RULE_expression7 = 97
    RULE_comparisonExpression6 = 98
    RULE_normalForm = 99
    RULE_expression6 = 100
    RULE_expression5 = 101
    RULE_expression4 = 102
    RULE_expression3 = 103
    RULE_expression2 = 104
    RULE_postFix = 105
    RULE_property = 106
    RULE_dynamicProperty = 107
    RULE_propertyExpression = 108
    RULE_dynamicPropertyExpression = 109
    RULE_expression1 = 110
    RULE_literal = 111
    RULE_caseExpression = 112
    RULE_caseAlternative = 113
    RULE_extendedCaseExpression = 114
    RULE_extendedCaseAlternative = 115
    RULE_extendedWhen = 116
    RULE_listComprehension = 117
    RULE_patternComprehension = 118
    RULE_reduceExpression = 119
    RULE_listItemsPredicate = 120
    RULE_normalizeFunction = 121
    RULE_vectorFunction = 122
    RULE_trimFunction = 123
    RULE_patternExpression = 124
    RULE_shortestPathExpression = 125
    RULE_parenthesizedExpression = 126
    RULE_mapProjection = 127
    RULE_mapProjectionElement = 128
    RULE_countStar = 129
    RULE_existsExpression = 130
    RULE_countExpression = 131
    RULE_collectExpression = 132
    RULE_numberLiteral = 133
    RULE_signedIntegerLiteral = 134
    RULE_listLiteral = 135
    RULE_propertyKeyName = 136
    RULE_parameter = 137
    RULE_parameterName = 138
    RULE_functionInvocation = 139
    RULE_functionArgument = 140
    RULE_functionName = 141
    RULE_namespace = 142
    RULE_variable = 143
    RULE_nonEmptyNameList = 144
    RULE_type = 145
    RULE_typePart = 146
    RULE_typeName = 147
    RULE_typeNullability = 148
    RULE_typeListSuffix = 149
    RULE_vectorCoordinateType = 150
    RULE_command = 151
    RULE_createCommand = 152
    RULE_dropCommand = 153
    RULE_showCommand = 154
    RULE_showCommandYield = 155
    RULE_yieldItem = 156
    RULE_yieldSkip = 157
    RULE_yieldLimit = 158
    RULE_yieldClause = 159
    RULE_commandOptions = 160
    RULE_terminateCommand = 161
    RULE_composableCommandClauses = 162
    RULE_composableShowCommandClauses = 163
    RULE_showIndexCommand = 164
    RULE_showIndexType = 165
    RULE_showIndexesEnd = 166
    RULE_showConstraintCommand = 167
    RULE_showConstraintEntity = 168
    RULE_constraintExistType = 169
    RULE_showConstraintsEnd = 170
    RULE_showProcedures = 171
    RULE_showFunctions = 172
    RULE_functionToken = 173
    RULE_executableBy = 174
    RULE_showFunctionsType = 175
    RULE_showTransactions = 176
    RULE_terminateTransactions = 177
    RULE_showSettings = 178
    RULE_settingToken = 179
    RULE_namesAndClauses = 180
    RULE_stringsOrExpression = 181
    RULE_commandNodePattern = 182
    RULE_commandRelPattern = 183
    RULE_createConstraint = 184
    RULE_constraintType = 185
    RULE_dropConstraint = 186
    RULE_createIndex = 187
    RULE_createIndex_ = 188
    RULE_createFulltextIndex = 189
    RULE_fulltextNodePattern = 190
    RULE_fulltextRelPattern = 191
    RULE_createLookupIndex = 192
    RULE_lookupIndexNodePattern = 193
    RULE_lookupIndexRelPattern = 194
    RULE_dropIndex = 195
    RULE_propertyList = 196
    RULE_enclosedPropertyList = 197
    RULE_alterCommand = 198
    RULE_renameCommand = 199
    RULE_grantCommand = 200
    RULE_denyCommand = 201
    RULE_revokeCommand = 202
    RULE_userNames = 203
    RULE_roleNames = 204
    RULE_roleToken = 205
    RULE_enableServerCommand = 206
    RULE_alterServer = 207
    RULE_renameServer = 208
    RULE_dropServer = 209
    RULE_showServers = 210
    RULE_allocationCommand = 211
    RULE_deallocateDatabaseFromServers = 212
    RULE_reallocateDatabases = 213
    RULE_createRole = 214
    RULE_dropRole = 215
    RULE_renameRole = 216
    RULE_showRoles = 217
    RULE_grantRole = 218
    RULE_revokeRole = 219
    RULE_createUser = 220
    RULE_dropUser = 221
    RULE_renameUser = 222
    RULE_alterCurrentUser = 223
    RULE_alterUser = 224
    RULE_removeNamedProvider = 225
    RULE_password = 226
    RULE_passwordOnly = 227
    RULE_passwordExpression = 228
    RULE_passwordChangeRequired = 229
    RULE_userStatus = 230
    RULE_homeDatabase = 231
    RULE_setAuthClause = 232
    RULE_userAuthAttribute = 233
    RULE_showUsers = 234
    RULE_showCurrentUser = 235
    RULE_showSupportedPrivileges = 236
    RULE_showPrivileges = 237
    RULE_showRolePrivileges = 238
    RULE_showUserPrivileges = 239
    RULE_privilegeAsCommand = 240
    RULE_privilegeToken = 241
    RULE_privilege = 242
    RULE_allPrivilege = 243
    RULE_allPrivilegeType = 244
    RULE_allPrivilegeTarget = 245
    RULE_createPrivilege = 246
    RULE_createPrivilegeForDatabase = 247
    RULE_createNodePrivilegeToken = 248
    RULE_createRelPrivilegeToken = 249
    RULE_createPropertyPrivilegeToken = 250
    RULE_actionForDBMS = 251
    RULE_dropPrivilege = 252
    RULE_loadPrivilege = 253
    RULE_showPrivilege = 254
    RULE_setPrivilege = 255
    RULE_passwordToken = 256
    RULE_removePrivilege = 257
    RULE_writePrivilege = 258
    RULE_databasePrivilege = 259
    RULE_dbmsPrivilege = 260
    RULE_dbmsPrivilegeExecute = 261
    RULE_adminToken = 262
    RULE_procedureToken = 263
    RULE_indexToken = 264
    RULE_constraintToken = 265
    RULE_transactionToken = 266
    RULE_userQualifier = 267
    RULE_executeFunctionQualifier = 268
    RULE_executeProcedureQualifier = 269
    RULE_settingQualifier = 270
    RULE_globs = 271
    RULE_glob = 272
    RULE_globRecursive = 273
    RULE_globPart = 274
    RULE_qualifiedGraphPrivileges = 275
    RULE_labelsResource = 276
    RULE_propertiesResource = 277
    RULE_nonEmptyStringList = 278
    RULE_graphQualifier = 279
    RULE_graphQualifierToken = 280
    RULE_relToken = 281
    RULE_elementToken = 282
    RULE_nodeToken = 283
    RULE_databaseScope = 284
    RULE_graphScope = 285
    RULE_createCompositeDatabase = 286
    RULE_createDatabase = 287
    RULE_shards = 288
    RULE_graphShard = 289
    RULE_propertyShard = 290
    RULE_topology = 291
    RULE_primaryTopology = 292
    RULE_primaryToken = 293
    RULE_secondaryTopology = 294
    RULE_secondaryToken = 295
    RULE_defaultLanguageSpecification = 296
    RULE_dropDatabase = 297
    RULE_aliasAction = 298
    RULE_alterDatabase = 299
    RULE_alterDatabaseAccess = 300
    RULE_alterDatabaseTopology = 301
    RULE_alterDatabaseOption = 302
    RULE_startDatabase = 303
    RULE_stopDatabase = 304
    RULE_waitClause = 305
    RULE_secondsToken = 306
    RULE_showDatabase = 307
    RULE_aliasName = 308
    RULE_aliasTargetName = 309
    RULE_databaseName = 310
    RULE_createAlias = 311
    RULE_dropAlias = 312
    RULE_alterAlias = 313
    RULE_alterAliasTarget = 314
    RULE_alterAliasUser = 315
    RULE_alterAliasPassword = 316
    RULE_alterAliasDriver = 317
    RULE_alterAliasProperties = 318
    RULE_showAliases = 319
    RULE_symbolicNameOrStringParameter = 320
    RULE_commandNameExpression = 321
    RULE_symbolicNameOrStringParameterList = 322
    RULE_symbolicAliasNameList = 323
    RULE_symbolicAliasNameOrParameter = 324
    RULE_symbolicAliasName = 325
    RULE_stringListLiteral = 326
    RULE_stringList = 327
    RULE_stringLiteral = 328
    RULE_stringOrParameterExpression = 329
    RULE_stringOrParameter = 330
    RULE_uIntOrIntParameter = 331
    RULE_mapOrParameter = 332
    RULE_map = 333
    RULE_symbolicVariableNameString = 334
    RULE_escapedSymbolicVariableNameString = 335
    RULE_unescapedSymbolicVariableNameString = 336
    RULE_symbolicNameString = 337
    RULE_escapedSymbolicNameString = 338
    RULE_unescapedSymbolicNameString = 339
    RULE_unescapedSymbolicNameString_ = 340
    RULE_endOfFile = 341

    ruleNames = [
        'statements',
        'statement',
        'regularQuery',
        'union',
        'when',
        'whenBranch',
        'elseBranch',
        'singleQuery',
        'clause',
        'useClause',
        'graphReference',
        'finishClause',
        'returnClause',
        'returnBody',
        'returnItem',
        'returnItems',
        'orderItem',
        'ascToken',
        'descToken',
        'orderBy',
        'skip',
        'limit',
        'whereClause',
        'withClause',
        'createClause',
        'insertClause',
        'setClause',
        'setItem',
        'removeClause',
        'removeItem',
        'deleteClause',
        'matchClause',
        'matchMode',
        'hint',
        'mergeClause',
        'mergeAction',
        'filterClause',
        'unwindClause',
        'letClause',
        'letItem',
        'callClause',
        'procedureName',
        'procedureArgument',
        'procedureResultItem',
        'loadCSVClause',
        'foreachClause',
        'subqueryClause',
        'subqueryScope',
        'subqueryInTransactionsParameters',
        'subqueryInTransactionsBatchParameters',
        'subqueryInTransactionsErrorParameters',
        'subqueryInTransactionsRetryParameters',
        'subqueryInTransactionsReportParameters',
        'orderBySkipLimitClause',
        'patternList',
        'insertPatternList',
        'pattern',
        'insertPattern',
        'quantifier',
        'anonymousPattern',
        'shortestPathPattern',
        'patternElement',
        'selector',
        'nonNegativeIntegerSpecification',
        'groupToken',
        'pathToken',
        'pathPatternNonEmpty',
        'nodePattern',
        'insertNodePattern',
        'parenthesizedPath',
        'nodeLabels',
        'nodeLabelsIs',
        'dynamicExpression',
        'dynamicAnyAllExpression',
        'dynamicLabelType',
        'labelType',
        'relType',
        'labelOrRelType',
        'properties',
        'relationshipPattern',
        'insertRelationshipPattern',
        'leftArrow',
        'arrowLine',
        'rightArrow',
        'pathLength',
        'labelExpression',
        'labelExpression4',
        'labelExpression3',
        'labelExpression2',
        'labelExpression1',
        'insertNodeLabelExpression',
        'insertRelationshipLabelExpression',
        'expression',
        'expression11',
        'expression10',
        'expression9',
        'expression8',
        'expression7',
        'comparisonExpression6',
        'normalForm',
        'expression6',
        'expression5',
        'expression4',
        'expression3',
        'expression2',
        'postFix',
        'property',
        'dynamicProperty',
        'propertyExpression',
        'dynamicPropertyExpression',
        'expression1',
        'literal',
        'caseExpression',
        'caseAlternative',
        'extendedCaseExpression',
        'extendedCaseAlternative',
        'extendedWhen',
        'listComprehension',
        'patternComprehension',
        'reduceExpression',
        'listItemsPredicate',
        'normalizeFunction',
        'vectorFunction',
        'trimFunction',
        'patternExpression',
        'shortestPathExpression',
        'parenthesizedExpression',
        'mapProjection',
        'mapProjectionElement',
        'countStar',
        'existsExpression',
        'countExpression',
        'collectExpression',
        'numberLiteral',
        'signedIntegerLiteral',
        'listLiteral',
        'propertyKeyName',
        'parameter',
        'parameterName',
        'functionInvocation',
        'functionArgument',
        'functionName',
        'namespace',
        'variable',
        'nonEmptyNameList',
        'type',
        'typePart',
        'typeName',
        'typeNullability',
        'typeListSuffix',
        'vectorCoordinateType',
        'command',
        'createCommand',
        'dropCommand',
        'showCommand',
        'showCommandYield',
        'yieldItem',
        'yieldSkip',
        'yieldLimit',
        'yieldClause',
        'commandOptions',
        'terminateCommand',
        'composableCommandClauses',
        'composableShowCommandClauses',
        'showIndexCommand',
        'showIndexType',
        'showIndexesEnd',
        'showConstraintCommand',
        'showConstraintEntity',
        'constraintExistType',
        'showConstraintsEnd',
        'showProcedures',
        'showFunctions',
        'functionToken',
        'executableBy',
        'showFunctionsType',
        'showTransactions',
        'terminateTransactions',
        'showSettings',
        'settingToken',
        'namesAndClauses',
        'stringsOrExpression',
        'commandNodePattern',
        'commandRelPattern',
        'createConstraint',
        'constraintType',
        'dropConstraint',
        'createIndex',
        'createIndex_',
        'createFulltextIndex',
        'fulltextNodePattern',
        'fulltextRelPattern',
        'createLookupIndex',
        'lookupIndexNodePattern',
        'lookupIndexRelPattern',
        'dropIndex',
        'propertyList',
        'enclosedPropertyList',
        'alterCommand',
        'renameCommand',
        'grantCommand',
        'denyCommand',
        'revokeCommand',
        'userNames',
        'roleNames',
        'roleToken',
        'enableServerCommand',
        'alterServer',
        'renameServer',
        'dropServer',
        'showServers',
        'allocationCommand',
        'deallocateDatabaseFromServers',
        'reallocateDatabases',
        'createRole',
        'dropRole',
        'renameRole',
        'showRoles',
        'grantRole',
        'revokeRole',
        'createUser',
        'dropUser',
        'renameUser',
        'alterCurrentUser',
        'alterUser',
        'removeNamedProvider',
        'password',
        'passwordOnly',
        'passwordExpression',
        'passwordChangeRequired',
        'userStatus',
        'homeDatabase',
        'setAuthClause',
        'userAuthAttribute',
        'showUsers',
        'showCurrentUser',
        'showSupportedPrivileges',
        'showPrivileges',
        'showRolePrivileges',
        'showUserPrivileges',
        'privilegeAsCommand',
        'privilegeToken',
        'privilege',
        'allPrivilege',
        'allPrivilegeType',
        'allPrivilegeTarget',
        'createPrivilege',
        'createPrivilegeForDatabase',
        'createNodePrivilegeToken',
        'createRelPrivilegeToken',
        'createPropertyPrivilegeToken',
        'actionForDBMS',
        'dropPrivilege',
        'loadPrivilege',
        'showPrivilege',
        'setPrivilege',
        'passwordToken',
        'removePrivilege',
        'writePrivilege',
        'databasePrivilege',
        'dbmsPrivilege',
        'dbmsPrivilegeExecute',
        'adminToken',
        'procedureToken',
        'indexToken',
        'constraintToken',
        'transactionToken',
        'userQualifier',
        'executeFunctionQualifier',
        'executeProcedureQualifier',
        'settingQualifier',
        'globs',
        'glob',
        'globRecursive',
        'globPart',
        'qualifiedGraphPrivileges',
        'labelsResource',
        'propertiesResource',
        'nonEmptyStringList',
        'graphQualifier',
        'graphQualifierToken',
        'relToken',
        'elementToken',
        'nodeToken',
        'databaseScope',
        'graphScope',
        'createCompositeDatabase',
        'createDatabase',
        'shards',
        'graphShard',
        'propertyShard',
        'topology',
        'primaryTopology',
        'primaryToken',
        'secondaryTopology',
        'secondaryToken',
        'defaultLanguageSpecification',
        'dropDatabase',
        'aliasAction',
        'alterDatabase',
        'alterDatabaseAccess',
        'alterDatabaseTopology',
        'alterDatabaseOption',
        'startDatabase',
        'stopDatabase',
        'waitClause',
        'secondsToken',
        'showDatabase',
        'aliasName',
        'aliasTargetName',
        'databaseName',
        'createAlias',
        'dropAlias',
        'alterAlias',
        'alterAliasTarget',
        'alterAliasUser',
        'alterAliasPassword',
        'alterAliasDriver',
        'alterAliasProperties',
        'showAliases',
        'symbolicNameOrStringParameter',
        'commandNameExpression',
        'symbolicNameOrStringParameterList',
        'symbolicAliasNameList',
        'symbolicAliasNameOrParameter',
        'symbolicAliasName',
        'stringListLiteral',
        'stringList',
        'stringLiteral',
        'stringOrParameterExpression',
        'stringOrParameter',
        'uIntOrIntParameter',
        'mapOrParameter',
        'map',
        'symbolicVariableNameString',
        'escapedSymbolicVariableNameString',
        'unescapedSymbolicVariableNameString',
        'symbolicNameString',
        'escapedSymbolicNameString',
        'unescapedSymbolicNameString',
        'unescapedSymbolicNameString_',
        'endOfFile',
    ]

    EOF = Token.EOF
    SPACE = 1
    SINGLE_LINE_COMMENT = 2
    MULTI_LINE_COMMENT = 3
    DECIMAL_DOUBLE = 4
    UNSIGNED_DECIMAL_INTEGER = 5
    UNSIGNED_HEX_INTEGER = 6
    UNSIGNED_OCTAL_INTEGER = 7
    STRING_LITERAL1 = 8
    STRING_LITERAL2 = 9
    ESCAPED_SYMBOLIC_NAME = 10
    ACCESS = 11
    ACTIVE = 12
    ADMIN = 13
    ADMINISTRATOR = 14
    ALIAS = 15
    ALIASES = 16
    ALL_SHORTEST_PATHS = 17
    ALL = 18
    ALTER = 19
    AND = 20
    ANY = 21
    ARRAY = 22
    AS = 23
    ASC = 24
    ASCENDING = 25
    ASSIGN = 26
    AT = 27
    AUTH = 28
    BAR = 29
    BINDINGS = 30
    BOOL = 31
    BOOLEAN = 32
    BOOSTED = 33
    BOTH = 34
    BREAK = 35
    BUILT = 36
    BY = 37
    CALL = 38
    CASCADE = 39
    CASE = 40
    CHANGE = 41
    CIDR = 42
    COLLECT = 43
    COLON = 44
    COLONCOLON = 45
    COMMA = 46
    COMMAND = 47
    COMMANDS = 48
    COMPOSITE = 49
    CONCURRENT = 50
    CONSTRAINT = 51
    CONSTRAINTS = 52
    CONTAINS = 53
    COPY = 54
    CONTINUE = 55
    COUNT = 56
    CREATE = 57
    CSV = 58
    CURRENT = 59
    CYPHER = 60
    DATA = 61
    DATABASE = 62
    DATABASES = 63
    DATE = 64
    DATETIME = 65
    DBMS = 66
    DEALLOCATE = 67
    DEFAULT = 68
    DEFINED = 69
    DELETE = 70
    DENY = 71
    DESC = 72
    DESCENDING = 73
    DESTROY = 74
    DETACH = 75
    DIFFERENT = 76
    DOLLAR = 77
    DISTINCT = 78
    DIVIDE = 79
    DOT = 80
    DOTDOT = 81
    DOUBLEBAR = 82
    DRIVER = 83
    DROP = 84
    DRYRUN = 85
    DUMP = 86
    DURATION = 87
    EACH = 88
    EDGE = 89
    ENABLE = 90
    ELEMENT = 91
    ELEMENTS = 92
    ELSE = 93
    ENCRYPTED = 94
    END = 95
    ENDS = 96
    EQ = 97
    EXECUTABLE = 98
    EXECUTE = 99
    EXIST = 100
    EXISTENCE = 101
    EXISTS = 102
    ERROR = 103
    FAIL = 104
    FALSE = 105
    FIELDTERMINATOR = 106
    FILTER = 107
    FINISH = 108
    FLOAT = 109
    FLOAT64 = 110
    FLOAT32 = 111
    FOR = 112
    FOREACH = 113
    FROM = 114
    FULLTEXT = 115
    FUNCTION = 116
    FUNCTIONS = 117
    GE = 118
    GRANT = 119
    GRAPH = 120
    GRAPHS = 121
    GROUP = 122
    GROUPS = 123
    GT = 124
    HEADERS = 125
    HOME = 126
    ID = 127
    IF = 128
    IMPERSONATE = 129
    IMMUTABLE = 130
    IN = 131
    INDEX = 132
    INDEXES = 133
    INF = 134
    INFINITY = 135
    INSERT = 136
    INT = 137
    INT64 = 138
    INT32 = 139
    INT16 = 140
    INT8 = 141
    INTEGER = 142
    INTEGER64 = 143
    INTEGER32 = 144
    INTEGER16 = 145
    INTEGER8 = 146
    IS = 147
    JOIN = 148
    KEY = 149
    LABEL = 150
    LABELS = 151
    AMPERSAND = 152
    EXCLAMATION_MARK = 153
    LANGUAGE = 154
    LBRACKET = 155
    LCURLY = 156
    LE = 157
    LEADING = 158
    LET = 159
    LIMITROWS = 160
    LIST = 161
    LOAD = 162
    LOCAL = 163
    LOOKUP = 164
    LPAREN = 165
    LT = 166
    MANAGEMENT = 167
    MAP = 168
    MATCH = 169
    MERGE = 170
    MINUS = 171
    PERCENT = 172
    INVALID_NEQ = 173
    NEQ = 174
    NAME = 175
    NAMES = 176
    NAN = 177
    NFC = 178
    NFD = 179
    NFKC = 180
    NFKD = 181
    NEW = 182
    NODE = 183
    NODETACH = 184
    NODES = 185
    NONE = 186
    NORMALIZE = 187
    NORMALIZED = 188
    NOT = 189
    NOTHING = 190
    NOWAIT = 191
    NULL = 192
    OF = 193
    OFFSET = 194
    ON = 195
    ONLY = 196
    OPTIONAL = 197
    OPTIONS = 198
    OPTION = 199
    OR = 200
    ORDER = 201
    PASSWORD = 202
    PASSWORDS = 203
    PATH = 204
    PATHS = 205
    PLAINTEXT = 206
    PLUS = 207
    PLUSEQUAL = 208
    POINT = 209
    POPULATED = 210
    POW = 211
    PRIMARY = 212
    PRIMARIES = 213
    PRIVILEGE = 214
    PRIVILEGES = 215
    PROCEDURE = 216
    PROCEDURES = 217
    PROPERTIES = 218
    PROPERTY = 219
    PROVIDER = 220
    PROVIDERS = 221
    QUESTION = 222
    RANGE = 223
    RBRACKET = 224
    RCURLY = 225
    READ = 226
    REALLOCATE = 227
    REDUCE = 228
    RENAME = 229
    REGEQ = 230
    REL = 231
    RELATIONSHIP = 232
    RELATIONSHIPS = 233
    REMOVE = 234
    REPEATABLE = 235
    REPLACE = 236
    REPLICA = 237
    REPLICAS = 238
    REPORT = 239
    REQUIRE = 240
    REQUIRED = 241
    RESTRICT = 242
    RETRY = 243
    RETURN = 244
    REVOKE = 245
    ROLE = 246
    ROLES = 247
    ROW = 248
    ROWS = 249
    RPAREN = 250
    SCAN = 251
    SEC = 252
    SECOND = 253
    SECONDARY = 254
    SECONDARIES = 255
    SECONDS = 256
    SEEK = 257
    SEMICOLON = 258
    SERVER = 259
    SERVERS = 260
    SET = 261
    SETTING = 262
    SETTINGS = 263
    SHARD = 264
    SHARDS = 265
    SHORTEST_PATH = 266
    SHORTEST = 267
    SHOW = 268
    SIGNED = 269
    SINGLE = 270
    SKIPROWS = 271
    START = 272
    STARTS = 273
    STATUS = 274
    STOP = 275
    STRING = 276
    SUPPORTED = 277
    SUSPENDED = 278
    TARGET = 279
    TERMINATE = 280
    TEXT = 281
    THEN = 282
    TIME = 283
    TIMES = 284
    TIMESTAMP = 285
    TIMEZONE = 286
    TO = 287
    TOPOLOGY = 288
    TRAILING = 289
    TRANSACTION = 290
    TRANSACTIONS = 291
    TRAVERSE = 292
    TRIM = 293
    TRUE = 294
    TYPE = 295
    TYPED = 296
    TYPES = 297
    UNION = 298
    UNIQUE = 299
    UNIQUENESS = 300
    UNWIND = 301
    URL = 302
    USE = 303
    USER = 304
    USERS = 305
    USING = 306
    VALUE = 307
    VARCHAR = 308
    VECTOR = 309
    VERTEX = 310
    WAIT = 311
    WHEN = 312
    WHERE = 313
    WITH = 314
    WITHOUT = 315
    WRITE = 316
    XOR = 317
    YIELD = 318
    ZONE = 319
    ZONED = 320
    IDENTIFIER = 321
    EXTENDED_IDENTIFIER = 322
    ARROW_LINE = 323
    ARROW_LEFT_HEAD = 324
    ARROW_RIGHT_HEAD = 325
    ErrorChar = 326

    def __init__(
        self, input: TokenStream, output: typing.TextIO = sys.stdout
    ) -> None:
        super().__init__(input, output)
        self.checkVersion('4.13.2')
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.StatementContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.StatementContext, i
                )

        def EOF(self):
            return self.getToken(Cypher25Parser.EOF, 0)

        def SEMICOLON(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.SEMICOLON)
            else:
                return self.getToken(Cypher25Parser.SEMICOLON, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_statements

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStatements'):
                listener.enterStatements(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStatements'):
                listener.exitStatements(self)

    def statements(self):
        localctx = Cypher25Parser.StatementsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.statement()
            self.state = 689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 685
                    self.match(Cypher25Parser.SEMICOLON)
                    self.state = 686
                    self.statement()
                self.state = 691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)

            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 258:
                self.state = 692
                self.match(Cypher25Parser.SEMICOLON)

            self.state = 695
            self.match(Cypher25Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self):
            return self.getTypedRuleContext(Cypher25Parser.CommandContext, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RegularQueryContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStatement'):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStatement'):
                listener.exitStatement(self)

    def statement(self):
        localctx = Cypher25Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.regularQuery()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union(self):
            return self.getTypedRuleContext(Cypher25Parser.UnionContext, 0)

        def when(self):
            return self.getTypedRuleContext(Cypher25Parser.WhenContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_regularQuery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRegularQuery'):
                listener.enterRegularQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRegularQuery'):
                listener.exitRegularQuery(self)

    def regularQuery(self):
        localctx = Cypher25Parser.RegularQueryContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 4, self.RULE_regularQuery)
        try:
            self.state = 703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                38,
                57,
                70,
                75,
                107,
                108,
                113,
                136,
                156,
                159,
                160,
                162,
                169,
                170,
                184,
                194,
                197,
                201,
                234,
                244,
                261,
                271,
                301,
                303,
                314,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.union()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 2)
                self.state = 702
                self.when()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleQuery(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SingleQueryContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SingleQueryContext, i
                )

        def UNION(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.UNION)
            else:
                return self.getToken(Cypher25Parser.UNION, i)

        def ALL(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.ALL)
            else:
                return self.getToken(Cypher25Parser.ALL, i)

        def DISTINCT(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.DISTINCT)
            else:
                return self.getToken(Cypher25Parser.DISTINCT, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_union

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUnion'):
                listener.enterUnion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUnion'):
                listener.exitUnion(self)

    def union(self):
        localctx = Cypher25Parser.UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_union)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.singleQuery()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 298:
                self.state = 706
                self.match(Cypher25Parser.UNION)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18 or _la == 78:
                    self.state = 707
                    _la = self._input.LA(1)
                    if not (_la == 18 or _la == 78):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 710
                self.singleQuery()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenBranch(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.WhenBranchContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.WhenBranchContext, i
                )

        def elseBranch(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ElseBranchContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_when

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWhen'):
                listener.enterWhen(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWhen'):
                listener.exitWhen(self)

    def when(self):
        localctx = Cypher25Parser.WhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_when)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 716
                self.whenBranch()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 312):
                    break

            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 93:
                self.state = 721
                self.elseBranch()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenBranchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Cypher25Parser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def THEN(self):
            return self.getToken(Cypher25Parser.THEN, 0)

        def singleQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SingleQueryContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_whenBranch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWhenBranch'):
                listener.enterWhenBranch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWhenBranch'):
                listener.exitWhenBranch(self)

    def whenBranch(self):
        localctx = Cypher25Parser.WhenBranchContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 10, self.RULE_whenBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(Cypher25Parser.WHEN)
            self.state = 725
            self.expression()
            self.state = 726
            self.match(Cypher25Parser.THEN)
            self.state = 727
            self.singleQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseBranchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Cypher25Parser.ELSE, 0)

        def singleQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SingleQueryContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_elseBranch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterElseBranch'):
                listener.enterElseBranch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitElseBranch'):
                listener.exitElseBranch(self)

    def elseBranch(self):
        localctx = Cypher25Parser.ElseBranchContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 12, self.RULE_elseBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(Cypher25Parser.ELSE)
            self.state = 730
            self.singleQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clause(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.ClauseContext)
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ClauseContext, i
                )

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RegularQueryContext, 0
            )

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def useClause(self):
            return self.getTypedRuleContext(Cypher25Parser.UseClauseContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_singleQuery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSingleQuery'):
                listener.enterSingleQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSingleQuery'):
                listener.exitSingleQuery(self)

    def singleQuery(self):
        localctx = Cypher25Parser.SingleQueryContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 14, self.RULE_singleQuery)
        self._la = 0  # Token type
        try:
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 732
                    self.clause()
                    self.state = 735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (
                        (
                            ((_la - 38) & ~0x3F) == 0
                            and ((1 << (_la - 38)) & 141734445057) != 0
                        )
                        or (
                            ((_la - 107) & ~0x3F) == 0
                            and ((1 << (_la - 107)) & -4562146421989441469)
                            != 0
                        )
                        or (
                            ((_la - 184) & ~0x3F) == 0
                            and ((1 << (_la - 184)) & 1154047404513829889) != 0
                        )
                        or (
                            ((_la - 261) & ~0x3F) == 0
                            and ((1 << (_la - 261)) & 9012696812880897) != 0
                        )
                    ):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 303:
                    self.state = 737
                    self.useClause()

                self.state = 740
                self.match(Cypher25Parser.LCURLY)
                self.state = 741
                self.regularQuery()
                self.state = 742
                self.match(Cypher25Parser.RCURLY)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useClause(self):
            return self.getTypedRuleContext(Cypher25Parser.UseClauseContext, 0)

        def finishClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FinishClauseContext, 0
            )

        def returnClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ReturnClauseContext, 0
            )

        def createClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateClauseContext, 0
            )

        def insertClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.InsertClauseContext, 0
            )

        def deleteClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DeleteClauseContext, 0
            )

        def setClause(self):
            return self.getTypedRuleContext(Cypher25Parser.SetClauseContext, 0)

        def removeClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RemoveClauseContext, 0
            )

        def matchClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.MatchClauseContext, 0
            )

        def mergeClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.MergeClauseContext, 0
            )

        def withClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WithClauseContext, 0
            )

        def filterClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FilterClauseContext, 0
            )

        def unwindClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UnwindClauseContext, 0
            )

        def letClause(self):
            return self.getTypedRuleContext(Cypher25Parser.LetClauseContext, 0)

        def callClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CallClauseContext, 0
            )

        def subqueryClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SubqueryClauseContext, 0
            )

        def loadCSVClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LoadCSVClauseContext, 0
            )

        def foreachClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ForeachClauseContext, 0
            )

        def orderBySkipLimitClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.OrderBySkipLimitClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterClause'):
                listener.enterClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitClause'):
                listener.exitClause(self)

    def clause(self):
        localctx = Cypher25Parser.ClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_clause)
        try:
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.useClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.finishClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.returnClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 749
                self.createClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 750
                self.insertClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 751
                self.deleteClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 752
                self.setClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 753
                self.removeClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 754
                self.matchClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 755
                self.mergeClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 756
                self.withClause()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 757
                self.filterClause()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 758
                self.unwindClause()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 759
                self.letClause()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 760
                self.callClause()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 761
                self.subqueryClause()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 762
                self.loadCSVClause()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 763
                self.foreachClause()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 764
                self.orderBySkipLimitClause()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(Cypher25Parser.USE, 0)

        def graphReference(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphReferenceContext, 0
            )

        def GRAPH(self):
            return self.getToken(Cypher25Parser.GRAPH, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_useClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUseClause'):
                listener.enterUseClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUseClause'):
                listener.exitUseClause(self)

    def useClause(self):
        localctx = Cypher25Parser.UseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_useClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(Cypher25Parser.USE)
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.state = 768
                self.match(Cypher25Parser.GRAPH)

            self.state = 771
            self.graphReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def graphReference(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphReferenceContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def functionInvocation(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FunctionInvocationContext, 0
            )

        def symbolicAliasName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_graphReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGraphReference'):
                listener.enterGraphReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGraphReference'):
                listener.exitGraphReference(self)

    def graphReference(self):
        localctx = Cypher25Parser.GraphReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 20, self.RULE_graphReference)
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 773
                self.match(Cypher25Parser.LPAREN)
                self.state = 774
                self.graphReference()
                self.state = 775
                self.match(Cypher25Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.functionInvocation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 778
                self.symbolicAliasName()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinishClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINISH(self):
            return self.getToken(Cypher25Parser.FINISH, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_finishClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFinishClause'):
                listener.enterFinishClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFinishClause'):
                listener.exitFinishClause(self)

    def finishClause(self):
        localctx = Cypher25Parser.FinishClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 22, self.RULE_finishClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(Cypher25Parser.FINISH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Cypher25Parser.RETURN, 0)

        def returnBody(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ReturnBodyContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_returnClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterReturnClause'):
                listener.enterReturnClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitReturnClause'):
                listener.exitReturnClause(self)

    def returnClause(self):
        localctx = Cypher25Parser.ReturnClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 24, self.RULE_returnClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(Cypher25Parser.RETURN)
            self.state = 784
            self.returnBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnItems(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ReturnItemsContext, 0
            )

        def DISTINCT(self):
            return self.getToken(Cypher25Parser.DISTINCT, 0)

        def orderBy(self):
            return self.getTypedRuleContext(Cypher25Parser.OrderByContext, 0)

        def skip(self):
            return self.getTypedRuleContext(Cypher25Parser.SkipContext, 0)

        def limit(self):
            return self.getTypedRuleContext(Cypher25Parser.LimitContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_returnBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterReturnBody'):
                listener.enterReturnBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitReturnBody'):
                listener.exitReturnBody(self)

    def returnBody(self):
        localctx = Cypher25Parser.ReturnBodyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 26, self.RULE_returnBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
            if la_ == 1:
                self.state = 786
                self.match(Cypher25Parser.DISTINCT)

            self.state = 789
            self.returnItems()
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
            if la_ == 1:
                self.state = 790
                self.orderBy()

            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.state = 793
                self.skip()

            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
            if la_ == 1:
                self.state = 796
                self.limit()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_returnItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterReturnItem'):
                listener.enterReturnItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitReturnItem'):
                listener.exitReturnItem(self)

    def returnItem(self):
        localctx = Cypher25Parser.ReturnItemContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 28, self.RULE_returnItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.expression()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 800
                self.match(Cypher25Parser.AS)
                self.state = 801
                self.variable()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def returnItem(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ReturnItemContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ReturnItemContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_returnItems

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterReturnItems'):
                listener.enterReturnItems(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitReturnItems'):
                listener.exitReturnItems(self)

    def returnItems(self):
        localctx = Cypher25Parser.ReturnItemsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 30, self.RULE_returnItems)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.state = 804
                self.match(Cypher25Parser.TIMES)
                pass
            elif token in [
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                155,
                156,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                167,
                168,
                169,
                170,
                171,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.state = 805
                self.returnItem()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 808
                self.match(Cypher25Parser.COMMA)
                self.state = 809
                self.returnItem()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def ascToken(self):
            return self.getTypedRuleContext(Cypher25Parser.AscTokenContext, 0)

        def descToken(self):
            return self.getTypedRuleContext(Cypher25Parser.DescTokenContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_orderItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterOrderItem'):
                listener.enterOrderItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitOrderItem'):
                listener.exitOrderItem(self)

    def orderItem(self):
        localctx = Cypher25Parser.OrderItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_orderItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.expression()
            self.state = 818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24, 25]:
                self.state = 816
                self.ascToken()
                pass
            elif token in [72, 73]:
                self.state = 817
                self.descToken()
                pass
            elif token in [
                -1,
                38,
                46,
                57,
                70,
                75,
                93,
                107,
                108,
                113,
                136,
                159,
                160,
                162,
                169,
                170,
                184,
                194,
                197,
                201,
                225,
                234,
                244,
                250,
                258,
                261,
                268,
                271,
                280,
                298,
                301,
                303,
                312,
                313,
                314,
            ]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AscTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(Cypher25Parser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(Cypher25Parser.ASCENDING, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_ascToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAscToken'):
                listener.enterAscToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAscToken'):
                listener.exitAscToken(self)

    def ascToken(self):
        localctx = Cypher25Parser.AscTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ascToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            _la = self._input.LA(1)
            if not (_la == 24 or _la == 25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESC(self):
            return self.getToken(Cypher25Parser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(Cypher25Parser.DESCENDING, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_descToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDescToken'):
                listener.enterDescToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDescToken'):
                listener.exitDescToken(self)

    def descToken(self):
        localctx = Cypher25Parser.DescTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_descToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            _la = self._input.LA(1)
            if not (_la == 72 or _la == 73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(Cypher25Parser.ORDER, 0)

        def BY(self):
            return self.getToken(Cypher25Parser.BY, 0)

        def orderItem(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.OrderItemContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.OrderItemContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_orderBy

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterOrderBy'):
                listener.enterOrderBy(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitOrderBy'):
                listener.exitOrderBy(self)

    def orderBy(self):
        localctx = Cypher25Parser.OrderByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_orderBy)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(Cypher25Parser.ORDER)
            self.state = 825
            self.match(Cypher25Parser.BY)
            self.state = 826
            self.orderItem()
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 827
                self.match(Cypher25Parser.COMMA)
                self.state = 828
                self.orderItem()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def OFFSET(self):
            return self.getToken(Cypher25Parser.OFFSET, 0)

        def SKIPROWS(self):
            return self.getToken(Cypher25Parser.SKIPROWS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_skip

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSkip'):
                listener.enterSkip(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSkip'):
                listener.exitSkip(self)

    def skip(self):
        localctx = Cypher25Parser.SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_skip)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            _la = self._input.LA(1)
            if not (_la == 194 or _la == 271):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 835
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMITROWS(self):
            return self.getToken(Cypher25Parser.LIMITROWS, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_limit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLimit'):
                listener.enterLimit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLimit'):
                listener.exitLimit(self)

    def limit(self):
        localctx = Cypher25Parser.LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(Cypher25Parser.LIMITROWS)
            self.state = 838
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_whereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWhereClause'):
                listener.enterWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWhereClause'):
                listener.exitWhereClause(self)

    def whereClause(self):
        localctx = Cypher25Parser.WhereClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 44, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(Cypher25Parser.WHERE)
            self.state = 841
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Cypher25Parser.WITH, 0)

        def returnBody(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ReturnBodyContext, 0
            )

        def whereClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WhereClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_withClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWithClause'):
                listener.enterWithClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWithClause'):
                listener.exitWithClause(self)

    def withClause(self):
        localctx = Cypher25Parser.WithClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 46, self.RULE_withClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(Cypher25Parser.WITH)
            self.state = 844
            self.returnBody()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313:
                self.state = 845
                self.whereClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(Cypher25Parser.CREATE, 0)

        def patternList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateClause'):
                listener.enterCreateClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateClause'):
                listener.exitCreateClause(self)

    def createClause(self):
        localctx = Cypher25Parser.CreateClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 48, self.RULE_createClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(Cypher25Parser.CREATE)
            self.state = 849
            self.patternList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(Cypher25Parser.INSERT, 0)

        def insertPatternList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.InsertPatternListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_insertClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterInsertClause'):
                listener.enterInsertClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitInsertClause'):
                listener.exitInsertClause(self)

    def insertClause(self):
        localctx = Cypher25Parser.InsertClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 50, self.RULE_insertClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(Cypher25Parser.INSERT)
            self.state = 852
            self.insertPatternList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def setItem(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.SetItemContext)
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SetItemContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_setClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetClause'):
                listener.enterSetClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetClause'):
                listener.exitSetClause(self)

    def setClause(self):
        localctx = Cypher25Parser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_setClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(Cypher25Parser.SET)
            self.state = 855
            self.setItem()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 856
                self.match(Cypher25Parser.COMMA)
                self.state = 857
                self.setItem()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_setItem

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SetPropContext(SetItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SetItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyExpressionContext, 0
            )

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetProp'):
                listener.enterSetProp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetProp'):
                listener.exitSetProp(self)

    class AddPropContext(SetItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SetItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def PLUSEQUAL(self):
            return self.getToken(Cypher25Parser.PLUSEQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAddProp'):
                listener.enterAddProp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAddProp'):
                listener.exitAddProp(self)

    class SetDynamicPropContext(SetItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SetItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dynamicPropertyExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DynamicPropertyExpressionContext, 0
            )

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetDynamicProp'):
                listener.enterSetDynamicProp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetDynamicProp'):
                listener.exitSetDynamicProp(self)

    class SetPropsContext(SetItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SetItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetProps'):
                listener.enterSetProps(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetProps'):
                listener.exitSetProps(self)

    class SetLabelsContext(SetItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SetItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def nodeLabels(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NodeLabelsContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetLabels'):
                listener.enterSetLabels(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetLabels'):
                listener.exitSetLabels(self)

    class SetLabelsIsContext(SetItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SetItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def nodeLabelsIs(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NodeLabelsIsContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetLabelsIs'):
                listener.enterSetLabelsIs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetLabelsIs'):
                listener.exitSetLabelsIs(self)

    def setItem(self):
        localctx = Cypher25Parser.SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_setItem)
        try:
            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.SetPropContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.propertyExpression()
                self.state = 864
                self.match(Cypher25Parser.EQ)
                self.state = 865
                self.expression()
                pass

            elif la_ == 2:
                localctx = Cypher25Parser.SetDynamicPropContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.dynamicPropertyExpression()
                self.state = 868
                self.match(Cypher25Parser.EQ)
                self.state = 869
                self.expression()
                pass

            elif la_ == 3:
                localctx = Cypher25Parser.SetPropsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.variable()
                self.state = 872
                self.match(Cypher25Parser.EQ)
                self.state = 873
                self.expression()
                pass

            elif la_ == 4:
                localctx = Cypher25Parser.AddPropContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 875
                self.variable()
                self.state = 876
                self.match(Cypher25Parser.PLUSEQUAL)
                self.state = 877
                self.expression()
                pass

            elif la_ == 5:
                localctx = Cypher25Parser.SetLabelsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 879
                self.variable()
                self.state = 880
                self.nodeLabels()
                pass

            elif la_ == 6:
                localctx = Cypher25Parser.SetLabelsIsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 882
                self.variable()
                self.state = 883
                self.nodeLabelsIs()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(Cypher25Parser.REMOVE, 0)

        def removeItem(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.RemoveItemContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.RemoveItemContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_removeClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRemoveClause'):
                listener.enterRemoveClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRemoveClause'):
                listener.exitRemoveClause(self)

    def removeClause(self):
        localctx = Cypher25Parser.RemoveClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 56, self.RULE_removeClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(Cypher25Parser.REMOVE)
            self.state = 888
            self.removeItem()
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 889
                self.match(Cypher25Parser.COMMA)
                self.state = 890
                self.removeItem()
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_removeItem

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class RemoveLabelsIsContext(RemoveItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.RemoveItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def nodeLabelsIs(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NodeLabelsIsContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRemoveLabelsIs'):
                listener.enterRemoveLabelsIs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRemoveLabelsIs'):
                listener.exitRemoveLabelsIs(self)

    class RemoveDynamicPropContext(RemoveItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.RemoveItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dynamicPropertyExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DynamicPropertyExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRemoveDynamicProp'):
                listener.enterRemoveDynamicProp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRemoveDynamicProp'):
                listener.exitRemoveDynamicProp(self)

    class RemoveLabelsContext(RemoveItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.RemoveItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def nodeLabels(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NodeLabelsContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRemoveLabels'):
                listener.enterRemoveLabels(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRemoveLabels'):
                listener.exitRemoveLabels(self)

    class RemovePropContext(RemoveItemContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.RemoveItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRemoveProp'):
                listener.enterRemoveProp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRemoveProp'):
                listener.exitRemoveProp(self)

    def removeItem(self):
        localctx = Cypher25Parser.RemoveItemContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 58, self.RULE_removeItem)
        try:
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.RemovePropContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.propertyExpression()
                pass

            elif la_ == 2:
                localctx = Cypher25Parser.RemoveDynamicPropContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.dynamicPropertyExpression()
                pass

            elif la_ == 3:
                localctx = Cypher25Parser.RemoveLabelsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 898
                self.variable()
                self.state = 899
                self.nodeLabels()
                pass

            elif la_ == 4:
                localctx = Cypher25Parser.RemoveLabelsIsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.variable()
                self.state = 902
                self.nodeLabelsIs()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(Cypher25Parser.DELETE, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def DETACH(self):
            return self.getToken(Cypher25Parser.DETACH, 0)

        def NODETACH(self):
            return self.getToken(Cypher25Parser.NODETACH, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_deleteClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDeleteClause'):
                listener.enterDeleteClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDeleteClause'):
                listener.exitDeleteClause(self)

    def deleteClause(self):
        localctx = Cypher25Parser.DeleteClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 60, self.RULE_deleteClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 75 or _la == 184:
                self.state = 906
                _la = self._input.LA(1)
                if not (_la == 75 or _la == 184):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 909
            self.match(Cypher25Parser.DELETE)
            self.state = 910
            self.expression()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 911
                self.match(Cypher25Parser.COMMA)
                self.state = 912
                self.expression()
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(Cypher25Parser.MATCH, 0)

        def patternList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternListContext, 0
            )

        def OPTIONAL(self):
            return self.getToken(Cypher25Parser.OPTIONAL, 0)

        def matchMode(self):
            return self.getTypedRuleContext(Cypher25Parser.MatchModeContext, 0)

        def hint(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.HintContext)
            else:
                return self.getTypedRuleContext(Cypher25Parser.HintContext, i)

        def whereClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WhereClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_matchClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMatchClause'):
                listener.enterMatchClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMatchClause'):
                listener.exitMatchClause(self)

    def matchClause(self):
        localctx = Cypher25Parser.MatchClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 62, self.RULE_matchClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 197:
                self.state = 918
                self.match(Cypher25Parser.OPTIONAL)

            self.state = 921
            self.match(Cypher25Parser.MATCH)
            self.state = 923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.state = 922
                self.matchMode()

            self.state = 925
            self.patternList()
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 306:
                self.state = 926
                self.hint()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313:
                self.state = 932
                self.whereClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatchModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(Cypher25Parser.REPEATABLE, 0)

        def ELEMENT(self):
            return self.getToken(Cypher25Parser.ELEMENT, 0)

        def ELEMENTS(self):
            return self.getToken(Cypher25Parser.ELEMENTS, 0)

        def BINDINGS(self):
            return self.getToken(Cypher25Parser.BINDINGS, 0)

        def DIFFERENT(self):
            return self.getToken(Cypher25Parser.DIFFERENT, 0)

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def RELATIONSHIPS(self):
            return self.getToken(Cypher25Parser.RELATIONSHIPS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_matchMode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMatchMode'):
                listener.enterMatchMode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMatchMode'):
                listener.exitMatchMode(self)

    def matchMode(self):
        localctx = Cypher25Parser.MatchModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_matchMode)
        try:
            self.state = 951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.match(Cypher25Parser.REPEATABLE)
                self.state = 941
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 936
                    self.match(Cypher25Parser.ELEMENT)
                    self.state = 938
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 34, self._ctx
                    )
                    if la_ == 1:
                        self.state = 937
                        self.match(Cypher25Parser.BINDINGS)

                    pass
                elif token in [92]:
                    self.state = 940
                    self.match(Cypher25Parser.ELEMENTS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(Cypher25Parser.DIFFERENT)
                self.state = 949
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [232]:
                    self.state = 944
                    self.match(Cypher25Parser.RELATIONSHIP)
                    self.state = 946
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 36, self._ctx
                    )
                    if la_ == 1:
                        self.state = 945
                        self.match(Cypher25Parser.BINDINGS)

                    pass
                elif token in [233]:
                    self.state = 948
                    self.match(Cypher25Parser.RELATIONSHIPS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cypher25Parser.USING, 0)

        def JOIN(self):
            return self.getToken(Cypher25Parser.JOIN, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def nonEmptyNameList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NonEmptyNameListContext, 0
            )

        def SCAN(self):
            return self.getToken(Cypher25Parser.SCAN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def labelOrRelType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelOrRelTypeContext, 0
            )

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def INDEX(self):
            return self.getToken(Cypher25Parser.INDEX, 0)

        def TEXT(self):
            return self.getToken(Cypher25Parser.TEXT, 0)

        def RANGE(self):
            return self.getToken(Cypher25Parser.RANGE, 0)

        def POINT(self):
            return self.getToken(Cypher25Parser.POINT, 0)

        def SEEK(self):
            return self.getToken(Cypher25Parser.SEEK, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_hint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterHint'):
                listener.enterHint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitHint'):
                listener.exitHint(self)

    def hint(self):
        localctx = Cypher25Parser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(Cypher25Parser.USING)
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132, 209, 223, 281]:
                self.state = 961
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [132]:
                    self.state = 954
                    self.match(Cypher25Parser.INDEX)
                    pass
                elif token in [281]:
                    self.state = 955
                    self.match(Cypher25Parser.TEXT)
                    self.state = 956
                    self.match(Cypher25Parser.INDEX)
                    pass
                elif token in [223]:
                    self.state = 957
                    self.match(Cypher25Parser.RANGE)
                    self.state = 958
                    self.match(Cypher25Parser.INDEX)
                    pass
                elif token in [209]:
                    self.state = 959
                    self.match(Cypher25Parser.POINT)
                    self.state = 960
                    self.match(Cypher25Parser.INDEX)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 40, self._ctx)
                if la_ == 1:
                    self.state = 963
                    self.match(Cypher25Parser.SEEK)

                self.state = 966
                self.variable()
                self.state = 967
                self.labelOrRelType()
                self.state = 968
                self.match(Cypher25Parser.LPAREN)
                self.state = 969
                self.nonEmptyNameList()
                self.state = 970
                self.match(Cypher25Parser.RPAREN)
                pass
            elif token in [148]:
                self.state = 972
                self.match(Cypher25Parser.JOIN)
                self.state = 973
                self.match(Cypher25Parser.ON)
                self.state = 974
                self.nonEmptyNameList()
                pass
            elif token in [251]:
                self.state = 975
                self.match(Cypher25Parser.SCAN)
                self.state = 976
                self.variable()
                self.state = 977
                self.labelOrRelType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(Cypher25Parser.MERGE, 0)

        def pattern(self):
            return self.getTypedRuleContext(Cypher25Parser.PatternContext, 0)

        def mergeAction(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.MergeActionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.MergeActionContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_mergeClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMergeClause'):
                listener.enterMergeClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMergeClause'):
                listener.exitMergeClause(self)

    def mergeClause(self):
        localctx = Cypher25Parser.MergeClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 68, self.RULE_mergeClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(Cypher25Parser.MERGE)
            self.state = 982
            self.pattern()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 195:
                self.state = 983
                self.mergeAction()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def setClause(self):
            return self.getTypedRuleContext(Cypher25Parser.SetClauseContext, 0)

        def MATCH(self):
            return self.getToken(Cypher25Parser.MATCH, 0)

        def CREATE(self):
            return self.getToken(Cypher25Parser.CREATE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_mergeAction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMergeAction'):
                listener.enterMergeAction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMergeAction'):
                listener.exitMergeAction(self)

    def mergeAction(self):
        localctx = Cypher25Parser.MergeActionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 70, self.RULE_mergeAction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(Cypher25Parser.ON)
            self.state = 990
            _la = self._input.LA(1)
            if not (_la == 57 or _la == 169):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 991
            self.setClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(Cypher25Parser.FILTER, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_filterClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFilterClause'):
                listener.enterFilterClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFilterClause'):
                listener.exitFilterClause(self)

    def filterClause(self):
        localctx = Cypher25Parser.FilterClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 72, self.RULE_filterClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(Cypher25Parser.FILTER)
            self.state = 995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                self.state = 994
                self.match(Cypher25Parser.WHERE)

            self.state = 997
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnwindClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(Cypher25Parser.UNWIND, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_unwindClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUnwindClause'):
                listener.enterUnwindClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUnwindClause'):
                listener.exitUnwindClause(self)

    def unwindClause(self):
        localctx = Cypher25Parser.UnwindClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 74, self.RULE_unwindClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(Cypher25Parser.UNWIND)
            self.state = 1000
            self.expression()
            self.state = 1001
            self.match(Cypher25Parser.AS)
            self.state = 1002
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(Cypher25Parser.LET, 0)

        def letItem(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.LetItemContext)
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.LetItemContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_letClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLetClause'):
                listener.enterLetClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLetClause'):
                listener.exitLetClause(self)

    def letClause(self):
        localctx = Cypher25Parser.LetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_letClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(Cypher25Parser.LET)
            self.state = 1005
            self.letItem()
            self.state = 1010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 1006
                self.match(Cypher25Parser.COMMA)
                self.state = 1007
                self.letItem()
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_letItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLetItem'):
                listener.enterLetItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLetItem'):
                listener.exitLetItem(self)

    def letItem(self):
        localctx = Cypher25Parser.LetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_letItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.variable()
            self.state = 1014
            self.match(Cypher25Parser.EQ)
            self.state = 1015
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(Cypher25Parser.CALL, 0)

        def procedureName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ProcedureNameContext, 0
            )

        def OPTIONAL(self):
            return self.getToken(Cypher25Parser.OPTIONAL, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def YIELD(self):
            return self.getToken(Cypher25Parser.YIELD, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def procedureResultItem(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ProcedureResultItemContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ProcedureResultItemContext, i
                )

        def procedureArgument(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ProcedureArgumentContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ProcedureArgumentContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def whereClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WhereClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_callClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCallClause'):
                listener.enterCallClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCallClause'):
                listener.exitCallClause(self)

    def callClause(self):
        localctx = Cypher25Parser.CallClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 80, self.RULE_callClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 197:
                self.state = 1017
                self.match(Cypher25Parser.OPTIONAL)

            self.state = 1020
            self.match(Cypher25Parser.CALL)
            self.state = 1021
            self.procedureName()
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 165:
                self.state = 1022
                self.match(Cypher25Parser.LPAREN)
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la - 4) & ~0x3F) == 0
                        and ((1 << (_la - 4)) & -7696614948865) != 0
                    )
                    or (
                        ((_la - 68) & ~0x3F) == 0
                        and ((1 << (_la - 68)) & -73183494481672193) != 0
                    )
                    or (
                        ((_la - 132) & ~0x3F) == 0
                        and ((1 << (_la - 132)) & -7713797963777) != 0
                    )
                    or (
                        ((_la - 196) & ~0x3F) == 0
                        and ((1 << (_la - 196)) & -4629700434989191169) != 0
                    )
                    or (
                        ((_la - 260) & ~0x3F) == 0
                        and ((1 << (_la - 260)) & 4611686018410610687) != 0
                    )
                ):
                    self.state = 1023
                    self.procedureArgument()
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == 46:
                        self.state = 1024
                        self.match(Cypher25Parser.COMMA)
                        self.state = 1025
                        self.procedureArgument()
                        self.state = 1030
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1033
                self.match(Cypher25Parser.RPAREN)

            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 318:
                self.state = 1036
                self.match(Cypher25Parser.YIELD)
                self.state = 1049
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [284]:
                    self.state = 1037
                    self.match(Cypher25Parser.TIMES)
                    pass
                elif token in [
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    78,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    119,
                    120,
                    121,
                    122,
                    123,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    154,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    167,
                    168,
                    169,
                    170,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    209,
                    210,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    223,
                    226,
                    227,
                    228,
                    229,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                ]:
                    self.state = 1038
                    self.procedureResultItem()
                    self.state = 1043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == 46:
                        self.state = 1039
                        self.match(Cypher25Parser.COMMA)
                        self.state = 1040
                        self.procedureResultItem()
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1047
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 313:
                        self.state = 1046
                        self.whereClause()

                    pass
                else:
                    raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace(self):
            return self.getTypedRuleContext(Cypher25Parser.NamespaceContext, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_procedureName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterProcedureName'):
                listener.enterProcedureName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitProcedureName'):
                listener.exitProcedureName(self)

    def procedureName(self):
        localctx = Cypher25Parser.ProcedureNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 82, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.namespace()
            self.state = 1054
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_procedureArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterProcedureArgument'):
                listener.enterProcedureArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitProcedureArgument'):
                listener.exitProcedureArgument(self)

    def procedureArgument(self):
        localctx = Cypher25Parser.ProcedureArgumentContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 84, self.RULE_procedureArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureResultItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.yieldItemName = None  # VariableContext
            self.yieldItemAlias = None  # VariableContext

        def variable(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.VariableContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.VariableContext, i
                )

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_procedureResultItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterProcedureResultItem'):
                listener.enterProcedureResultItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitProcedureResultItem'):
                listener.exitProcedureResultItem(self)

    def procedureResultItem(self):
        localctx = Cypher25Parser.ProcedureResultItemContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 86, self.RULE_procedureResultItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            localctx.yieldItemName = self.variable()
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 1059
                self.match(Cypher25Parser.AS)
                self.state = 1060
                localctx.yieldItemAlias = self.variable()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadCSVClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(Cypher25Parser.LOAD, 0)

        def CSV(self):
            return self.getToken(Cypher25Parser.CSV, 0)

        def FROM(self):
            return self.getToken(Cypher25Parser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def WITH(self):
            return self.getToken(Cypher25Parser.WITH, 0)

        def HEADERS(self):
            return self.getToken(Cypher25Parser.HEADERS, 0)

        def FIELDTERMINATOR(self):
            return self.getToken(Cypher25Parser.FIELDTERMINATOR, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringLiteralContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_loadCSVClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLoadCSVClause'):
                listener.enterLoadCSVClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLoadCSVClause'):
                listener.exitLoadCSVClause(self)

    def loadCSVClause(self):
        localctx = Cypher25Parser.LoadCSVClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 88, self.RULE_loadCSVClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(Cypher25Parser.LOAD)
            self.state = 1064
            self.match(Cypher25Parser.CSV)
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 314:
                self.state = 1065
                self.match(Cypher25Parser.WITH)
                self.state = 1066
                self.match(Cypher25Parser.HEADERS)

            self.state = 1069
            self.match(Cypher25Parser.FROM)
            self.state = 1070
            self.expression()
            self.state = 1071
            self.match(Cypher25Parser.AS)
            self.state = 1072
            self.variable()
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 106:
                self.state = 1073
                self.match(Cypher25Parser.FIELDTERMINATOR)
                self.state = 1074
                self.stringLiteral()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForeachClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(Cypher25Parser.FOREACH, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def BAR(self):
            return self.getToken(Cypher25Parser.BAR, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def clause(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.ClauseContext)
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ClauseContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_foreachClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterForeachClause'):
                listener.enterForeachClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitForeachClause'):
                listener.exitForeachClause(self)

    def foreachClause(self):
        localctx = Cypher25Parser.ForeachClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 90, self.RULE_foreachClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(Cypher25Parser.FOREACH)
            self.state = 1078
            self.match(Cypher25Parser.LPAREN)
            self.state = 1079
            self.variable()
            self.state = 1080
            self.match(Cypher25Parser.IN)
            self.state = 1081
            self.expression()
            self.state = 1082
            self.match(Cypher25Parser.BAR)
            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1083
                self.clause()
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la - 38) & ~0x3F) == 0
                        and ((1 << (_la - 38)) & 141734445057) != 0
                    )
                    or (
                        ((_la - 107) & ~0x3F) == 0
                        and ((1 << (_la - 107)) & -4562146421989441469) != 0
                    )
                    or (
                        ((_la - 184) & ~0x3F) == 0
                        and ((1 << (_la - 184)) & 1154047404513829889) != 0
                    )
                    or (
                        ((_la - 261) & ~0x3F) == 0
                        and ((1 << (_la - 261)) & 9012696812880897) != 0
                    )
                ):
                    break

            self.state = 1088
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(Cypher25Parser.CALL, 0)

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RegularQueryContext, 0
            )

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def OPTIONAL(self):
            return self.getToken(Cypher25Parser.OPTIONAL, 0)

        def subqueryScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SubqueryScopeContext, 0
            )

        def subqueryInTransactionsParameters(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SubqueryInTransactionsParametersContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_subqueryClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSubqueryClause'):
                listener.enterSubqueryClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSubqueryClause'):
                listener.exitSubqueryClause(self)

    def subqueryClause(self):
        localctx = Cypher25Parser.SubqueryClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 92, self.RULE_subqueryClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 197:
                self.state = 1090
                self.match(Cypher25Parser.OPTIONAL)

            self.state = 1093
            self.match(Cypher25Parser.CALL)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 165:
                self.state = 1094
                self.subqueryScope()

            self.state = 1097
            self.match(Cypher25Parser.LCURLY)
            self.state = 1098
            self.regularQuery()
            self.state = 1099
            self.match(Cypher25Parser.RCURLY)
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 131:
                self.state = 1100
                self.subqueryInTransactionsParameters()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def variable(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.VariableContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.VariableContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_subqueryScope

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSubqueryScope'):
                listener.enterSubqueryScope(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSubqueryScope'):
                listener.exitSubqueryScope(self)

    def subqueryScope(self):
        localctx = Cypher25Parser.SubqueryScopeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 94, self.RULE_subqueryScope)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(Cypher25Parser.LPAREN)
            self.state = 1113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.state = 1104
                self.match(Cypher25Parser.TIMES)
                pass
            elif token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.state = 1105
                self.variable()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 46:
                    self.state = 1106
                    self.match(Cypher25Parser.COMMA)
                    self.state = 1107
                    self.variable()
                    self.state = 1112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [250]:
                pass
            else:
                pass
            self.state = 1115
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryInTransactionsParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def TRANSACTIONS(self):
            return self.getToken(Cypher25Parser.TRANSACTIONS, 0)

        def CONCURRENT(self):
            return self.getToken(Cypher25Parser.CONCURRENT, 0)

        def subqueryInTransactionsBatchParameters(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SubqueryInTransactionsBatchParametersContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SubqueryInTransactionsBatchParametersContext,
                    i,
                )

        def subqueryInTransactionsErrorParameters(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SubqueryInTransactionsErrorParametersContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SubqueryInTransactionsErrorParametersContext,
                    i,
                )

        def subqueryInTransactionsReportParameters(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SubqueryInTransactionsReportParametersContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SubqueryInTransactionsReportParametersContext,
                    i,
                )

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_subqueryInTransactionsParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSubqueryInTransactionsParameters'):
                listener.enterSubqueryInTransactionsParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSubqueryInTransactionsParameters'):
                listener.exitSubqueryInTransactionsParameters(self)

    def subqueryInTransactionsParameters(self):
        localctx = Cypher25Parser.SubqueryInTransactionsParametersContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 96, self.RULE_subqueryInTransactionsParameters
        )
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(Cypher25Parser.IN)
            self.state = 1122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 63, self._ctx)
            if la_ == 1:
                self.state = 1119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
                if la_ == 1:
                    self.state = 1118
                    self.expression()

                self.state = 1121
                self.match(Cypher25Parser.CONCURRENT)

            self.state = 1124
            self.match(Cypher25Parser.TRANSACTIONS)
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la - 193) & ~0x3F) == 0 and (
                (1 << (_la - 193)) & 70368744177669
            ) != 0:
                self.state = 1128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [193]:
                    self.state = 1125
                    self.subqueryInTransactionsBatchParameters()
                    pass
                elif token in [195]:
                    self.state = 1126
                    self.subqueryInTransactionsErrorParameters()
                    pass
                elif token in [239]:
                    self.state = 1127
                    self.subqueryInTransactionsReportParameters()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryInTransactionsBatchParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(Cypher25Parser.OF, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def ROW(self):
            return self.getToken(Cypher25Parser.ROW, 0)

        def ROWS(self):
            return self.getToken(Cypher25Parser.ROWS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_subqueryInTransactionsBatchParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSubqueryInTransactionsBatchParameters'):
                listener.enterSubqueryInTransactionsBatchParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSubqueryInTransactionsBatchParameters'):
                listener.exitSubqueryInTransactionsBatchParameters(self)

    def subqueryInTransactionsBatchParameters(self):
        localctx = Cypher25Parser.SubqueryInTransactionsBatchParametersContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 98, self.RULE_subqueryInTransactionsBatchParameters
        )
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(Cypher25Parser.OF)
            self.state = 1134
            self.expression()
            self.state = 1135
            _la = self._input.LA(1)
            if not (_la == 248 or _la == 249):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryInTransactionsErrorParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def ERROR(self):
            return self.getToken(Cypher25Parser.ERROR, 0)

        def RETRY(self):
            return self.getToken(Cypher25Parser.RETRY, 0)

        def subqueryInTransactionsRetryParameters(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SubqueryInTransactionsRetryParametersContext, 0
            )

        def THEN(self):
            return self.getToken(Cypher25Parser.THEN, 0)

        def CONTINUE(self):
            return self.getToken(Cypher25Parser.CONTINUE, 0)

        def BREAK(self):
            return self.getToken(Cypher25Parser.BREAK, 0)

        def FAIL(self):
            return self.getToken(Cypher25Parser.FAIL, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_subqueryInTransactionsErrorParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSubqueryInTransactionsErrorParameters'):
                listener.enterSubqueryInTransactionsErrorParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSubqueryInTransactionsErrorParameters'):
                listener.exitSubqueryInTransactionsErrorParameters(self)

    def subqueryInTransactionsErrorParameters(self):
        localctx = Cypher25Parser.SubqueryInTransactionsErrorParametersContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 100, self.RULE_subqueryInTransactionsErrorParameters
        )
        self._la = 0  # Token type
        try:
            self.state = 1150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                self.match(Cypher25Parser.ON)
                self.state = 1138
                self.match(Cypher25Parser.ERROR)
                self.state = 1139
                self.match(Cypher25Parser.RETRY)
                self.state = 1141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 66, self._ctx)
                if la_ == 1:
                    self.state = 1140
                    self.subqueryInTransactionsRetryParameters()

                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 282:
                    self.state = 1143
                    self.match(Cypher25Parser.THEN)
                    self.state = 1144
                    _la = self._input.LA(1)
                    if not (_la == 35 or _la == 55 or _la == 104):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.match(Cypher25Parser.ON)
                self.state = 1148
                self.match(Cypher25Parser.ERROR)
                self.state = 1149
                _la = self._input.LA(1)
                if not (_la == 35 or _la == 55 or _la == 104):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryInTransactionsRetryParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def secondsToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SecondsTokenContext, 0
            )

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_subqueryInTransactionsRetryParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSubqueryInTransactionsRetryParameters'):
                listener.enterSubqueryInTransactionsRetryParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSubqueryInTransactionsRetryParameters'):
                listener.exitSubqueryInTransactionsRetryParameters(self)

    def subqueryInTransactionsRetryParameters(self):
        localctx = Cypher25Parser.SubqueryInTransactionsRetryParametersContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 102, self.RULE_subqueryInTransactionsRetryParameters
        )
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
            if la_ == 1:
                self.state = 1152
                self.match(Cypher25Parser.FOR)

            self.state = 1155
            self.expression()
            self.state = 1156
            self.secondsToken()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryInTransactionsReportParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(Cypher25Parser.REPORT, 0)

        def STATUS(self):
            return self.getToken(Cypher25Parser.STATUS, 0)

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_subqueryInTransactionsReportParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(
                listener, 'enterSubqueryInTransactionsReportParameters'
            ):
                listener.enterSubqueryInTransactionsReportParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSubqueryInTransactionsReportParameters'):
                listener.exitSubqueryInTransactionsReportParameters(self)

    def subqueryInTransactionsReportParameters(self):
        localctx = (
            Cypher25Parser.SubqueryInTransactionsReportParametersContext(
                self, self._ctx, self.state
            )
        )
        self.enterRule(
            localctx, 104, self.RULE_subqueryInTransactionsReportParameters
        )
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(Cypher25Parser.REPORT)
            self.state = 1159
            self.match(Cypher25Parser.STATUS)
            self.state = 1160
            self.match(Cypher25Parser.AS)
            self.state = 1161
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderBySkipLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderBy(self):
            return self.getTypedRuleContext(Cypher25Parser.OrderByContext, 0)

        def skip(self):
            return self.getTypedRuleContext(Cypher25Parser.SkipContext, 0)

        def limit(self):
            return self.getTypedRuleContext(Cypher25Parser.LimitContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_orderBySkipLimitClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterOrderBySkipLimitClause'):
                listener.enterOrderBySkipLimitClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitOrderBySkipLimitClause'):
                listener.exitOrderBySkipLimitClause(self)

    def orderBySkipLimitClause(self):
        localctx = Cypher25Parser.OrderBySkipLimitClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 106, self.RULE_orderBySkipLimitClause)
        try:
            self.state = 1175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [201]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self.orderBy()
                self.state = 1165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
                if la_ == 1:
                    self.state = 1164
                    self.skip()

                self.state = 1168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
                if la_ == 1:
                    self.state = 1167
                    self.limit()

                pass
            elif token in [194, 271]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.skip()
                self.state = 1172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                if la_ == 1:
                    self.state = 1171
                    self.limit()

                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.limit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.PatternContext)
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PatternContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_patternList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPatternList'):
                listener.enterPatternList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPatternList'):
                listener.exitPatternList(self)

    def patternList(self):
        localctx = Cypher25Parser.PatternListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 108, self.RULE_patternList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.pattern()
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 1178
                self.match(Cypher25Parser.COMMA)
                self.state = 1179
                self.pattern()
                self.state = 1184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertPatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertPattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.InsertPatternContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.InsertPatternContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_insertPatternList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterInsertPatternList'):
                listener.enterInsertPatternList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitInsertPatternList'):
                listener.exitInsertPatternList(self)

    def insertPatternList(self):
        localctx = Cypher25Parser.InsertPatternListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 110, self.RULE_insertPatternList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.insertPattern()
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 1186
                self.match(Cypher25Parser.COMMA)
                self.state = 1187
                self.insertPattern()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymousPattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AnonymousPatternContext, 0
            )

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def selector(self):
            return self.getTypedRuleContext(Cypher25Parser.SelectorContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPattern'):
                listener.enterPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPattern'):
                listener.exitPattern(self)

    def pattern(self):
        localctx = Cypher25Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
            if la_ == 1:
                self.state = 1193
                self.variable()
                self.state = 1194
                self.match(Cypher25Parser.EQ)

            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 18 or _la == 21 or _la == 267:
                self.state = 1198
                self.selector()

            self.state = 1201
            self.anonymousPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertNodePattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.InsertNodePatternContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.InsertNodePatternContext, i
                )

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def insertRelationshipPattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.InsertRelationshipPatternContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.InsertRelationshipPatternContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_insertPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterInsertPattern'):
                listener.enterInsertPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitInsertPattern'):
                listener.exitInsertPattern(self)

    def insertPattern(self):
        localctx = Cypher25Parser.InsertPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 114, self.RULE_insertPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la - 10) & ~0x3F) == 0
                    and ((1 << (_la - 10)) & -120259608577) != 0
                )
                or (
                    ((_la - 74) & ~0x3F) == 0
                    and ((1 << (_la - 74)) & -1143492101276137) != 0
                )
                or (
                    ((_la - 138) & ~0x3F) == 0
                    and ((1 << (_la - 138)) & -129252638721) != 0
                )
                or (
                    ((_la - 202) & ~0x3F) == 0
                    and ((1 << (_la - 202)) & -72339069296706145) != 0
                )
                or (
                    ((_la - 266) & ~0x3F) == 0
                    and ((1 << (_la - 266)) & 72057594037665791) != 0
                )
            ):
                self.state = 1203
                self.symbolicNameString()
                self.state = 1204
                self.match(Cypher25Parser.EQ)

            self.state = 1208
            self.insertNodePattern()
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 166 or _la == 171 or _la == 323 or _la == 324:
                self.state = 1209
                self.insertRelationshipPattern()
                self.state = 1210
                self.insertNodePattern()
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_ = None  # Token
            self.to = None  # Token

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def UNSIGNED_DECIMAL_INTEGER(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
            else:
                return self.getToken(
                    Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, i
                )

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def COMMA(self):
            return self.getToken(Cypher25Parser.COMMA, 0)

        def PLUS(self):
            return self.getToken(Cypher25Parser.PLUS, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_quantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterQuantifier'):
                listener.enterQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitQuantifier'):
                listener.exitQuantifier(self)

    def quantifier(self):
        localctx = Cypher25Parser.QuantifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 116, self.RULE_quantifier)
        self._la = 0  # Token type
        try:
            self.state = 1231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1217
                self.match(Cypher25Parser.LCURLY)
                self.state = 1218
                self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
                self.state = 1219
                self.match(Cypher25Parser.RCURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1220
                self.match(Cypher25Parser.LCURLY)
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 5:
                    self.state = 1221
                    localctx.from_ = self.match(
                        Cypher25Parser.UNSIGNED_DECIMAL_INTEGER
                    )

                self.state = 1224
                self.match(Cypher25Parser.COMMA)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 5:
                    self.state = 1225
                    localctx.to = self.match(
                        Cypher25Parser.UNSIGNED_DECIMAL_INTEGER
                    )

                self.state = 1228
                self.match(Cypher25Parser.RCURLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1229
                self.match(Cypher25Parser.PLUS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1230
                self.match(Cypher25Parser.TIMES)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnonymousPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathPattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShortestPathPatternContext, 0
            )

        def patternElement(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternElementContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_anonymousPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAnonymousPattern'):
                listener.enterAnonymousPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAnonymousPattern'):
                listener.exitAnonymousPattern(self)

    def anonymousPattern(self):
        localctx = Cypher25Parser.AnonymousPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 118, self.RULE_anonymousPattern)
        try:
            self.state = 1235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 266]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1233
                self.shortestPathPattern()
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.patternElement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShortestPathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def patternElement(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternElementContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def SHORTEST_PATH(self):
            return self.getToken(Cypher25Parser.SHORTEST_PATH, 0)

        def ALL_SHORTEST_PATHS(self):
            return self.getToken(Cypher25Parser.ALL_SHORTEST_PATHS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_shortestPathPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShortestPathPattern'):
                listener.enterShortestPathPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShortestPathPattern'):
                listener.exitShortestPathPattern(self)

    def shortestPathPattern(self):
        localctx = Cypher25Parser.ShortestPathPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 120, self.RULE_shortestPathPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            _la = self._input.LA(1)
            if not (_la == 17 or _la == 266):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1238
            self.match(Cypher25Parser.LPAREN)
            self.state = 1239
            self.patternElement()
            self.state = 1240
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodePattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.NodePatternContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.NodePatternContext, i
                )

        def parenthesizedPath(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ParenthesizedPathContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ParenthesizedPathContext, i
                )

        def relationshipPattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.RelationshipPatternContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.RelationshipPatternContext, i
                )

        def quantifier(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.QuantifierContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.QuantifierContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_patternElement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPatternElement'):
                listener.enterPatternElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPatternElement'):
                listener.exitPatternElement(self)

    def patternElement(self):
        localctx = Cypher25Parser.PatternElementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 122, self.RULE_patternElement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
                if la_ == 1:
                    self.state = 1242
                    self.nodePattern()
                    self.state = 1251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == 166 or _la == 171 or _la == 323 or _la == 324:
                        self.state = 1243
                        self.relationshipPattern()
                        self.state = 1245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 156 or _la == 207 or _la == 284:
                            self.state = 1244
                            self.quantifier()

                        self.state = 1247
                        self.nodePattern()
                        self.state = 1253
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1254
                    self.parenthesizedPath()
                    pass

                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 165):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_selector

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class AllShortestPathContext(SelectorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SelectorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def SHORTEST(self):
            return self.getToken(Cypher25Parser.SHORTEST, 0)

        def pathToken(self):
            return self.getTypedRuleContext(Cypher25Parser.PathTokenContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAllShortestPath'):
                listener.enterAllShortestPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAllShortestPath'):
                listener.exitAllShortestPath(self)

    class AnyPathContext(SelectorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SelectorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(Cypher25Parser.ANY, 0)

        def nonNegativeIntegerSpecification(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NonNegativeIntegerSpecificationContext, 0
            )

        def pathToken(self):
            return self.getTypedRuleContext(Cypher25Parser.PathTokenContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAnyPath'):
                listener.enterAnyPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAnyPath'):
                listener.exitAnyPath(self)

    class ShortestGroupContext(SelectorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SelectorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHORTEST(self):
            return self.getToken(Cypher25Parser.SHORTEST, 0)

        def groupToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GroupTokenContext, 0
            )

        def nonNegativeIntegerSpecification(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NonNegativeIntegerSpecificationContext, 0
            )

        def pathToken(self):
            return self.getTypedRuleContext(Cypher25Parser.PathTokenContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShortestGroup'):
                listener.enterShortestGroup(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShortestGroup'):
                listener.exitShortestGroup(self)

    class AnyShortestPathContext(SelectorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SelectorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(Cypher25Parser.ANY, 0)

        def SHORTEST(self):
            return self.getToken(Cypher25Parser.SHORTEST, 0)

        def pathToken(self):
            return self.getTypedRuleContext(Cypher25Parser.PathTokenContext, 0)

        def nonNegativeIntegerSpecification(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NonNegativeIntegerSpecificationContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAnyShortestPath'):
                listener.enterAnyShortestPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAnyShortestPath'):
                listener.exitAnyShortestPath(self)

    class AllPathContext(SelectorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.SelectorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def pathToken(self):
            return self.getTypedRuleContext(Cypher25Parser.PathTokenContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAllPath'):
                listener.enterAllPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAllPath'):
                listener.exitAllPath(self)

    def selector(self):
        localctx = Cypher25Parser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_selector)
        self._la = 0  # Token type
        try:
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.AnyShortestPathContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 1259
                self.match(Cypher25Parser.ANY)
                self.state = 1260
                self.match(Cypher25Parser.SHORTEST)
                self.state = 1262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 204 or _la == 205:
                    self.state = 1261
                    self.pathToken()

                pass

            elif la_ == 2:
                localctx = Cypher25Parser.AllShortestPathContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 1264
                self.match(Cypher25Parser.ALL)
                self.state = 1265
                self.match(Cypher25Parser.SHORTEST)
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 204 or _la == 205:
                    self.state = 1266
                    self.pathToken()

                pass

            elif la_ == 3:
                localctx = Cypher25Parser.AnyPathContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1269
                self.match(Cypher25Parser.ANY)
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 5 or _la == 77:
                    self.state = 1270
                    self.nonNegativeIntegerSpecification()

                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 204 or _la == 205:
                    self.state = 1273
                    self.pathToken()

                pass

            elif la_ == 4:
                localctx = Cypher25Parser.AllPathContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1276
                self.match(Cypher25Parser.ALL)
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 204 or _la == 205:
                    self.state = 1277
                    self.pathToken()

                pass

            elif la_ == 5:
                localctx = Cypher25Parser.ShortestGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1280
                self.match(Cypher25Parser.SHORTEST)
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 5 or _la == 77:
                    self.state = 1281
                    self.nonNegativeIntegerSpecification()

                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 204 or _la == 205:
                    self.state = 1284
                    self.pathToken()

                self.state = 1287
                self.groupToken()
                pass

            elif la_ == 6:
                localctx = Cypher25Parser.AnyShortestPathContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 6)
                self.state = 1288
                self.match(Cypher25Parser.SHORTEST)
                self.state = 1289
                self.nonNegativeIntegerSpecification()
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 204 or _la == 205:
                    self.state = 1290
                    self.pathToken()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonNegativeIntegerSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_nonNegativeIntegerSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNonNegativeIntegerSpecification'):
                listener.enterNonNegativeIntegerSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNonNegativeIntegerSpecification'):
                listener.exitNonNegativeIntegerSpecification(self)

    def nonNegativeIntegerSpecification(self):
        localctx = Cypher25Parser.NonNegativeIntegerSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 126, self.RULE_nonNegativeIntegerSpecification
        )
        try:
            self.state = 1297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1295
                self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1296
                self.parameter('INTEGER')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(Cypher25Parser.GROUP, 0)

        def GROUPS(self):
            return self.getToken(Cypher25Parser.GROUPS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_groupToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGroupToken'):
                listener.enterGroupToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGroupToken'):
                listener.exitGroupToken(self)

    def groupToken(self):
        localctx = Cypher25Parser.GroupTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 128, self.RULE_groupToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            _la = self._input.LA(1)
            if not (_la == 122 or _la == 123):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(Cypher25Parser.PATH, 0)

        def PATHS(self):
            return self.getToken(Cypher25Parser.PATHS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_pathToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPathToken'):
                listener.enterPathToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPathToken'):
                listener.exitPathToken(self)

    def pathToken(self):
        localctx = Cypher25Parser.PathTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_pathToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            _la = self._input.LA(1)
            if not (_la == 204 or _la == 205):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathPatternNonEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodePattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.NodePatternContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.NodePatternContext, i
                )

        def relationshipPattern(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.RelationshipPatternContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.RelationshipPatternContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_pathPatternNonEmpty

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPathPatternNonEmpty'):
                listener.enterPathPatternNonEmpty(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPathPatternNonEmpty'):
                listener.exitPathPatternNonEmpty(self)

    def pathPatternNonEmpty(self):
        localctx = Cypher25Parser.PathPatternNonEmptyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 132, self.RULE_pathPatternNonEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.nodePattern()
            self.state = 1307
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1304
                    self.relationshipPattern()
                    self.state = 1305
                    self.nodePattern()

                else:
                    raise NoViableAltException(self)
                self.state = 1309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 98, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def labelExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelExpressionContext, 0
            )

        def properties(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertiesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_nodePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNodePattern'):
                listener.enterNodePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNodePattern'):
                listener.exitNodePattern(self)

    def nodePattern(self):
        localctx = Cypher25Parser.NodePatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 134, self.RULE_nodePattern)
        self._la = 0  # Token type
        try:
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.match(Cypher25Parser.LPAREN)
                self.state = 1312
                self.match(Cypher25Parser.WHERE)
                self.state = 1313
                self.expression()
                self.state = 1314
                self.match(Cypher25Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1316
                self.match(Cypher25Parser.LPAREN)
                self.state = 1318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
                if la_ == 1:
                    self.state = 1317
                    self.variable()

                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 44 or _la == 147:
                    self.state = 1320
                    self.labelExpression()

                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 77 or _la == 156:
                    self.state = 1323
                    self.properties()

                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313:
                    self.state = 1326
                    self.match(Cypher25Parser.WHERE)
                    self.state = 1327
                    self.expression()

                self.state = 1330
                self.match(Cypher25Parser.RPAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertNodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def insertNodeLabelExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.InsertNodeLabelExpressionContext, 0
            )

        def map_(self):
            return self.getTypedRuleContext(Cypher25Parser.MapContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_insertNodePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterInsertNodePattern'):
                listener.enterInsertNodePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitInsertNodePattern'):
                listener.exitInsertNodePattern(self)

    def insertNodePattern(self):
        localctx = Cypher25Parser.InsertNodePatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 136, self.RULE_insertNodePattern)
        self._la = 0  # Token type
        try:
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1333
                self.match(Cypher25Parser.LPAREN)
                self.state = 1334
                self.match(Cypher25Parser.WHERE)
                self.state = 1335
                self.expression()
                self.state = 1336
                self.match(Cypher25Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1338
                self.match(Cypher25Parser.LPAREN)
                self.state = 1340
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                if la_ == 1:
                    self.state = 1339
                    self.variable()

                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 44 or _la == 147:
                    self.state = 1342
                    self.insertNodeLabelExpression()

                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 156:
                    self.state = 1345
                    self.map_()

                self.state = 1348
                self.match(Cypher25Parser.RPAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesizedPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Cypher25Parser.PatternContext, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def quantifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.QuantifierContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_parenthesizedPath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterParenthesizedPath'):
                listener.enterParenthesizedPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitParenthesizedPath'):
                listener.exitParenthesizedPath(self)

    def parenthesizedPath(self):
        localctx = Cypher25Parser.ParenthesizedPathContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 138, self.RULE_parenthesizedPath)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(Cypher25Parser.LPAREN)
            self.state = 1352
            self.pattern()
            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313:
                self.state = 1353
                self.match(Cypher25Parser.WHERE)
                self.state = 1354
                self.expression()

            self.state = 1357
            self.match(Cypher25Parser.RPAREN)
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 156 or _la == 207 or _la == 284:
                self.state = 1358
                self.quantifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelType(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.LabelTypeContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.LabelTypeContext, i
                )

        def dynamicLabelType(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.DynamicLabelTypeContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.DynamicLabelTypeContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_nodeLabels

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNodeLabels'):
                listener.enterNodeLabels(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNodeLabels'):
                listener.exitNodeLabels(self)

    def nodeLabels(self):
        localctx = Cypher25Parser.NodeLabelsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 140, self.RULE_nodeLabels)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
                if la_ == 1:
                    self.state = 1361
                    self.labelType()
                    pass

                elif la_ == 2:
                    self.state = 1362
                    self.dynamicLabelType()
                    pass

                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 44):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeLabelsIsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def dynamicExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DynamicExpressionContext, 0
            )

        def labelType(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.LabelTypeContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.LabelTypeContext, i
                )

        def dynamicLabelType(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.DynamicLabelTypeContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.DynamicLabelTypeContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_nodeLabelsIs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNodeLabelsIs'):
                listener.enterNodeLabelsIs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNodeLabelsIs'):
                listener.exitNodeLabelsIs(self)

    def nodeLabelsIs(self):
        localctx = Cypher25Parser.NodeLabelsIsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 142, self.RULE_nodeLabelsIs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.match(Cypher25Parser.IS)
            self.state = 1370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.state = 1368
                self.symbolicNameString()
                pass
            elif token in [77]:
                self.state = 1369
                self.dynamicExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 44:
                self.state = 1374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
                if la_ == 1:
                    self.state = 1372
                    self.labelType()
                    pass

                elif la_ == 2:
                    self.state = 1373
                    self.dynamicLabelType()
                    pass

                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(Cypher25Parser.DOLLAR, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dynamicExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDynamicExpression'):
                listener.enterDynamicExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDynamicExpression'):
                listener.exitDynamicExpression(self)

    def dynamicExpression(self):
        localctx = Cypher25Parser.DynamicExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 144, self.RULE_dynamicExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(Cypher25Parser.DOLLAR)
            self.state = 1380
            self.match(Cypher25Parser.LPAREN)
            self.state = 1381
            self.expression()
            self.state = 1382
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicAnyAllExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(Cypher25Parser.DOLLAR, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def ANY(self):
            return self.getToken(Cypher25Parser.ANY, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dynamicAnyAllExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDynamicAnyAllExpression'):
                listener.enterDynamicAnyAllExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDynamicAnyAllExpression'):
                listener.exitDynamicAnyAllExpression(self)

    def dynamicAnyAllExpression(self):
        localctx = Cypher25Parser.DynamicAnyAllExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 146, self.RULE_dynamicAnyAllExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(Cypher25Parser.DOLLAR)
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 18 or _la == 21:
                self.state = 1385
                _la = self._input.LA(1)
                if not (_la == 18 or _la == 21):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1388
            self.match(Cypher25Parser.LPAREN)
            self.state = 1389
            self.expression()
            self.state = 1390
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicLabelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def dynamicExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DynamicExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dynamicLabelType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDynamicLabelType'):
                listener.enterDynamicLabelType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDynamicLabelType'):
                listener.exitDynamicLabelType(self)

    def dynamicLabelType(self):
        localctx = Cypher25Parser.DynamicLabelTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 148, self.RULE_dynamicLabelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.match(Cypher25Parser.COLON)
            self.state = 1393
            self.dynamicExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelType'):
                listener.enterLabelType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelType'):
                listener.exitLabelType(self)

    def labelType(self):
        localctx = Cypher25Parser.LabelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_labelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(Cypher25Parser.COLON)
            self.state = 1396
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_relType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRelType'):
                listener.enterRelType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRelType'):
                listener.exitRelType(self)

    def relType(self):
        localctx = Cypher25Parser.RelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_relType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(Cypher25Parser.COLON)
            self.state = 1399
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelOrRelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelOrRelType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelOrRelType'):
                listener.enterLabelOrRelType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelOrRelType'):
                listener.exitLabelOrRelType(self)

    def labelOrRelType(self):
        localctx = Cypher25Parser.LabelOrRelTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 154, self.RULE_labelOrRelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(Cypher25Parser.COLON)
            self.state = 1402
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map(self):
            return self.getTypedRuleContext(Cypher25Parser.MapContext, 0)

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_properties

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterProperties'):
                listener.enterProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitProperties'):
                listener.exitProperties(self)

    def properties(self):
        localctx = Cypher25Parser.PropertiesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 156, self.RULE_properties)
        try:
            self.state = 1406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1404
                self.map_()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1405
                self.parameter('ANY')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowLine(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ArrowLineContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ArrowLineContext, i
                )

        def leftArrow(self):
            return self.getTypedRuleContext(Cypher25Parser.LeftArrowContext, 0)

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def rightArrow(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RightArrowContext, 0
            )

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def labelExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelExpressionContext, 0
            )

        def pathLength(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PathLengthContext, 0
            )

        def properties(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertiesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_relationshipPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRelationshipPattern'):
                listener.enterRelationshipPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRelationshipPattern'):
                listener.exitRelationshipPattern(self)

    def relationshipPattern(self):
        localctx = Cypher25Parser.RelationshipPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 158, self.RULE_relationshipPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 166 or _la == 324:
                self.state = 1408
                self.leftArrow()

            self.state = 1411
            self.arrowLine()
            self.state = 1435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
            if la_ == 1:
                self.state = 1412
                self.match(Cypher25Parser.LBRACKET)
                self.state = 1413
                self.match(Cypher25Parser.WHERE)
                self.state = 1414
                self.expression()
                self.state = 1415
                self.match(Cypher25Parser.RBRACKET)

            elif la_ == 2:
                self.state = 1417
                self.match(Cypher25Parser.LBRACKET)
                self.state = 1419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
                if la_ == 1:
                    self.state = 1418
                    self.variable()

                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 44 or _la == 147:
                    self.state = 1421
                    self.labelExpression()

                self.state = 1425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 284:
                    self.state = 1424
                    self.pathLength()

                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 77 or _la == 156:
                    self.state = 1427
                    self.properties()

                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313:
                    self.state = 1430
                    self.match(Cypher25Parser.WHERE)
                    self.state = 1431
                    self.expression()

                self.state = 1434
                self.match(Cypher25Parser.RBRACKET)

            self.state = 1437
            self.arrowLine()
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 124 or _la == 325:
                self.state = 1438
                self.rightArrow()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertRelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowLine(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ArrowLineContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ArrowLineContext, i
                )

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def insertRelationshipLabelExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.InsertRelationshipLabelExpressionContext, 0
            )

        def leftArrow(self):
            return self.getTypedRuleContext(Cypher25Parser.LeftArrowContext, 0)

        def rightArrow(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RightArrowContext, 0
            )

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def map_(self):
            return self.getTypedRuleContext(Cypher25Parser.MapContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_insertRelationshipPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterInsertRelationshipPattern'):
                listener.enterInsertRelationshipPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitInsertRelationshipPattern'):
                listener.exitInsertRelationshipPattern(self)

    def insertRelationshipPattern(self):
        localctx = Cypher25Parser.InsertRelationshipPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 160, self.RULE_insertRelationshipPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 166 or _la == 324:
                self.state = 1441
                self.leftArrow()

            self.state = 1444
            self.arrowLine()
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 128, self._ctx)
            if la_ == 1:
                self.state = 1445
                self.match(Cypher25Parser.LBRACKET)
                self.state = 1446
                self.match(Cypher25Parser.WHERE)
                self.state = 1447
                self.expression()
                self.state = 1448
                self.match(Cypher25Parser.RBRACKET)
                pass

            elif la_ == 2:
                self.state = 1450
                self.match(Cypher25Parser.LBRACKET)
                self.state = 1452
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
                if la_ == 1:
                    self.state = 1451
                    self.variable()

                self.state = 1454
                self.insertRelationshipLabelExpression()
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 156:
                    self.state = 1455
                    self.map_()

                self.state = 1458
                self.match(Cypher25Parser.RBRACKET)
                pass

            self.state = 1462
            self.arrowLine()
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 124 or _la == 325:
                self.state = 1463
                self.rightArrow()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LeftArrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Cypher25Parser.LT, 0)

        def ARROW_LEFT_HEAD(self):
            return self.getToken(Cypher25Parser.ARROW_LEFT_HEAD, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_leftArrow

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLeftArrow'):
                listener.enterLeftArrow(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLeftArrow'):
                listener.exitLeftArrow(self)

    def leftArrow(self):
        localctx = Cypher25Parser.LeftArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_leftArrow)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            _la = self._input.LA(1)
            if not (_la == 166 or _la == 324):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrowLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW_LINE(self):
            return self.getToken(Cypher25Parser.ARROW_LINE, 0)

        def MINUS(self):
            return self.getToken(Cypher25Parser.MINUS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_arrowLine

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterArrowLine'):
                listener.enterArrowLine(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitArrowLine'):
                listener.exitArrowLine(self)

    def arrowLine(self):
        localctx = Cypher25Parser.ArrowLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_arrowLine)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            _la = self._input.LA(1)
            if not (_la == 171 or _la == 323):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightArrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(Cypher25Parser.GT, 0)

        def ARROW_RIGHT_HEAD(self):
            return self.getToken(Cypher25Parser.ARROW_RIGHT_HEAD, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_rightArrow

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRightArrow'):
                listener.enterRightArrow(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRightArrow'):
                listener.exitRightArrow(self)

    def rightArrow(self):
        localctx = Cypher25Parser.RightArrowContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 166, self.RULE_rightArrow)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            _la = self._input.LA(1)
            if not (_la == 124 or _la == 325):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_ = None  # Token
            self.to = None  # Token
            self.single = None  # Token

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def DOTDOT(self):
            return self.getToken(Cypher25Parser.DOTDOT, 0)

        def UNSIGNED_DECIMAL_INTEGER(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
            else:
                return self.getToken(
                    Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_pathLength

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPathLength'):
                listener.enterPathLength(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPathLength'):
                listener.exitPathLength(self)

    def pathLength(self):
        localctx = Cypher25Parser.PathLengthContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 168, self.RULE_pathLength)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(Cypher25Parser.TIMES)
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
            if la_ == 1:
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 5:
                    self.state = 1473
                    localctx.from_ = self.match(
                        Cypher25Parser.UNSIGNED_DECIMAL_INTEGER
                    )

                self.state = 1476
                self.match(Cypher25Parser.DOTDOT)
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 5:
                    self.state = 1477
                    localctx.to = self.match(
                        Cypher25Parser.UNSIGNED_DECIMAL_INTEGER
                    )

            elif la_ == 2:
                self.state = 1480
                localctx.single = self.match(
                    Cypher25Parser.UNSIGNED_DECIMAL_INTEGER
                )

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression4(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelExpression4Context, 0
            )

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelExpression'):
                listener.enterLabelExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelExpression'):
                listener.exitLabelExpression(self)

    def labelExpression(self):
        localctx = Cypher25Parser.LabelExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 170, self.RULE_labelExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            _la = self._input.LA(1)
            if not (_la == 44 or _la == 147):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1484
            self.labelExpression4()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelExpression4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression3(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.LabelExpression3Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.LabelExpression3Context, i
                )

        def BAR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.BAR)
            else:
                return self.getToken(Cypher25Parser.BAR, i)

        def COLON(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COLON)
            else:
                return self.getToken(Cypher25Parser.COLON, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelExpression4

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelExpression4'):
                listener.enterLabelExpression4(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelExpression4'):
                listener.exitLabelExpression4(self)

    def labelExpression4(self):
        localctx = Cypher25Parser.LabelExpression4Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 172, self.RULE_labelExpression4)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.labelExpression3()
            self.state = 1494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1487
                    self.match(Cypher25Parser.BAR)
                    self.state = 1489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 44:
                        self.state = 1488
                        self.match(Cypher25Parser.COLON)

                    self.state = 1491
                    self.labelExpression3()
                self.state = 1496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(
                    self._input, 134, self._ctx
                )

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelExpression3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression2(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.LabelExpression2Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.LabelExpression2Context, i
                )

        def AMPERSAND(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.AMPERSAND)
            else:
                return self.getToken(Cypher25Parser.AMPERSAND, i)

        def COLON(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COLON)
            else:
                return self.getToken(Cypher25Parser.COLON, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelExpression3

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelExpression3'):
                listener.enterLabelExpression3(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelExpression3'):
                listener.exitLabelExpression3(self)

    def labelExpression3(self):
        localctx = Cypher25Parser.LabelExpression3Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 174, self.RULE_labelExpression3)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.labelExpression2()
            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 44 or _la == 152:
                self.state = 1498
                _la = self._input.LA(1)
                if not (_la == 44 or _la == 152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1499
                self.labelExpression2()
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelExpression2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression1(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelExpression1Context, 0
            )

        def EXCLAMATION_MARK(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.EXCLAMATION_MARK)
            else:
                return self.getToken(Cypher25Parser.EXCLAMATION_MARK, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelExpression2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelExpression2'):
                listener.enterLabelExpression2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelExpression2'):
                listener.exitLabelExpression2(self)

    def labelExpression2(self):
        localctx = Cypher25Parser.LabelExpression2Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 176, self.RULE_labelExpression2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 153:
                self.state = 1505
                self.match(Cypher25Parser.EXCLAMATION_MARK)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1511
            self.labelExpression1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelExpression1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelExpression1

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class AnyLabelContext(LabelExpression1Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LabelExpression1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERCENT(self):
            return self.getToken(Cypher25Parser.PERCENT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAnyLabel'):
                listener.enterAnyLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAnyLabel'):
                listener.exitAnyLabel(self)

    class DynamicLabelContext(LabelExpression1Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LabelExpression1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def dynamicAnyAllExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DynamicAnyAllExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDynamicLabel'):
                listener.enterDynamicLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDynamicLabel'):
                listener.exitDynamicLabel(self)

    class LabelNameContext(LabelExpression1Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LabelExpression1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelName'):
                listener.enterLabelName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelName'):
                listener.exitLabelName(self)

    class ParenthesizedLabelExpressionContext(LabelExpression1Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LabelExpression1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def labelExpression4(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelExpression4Context, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterParenthesizedLabelExpression'):
                listener.enterParenthesizedLabelExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitParenthesizedLabelExpression'):
                listener.exitParenthesizedLabelExpression(self)

    def labelExpression1(self):
        localctx = Cypher25Parser.LabelExpression1Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 178, self.RULE_labelExpression1)
        try:
            self.state = 1520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [165]:
                localctx = Cypher25Parser.ParenthesizedLabelExpressionContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.match(Cypher25Parser.LPAREN)
                self.state = 1514
                self.labelExpression4()
                self.state = 1515
                self.match(Cypher25Parser.RPAREN)
                pass
            elif token in [172]:
                localctx = Cypher25Parser.AnyLabelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1517
                self.match(Cypher25Parser.PERCENT)
                pass
            elif token in [77]:
                localctx = Cypher25Parser.DynamicLabelContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1518
                self.dynamicAnyAllExpression()
                pass
            elif token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                localctx = Cypher25Parser.LabelNameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1519
                self.symbolicNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertNodeLabelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def COLON(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COLON)
            else:
                return self.getToken(Cypher25Parser.COLON, i)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def AMPERSAND(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.AMPERSAND)
            else:
                return self.getToken(Cypher25Parser.AMPERSAND, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_insertNodeLabelExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterInsertNodeLabelExpression'):
                listener.enterInsertNodeLabelExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitInsertNodeLabelExpression'):
                listener.exitInsertNodeLabelExpression(self)

    def insertNodeLabelExpression(self):
        localctx = Cypher25Parser.InsertNodeLabelExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 180, self.RULE_insertNodeLabelExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            _la = self._input.LA(1)
            if not (_la == 44 or _la == 147):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1523
            self.symbolicNameString()
            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 44 or _la == 152:
                self.state = 1524
                _la = self._input.LA(1)
                if not (_la == 44 or _la == 152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1525
                self.symbolicNameString()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertRelationshipLabelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_insertRelationshipLabelExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterInsertRelationshipLabelExpression'):
                listener.enterInsertRelationshipLabelExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitInsertRelationshipLabelExpression'):
                listener.exitInsertRelationshipLabelExpression(self)

    def insertRelationshipLabelExpression(self):
        localctx = Cypher25Parser.InsertRelationshipLabelExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 182, self.RULE_insertRelationshipLabelExpression
        )
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            _la = self._input.LA(1)
            if not (_la == 44 or _la == 147):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1532
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression11(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.Expression11Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.Expression11Context, i
                )

        def OR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.OR)
            else:
                return self.getToken(Cypher25Parser.OR, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression'):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression'):
                listener.exitExpression(self)

    def expression(self):
        localctx = Cypher25Parser.ExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 184, self.RULE_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self.expression11()
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 200:
                self.state = 1535
                self.match(Cypher25Parser.OR)
                self.state = 1536
                self.expression11()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression11Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression10(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.Expression10Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.Expression10Context, i
                )

        def XOR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.XOR)
            else:
                return self.getToken(Cypher25Parser.XOR, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression11

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression11'):
                listener.enterExpression11(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression11'):
                listener.exitExpression11(self)

    def expression11(self):
        localctx = Cypher25Parser.Expression11Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 186, self.RULE_expression11)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.expression10()
            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 317:
                self.state = 1543
                self.match(Cypher25Parser.XOR)
                self.state = 1544
                self.expression10()
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression10Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression9(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.Expression9Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.Expression9Context, i
                )

        def AND(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.AND)
            else:
                return self.getToken(Cypher25Parser.AND, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression10

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression10'):
                listener.enterExpression10(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression10'):
                listener.exitExpression10(self)

    def expression10(self):
        localctx = Cypher25Parser.Expression10Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 188, self.RULE_expression10)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.expression9()
            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 20:
                self.state = 1551
                self.match(Cypher25Parser.AND)
                self.state = 1552
                self.expression9()
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression9Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression8(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression8Context, 0
            )

        def NOT(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.NOT)
            else:
                return self.getToken(Cypher25Parser.NOT, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression9

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression9'):
                listener.enterExpression9(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression9'):
                listener.exitExpression9(self)

    def expression9(self):
        localctx = Cypher25Parser.Expression9Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 190, self.RULE_expression9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 142, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1558
                    self.match(Cypher25Parser.NOT)
                self.state = 1563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(
                    self._input, 142, self._ctx
                )

            self.state = 1564
            self.expression8()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression8Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression7(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.Expression7Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.Expression7Context, i
                )

        def EQ(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.EQ)
            else:
                return self.getToken(Cypher25Parser.EQ, i)

        def INVALID_NEQ(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.INVALID_NEQ)
            else:
                return self.getToken(Cypher25Parser.INVALID_NEQ, i)

        def NEQ(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.NEQ)
            else:
                return self.getToken(Cypher25Parser.NEQ, i)

        def LE(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.LE)
            else:
                return self.getToken(Cypher25Parser.LE, i)

        def GE(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.GE)
            else:
                return self.getToken(Cypher25Parser.GE, i)

        def LT(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.LT)
            else:
                return self.getToken(Cypher25Parser.LT, i)

        def GT(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.GT)
            else:
                return self.getToken(Cypher25Parser.GT, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression8

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression8'):
                listener.enterExpression8(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression8'):
                listener.exitExpression8(self)

    def expression8(self):
        localctx = Cypher25Parser.Expression8Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 192, self.RULE_expression8)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.expression7()
            self.state = 1571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la - 97) & ~0x3F) == 0
                and ((1 << (_la - 97)) & 1152921504743161857) != 0
            ) or (
                ((_la - 166) & ~0x3F) == 0 and ((1 << (_la - 166)) & 385) != 0
            ):
                self.state = 1567
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la - 97) & ~0x3F) == 0
                        and ((1 << (_la - 97)) & 1152921504743161857) != 0
                    )
                    or (
                        ((_la - 166) & ~0x3F) == 0
                        and ((1 << (_la - 166)) & 385) != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1568
                self.expression7()
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression7Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression6(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression6Context, 0
            )

        def comparisonExpression6(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComparisonExpression6Context, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression7

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression7'):
                listener.enterExpression7(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression7'):
                listener.exitExpression7(self)

    def expression7(self):
        localctx = Cypher25Parser.Expression7Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 194, self.RULE_expression7)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self.expression6()
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la) & ~0x3F) == 0 and ((1 << _la) & 9059975812874240) != 0)
                or (
                    ((_la - 96) & ~0x3F) == 0
                    and ((1 << (_la - 96)) & 2251834173423617) != 0
                )
                or _la == 230
                or _la == 273
            ):
                self.state = 1575
                self.comparisonExpression6()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonExpression6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_comparisonExpression6

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TypeComparisonContext(ComparisonExpression6Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ComparisonExpression6Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(Cypher25Parser.TypeContext, 0)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def COLONCOLON(self):
            return self.getToken(Cypher25Parser.COLONCOLON, 0)

        def TYPED(self):
            return self.getToken(Cypher25Parser.TYPED, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTypeComparison'):
                listener.enterTypeComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTypeComparison'):
                listener.exitTypeComparison(self)

    class StringAndListComparisonContext(ComparisonExpression6Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ComparisonExpression6Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression6(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression6Context, 0
            )

        def REGEQ(self):
            return self.getToken(Cypher25Parser.REGEQ, 0)

        def STARTS(self):
            return self.getToken(Cypher25Parser.STARTS, 0)

        def WITH(self):
            return self.getToken(Cypher25Parser.WITH, 0)

        def ENDS(self):
            return self.getToken(Cypher25Parser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(Cypher25Parser.CONTAINS, 0)

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringAndListComparison'):
                listener.enterStringAndListComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringAndListComparison'):
                listener.exitStringAndListComparison(self)

    class NormalFormComparisonContext(ComparisonExpression6Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ComparisonExpression6Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def NORMALIZED(self):
            return self.getToken(Cypher25Parser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def normalForm(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NormalFormContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNormalFormComparison'):
                listener.enterNormalFormComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNormalFormComparison'):
                listener.exitNormalFormComparison(self)

    class LabelComparisonContext(ComparisonExpression6Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ComparisonExpression6Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def labelExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelComparison'):
                listener.enterLabelComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelComparison'):
                listener.exitLabelComparison(self)

    class NullComparisonContext(ComparisonExpression6Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ComparisonExpression6Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def NULL(self):
            return self.getToken(Cypher25Parser.NULL, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNullComparison'):
                listener.enterNullComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNullComparison'):
                listener.exitNullComparison(self)

    def comparisonExpression6(self):
        localctx = Cypher25Parser.ComparisonExpression6Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 196, self.RULE_comparisonExpression6)
        self._la = 0  # Token type
        try:
            self.state = 1611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.StringAndListComparisonContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [230]:
                    self.state = 1578
                    self.match(Cypher25Parser.REGEQ)
                    pass
                elif token in [273]:
                    self.state = 1579
                    self.match(Cypher25Parser.STARTS)
                    self.state = 1580
                    self.match(Cypher25Parser.WITH)
                    pass
                elif token in [96]:
                    self.state = 1581
                    self.match(Cypher25Parser.ENDS)
                    self.state = 1582
                    self.match(Cypher25Parser.WITH)
                    pass
                elif token in [53]:
                    self.state = 1583
                    self.match(Cypher25Parser.CONTAINS)
                    pass
                elif token in [131]:
                    self.state = 1584
                    self.match(Cypher25Parser.IN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1587
                self.expression6()
                pass

            elif la_ == 2:
                localctx = Cypher25Parser.NullComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.match(Cypher25Parser.IS)
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 189:
                    self.state = 1589
                    self.match(Cypher25Parser.NOT)

                self.state = 1592
                self.match(Cypher25Parser.NULL)
                pass

            elif la_ == 3:
                localctx = Cypher25Parser.TypeComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1599
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [147]:
                    self.state = 1593
                    self.match(Cypher25Parser.IS)
                    self.state = 1595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 189:
                        self.state = 1594
                        self.match(Cypher25Parser.NOT)

                    self.state = 1597
                    _la = self._input.LA(1)
                    if not (_la == 45 or _la == 296):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [45]:
                    self.state = 1598
                    self.match(Cypher25Parser.COLONCOLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1601
                self.type_()
                pass

            elif la_ == 4:
                localctx = Cypher25Parser.NormalFormComparisonContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 4)
                self.state = 1602
                self.match(Cypher25Parser.IS)
                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 189:
                    self.state = 1603
                    self.match(Cypher25Parser.NOT)

                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 178) & ~0x3F) == 0 and (
                    (1 << (_la - 178)) & 15
                ) != 0:
                    self.state = 1606
                    self.normalForm()

                self.state = 1609
                self.match(Cypher25Parser.NORMALIZED)
                pass

            elif la_ == 5:
                localctx = Cypher25Parser.LabelComparisonContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 5)
                self.state = 1610
                self.labelExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NormalFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFC(self):
            return self.getToken(Cypher25Parser.NFC, 0)

        def NFD(self):
            return self.getToken(Cypher25Parser.NFD, 0)

        def NFKC(self):
            return self.getToken(Cypher25Parser.NFKC, 0)

        def NFKD(self):
            return self.getToken(Cypher25Parser.NFKD, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_normalForm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNormalForm'):
                listener.enterNormalForm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNormalForm'):
                listener.exitNormalForm(self)

    def normalForm(self):
        localctx = Cypher25Parser.NormalFormContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 198, self.RULE_normalForm)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            _la = self._input.LA(1)
            if not (
                ((_la - 178) & ~0x3F) == 0 and ((1 << (_la - 178)) & 15) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression5(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.Expression5Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.Expression5Context, i
                )

        def PLUS(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.PLUS)
            else:
                return self.getToken(Cypher25Parser.PLUS, i)

        def MINUS(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.MINUS)
            else:
                return self.getToken(Cypher25Parser.MINUS, i)

        def DOUBLEBAR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.DOUBLEBAR)
            else:
                return self.getToken(Cypher25Parser.DOUBLEBAR, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression6

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression6'):
                listener.enterExpression6(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression6'):
                listener.exitExpression6(self)

    def expression6(self):
        localctx = Cypher25Parser.Expression6Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 200, self.RULE_expression6)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.expression5()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 82 or _la == 171 or _la == 207:
                self.state = 1616
                _la = self._input.LA(1)
                if not (_la == 82 or _la == 171 or _la == 207):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1617
                self.expression5()
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression4(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.Expression4Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.Expression4Context, i
                )

        def TIMES(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.TIMES)
            else:
                return self.getToken(Cypher25Parser.TIMES, i)

        def DIVIDE(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.DIVIDE)
            else:
                return self.getToken(Cypher25Parser.DIVIDE, i)

        def PERCENT(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.PERCENT)
            else:
                return self.getToken(Cypher25Parser.PERCENT, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression5

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression5'):
                listener.enterExpression5(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression5'):
                listener.exitExpression5(self)

    def expression5(self):
        localctx = Cypher25Parser.Expression5Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 202, self.RULE_expression5)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.expression4()
            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 79 or _la == 172 or _la == 284:
                self.state = 1624
                _la = self._input.LA(1)
                if not (_la == 79 or _la == 172 or _la == 284):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1625
                self.expression4()
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression3(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.Expression3Context
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.Expression3Context, i
                )

        def POW(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.POW)
            else:
                return self.getToken(Cypher25Parser.POW, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression4

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression4'):
                listener.enterExpression4(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression4'):
                listener.exitExpression4(self)

    def expression4(self):
        localctx = Cypher25Parser.Expression4Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 204, self.RULE_expression4)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.expression3()
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 211:
                self.state = 1632
                self.match(Cypher25Parser.POW)
                self.state = 1633
                self.expression3()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression2(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression2Context, 0
            )

        def PLUS(self):
            return self.getToken(Cypher25Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(Cypher25Parser.MINUS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression3

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression3'):
                listener.enterExpression3(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression3'):
                listener.exitExpression3(self)

    def expression3(self):
        localctx = Cypher25Parser.Expression3Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 206, self.RULE_expression3)
        self._la = 0  # Token type
        try:
            self.state = 1642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 155, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.expression2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1640
                _la = self._input.LA(1)
                if not (_la == 171 or _la == 207):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1641
                self.expression2()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression1(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression1Context, 0
            )

        def postFix(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.PostFixContext)
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PostFixContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression2'):
                listener.enterExpression2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression2'):
                listener.exitExpression2(self)

    def expression2(self):
        localctx = Cypher25Parser.Expression2Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 208, self.RULE_expression2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.expression1()
            self.state = 1648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 80 or _la == 155:
                self.state = 1645
                self.postFix()
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_postFix

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class IndexPostfixContext(PostFixContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.PostFixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterIndexPostfix'):
                listener.enterIndexPostfix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitIndexPostfix'):
                listener.exitIndexPostfix(self)

    class PropertyPostfixContext(PostFixContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.PostFixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def property_(self):
            return self.getTypedRuleContext(Cypher25Parser.PropertyContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPropertyPostfix'):
                listener.enterPropertyPostfix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPropertyPostfix'):
                listener.exitPropertyPostfix(self)

    class RangePostfixContext(PostFixContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.PostFixContext
            super().__init__(parser)
            self.fromExp = None  # ExpressionContext
            self.toExp = None  # ExpressionContext
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def DOTDOT(self):
            return self.getToken(Cypher25Parser.DOTDOT, 0)

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRangePostfix'):
                listener.enterRangePostfix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRangePostfix'):
                listener.exitRangePostfix(self)

    def postFix(self):
        localctx = Cypher25Parser.PostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_postFix)
        self._la = 0  # Token type
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 159, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.PropertyPostfixContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 1651
                self.property_()
                pass

            elif la_ == 2:
                localctx = Cypher25Parser.IndexPostfixContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1652
                self.match(Cypher25Parser.LBRACKET)
                self.state = 1653
                self.expression()
                self.state = 1654
                self.match(Cypher25Parser.RBRACKET)
                pass

            elif la_ == 3:
                localctx = Cypher25Parser.RangePostfixContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1656
                self.match(Cypher25Parser.LBRACKET)
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la - 4) & ~0x3F) == 0
                        and ((1 << (_la - 4)) & -7696614948865) != 0
                    )
                    or (
                        ((_la - 68) & ~0x3F) == 0
                        and ((1 << (_la - 68)) & -73183494481672193) != 0
                    )
                    or (
                        ((_la - 132) & ~0x3F) == 0
                        and ((1 << (_la - 132)) & -7713797963777) != 0
                    )
                    or (
                        ((_la - 196) & ~0x3F) == 0
                        and ((1 << (_la - 196)) & -4629700434989191169) != 0
                    )
                    or (
                        ((_la - 260) & ~0x3F) == 0
                        and ((1 << (_la - 260)) & 4611686018410610687) != 0
                    )
                ):
                    self.state = 1657
                    localctx.fromExp = self.expression()

                self.state = 1660
                self.match(Cypher25Parser.DOTDOT)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la - 4) & ~0x3F) == 0
                        and ((1 << (_la - 4)) & -7696614948865) != 0
                    )
                    or (
                        ((_la - 68) & ~0x3F) == 0
                        and ((1 << (_la - 68)) & -73183494481672193) != 0
                    )
                    or (
                        ((_la - 132) & ~0x3F) == 0
                        and ((1 << (_la - 132)) & -7713797963777) != 0
                    )
                    or (
                        ((_la - 196) & ~0x3F) == 0
                        and ((1 << (_la - 196)) & -4629700434989191169) != 0
                    )
                    or (
                        ((_la - 260) & ~0x3F) == 0
                        and ((1 << (_la - 260)) & 4611686018410610687) != 0
                    )
                ):
                    self.state = 1661
                    localctx.toExp = self.expression()

                self.state = 1664
                self.match(Cypher25Parser.RBRACKET)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Cypher25Parser.DOT, 0)

        def propertyKeyName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyKeyNameContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_property

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterProperty'):
                listener.enterProperty(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitProperty'):
                listener.exitProperty(self)

    def property_(self):
        localctx = Cypher25Parser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(Cypher25Parser.DOT)
            self.state = 1668
            self.propertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dynamicProperty

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDynamicProperty'):
                listener.enterDynamicProperty(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDynamicProperty'):
                listener.exitDynamicProperty(self)

    def dynamicProperty(self):
        localctx = Cypher25Parser.DynamicPropertyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 214, self.RULE_dynamicProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(Cypher25Parser.LBRACKET)
            self.state = 1671
            self.expression()
            self.state = 1672
            self.match(Cypher25Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression1(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression1Context, 0
            )

        def property_(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PropertyContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PropertyContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_propertyExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPropertyExpression'):
                listener.enterPropertyExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPropertyExpression'):
                listener.exitPropertyExpression(self)

    def propertyExpression(self):
        localctx = Cypher25Parser.PropertyExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 216, self.RULE_propertyExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.expression1()
            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1675
                self.property_()
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 80):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicPropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression1(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression1Context, 0
            )

        def dynamicProperty(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DynamicPropertyContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dynamicPropertyExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDynamicPropertyExpression'):
                listener.enterDynamicPropertyExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDynamicPropertyExpression'):
                listener.exitDynamicPropertyExpression(self)

    def dynamicPropertyExpression(self):
        localctx = Cypher25Parser.DynamicPropertyExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 218, self.RULE_dynamicPropertyExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.expression1()
            self.state = 1681
            self.dynamicProperty()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cypher25Parser.LiteralContext, 0)

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def caseExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CaseExpressionContext, 0
            )

        def extendedCaseExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExtendedCaseExpressionContext, 0
            )

        def countStar(self):
            return self.getTypedRuleContext(Cypher25Parser.CountStarContext, 0)

        def existsExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExistsExpressionContext, 0
            )

        def countExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CountExpressionContext, 0
            )

        def collectExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CollectExpressionContext, 0
            )

        def mapProjection(self):
            return self.getTypedRuleContext(
                Cypher25Parser.MapProjectionContext, 0
            )

        def listComprehension(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ListComprehensionContext, 0
            )

        def listLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ListLiteralContext, 0
            )

        def patternComprehension(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternComprehensionContext, 0
            )

        def reduceExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ReduceExpressionContext, 0
            )

        def listItemsPredicate(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ListItemsPredicateContext, 0
            )

        def normalizeFunction(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NormalizeFunctionContext, 0
            )

        def vectorFunction(self):
            return self.getTypedRuleContext(
                Cypher25Parser.VectorFunctionContext, 0
            )

        def trimFunction(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TrimFunctionContext, 0
            )

        def patternExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternExpressionContext, 0
            )

        def shortestPathExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShortestPathExpressionContext, 0
            )

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ParenthesizedExpressionContext, 0
            )

        def functionInvocation(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FunctionInvocationContext, 0
            )

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_expression1

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExpression1'):
                listener.enterExpression1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExpression1'):
                listener.exitExpression1(self)

    def expression1(self):
        localctx = Cypher25Parser.Expression1Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 220, self.RULE_expression1)
        try:
            self.state = 1705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 161, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1683
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1684
                self.parameter('ANY')
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1685
                self.caseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1686
                self.extendedCaseExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1687
                self.countStar()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1688
                self.existsExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1689
                self.countExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1690
                self.collectExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1691
                self.mapProjection()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1692
                self.listComprehension()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1693
                self.listLiteral()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1694
                self.patternComprehension()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1695
                self.reduceExpression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1696
                self.listItemsPredicate()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1697
                self.normalizeFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1698
                self.vectorFunction()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1699
                self.trimFunction()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1700
                self.patternExpression()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1701
                self.shortestPathExpression()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1702
                self.parenthesizedExpression()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1703
                self.functionInvocation()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1704
                self.variable()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_literal

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NummericLiteralContext(LiteralContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NumberLiteralContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNummericLiteral'):
                listener.enterNummericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNummericLiteral'):
                listener.exitNummericLiteral(self)

    class BooleanLiteralContext(LiteralContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUE(self):
            return self.getToken(Cypher25Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Cypher25Parser.FALSE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterBooleanLiteral'):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitBooleanLiteral'):
                listener.exitBooleanLiteral(self)

    class KeywordLiteralContext(LiteralContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INF(self):
            return self.getToken(Cypher25Parser.INF, 0)

        def INFINITY(self):
            return self.getToken(Cypher25Parser.INFINITY, 0)

        def NAN(self):
            return self.getToken(Cypher25Parser.NAN, 0)

        def NULL(self):
            return self.getToken(Cypher25Parser.NULL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterKeywordLiteral'):
                listener.enterKeywordLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitKeywordLiteral'):
                listener.exitKeywordLiteral(self)

    class OtherLiteralContext(LiteralContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def map_(self):
            return self.getTypedRuleContext(Cypher25Parser.MapContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterOtherLiteral'):
                listener.enterOtherLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitOtherLiteral'):
                listener.exitOtherLiteral(self)

    class StringsLiteralContext(LiteralContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringLiteralContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringsLiteral'):
                listener.enterStringsLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringsLiteral'):
                listener.exitStringsLiteral(self)

    def literal(self):
        localctx = Cypher25Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_literal)
        try:
            self.state = 1716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 6, 7, 171]:
                localctx = Cypher25Parser.NummericLiteralContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 1707
                self.numberLiteral()
                pass
            elif token in [8, 9]:
                localctx = Cypher25Parser.StringsLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1708
                self.stringLiteral()
                pass
            elif token in [156]:
                localctx = Cypher25Parser.OtherLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1709
                self.map_()
                pass
            elif token in [294]:
                localctx = Cypher25Parser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1710
                self.match(Cypher25Parser.TRUE)
                pass
            elif token in [105]:
                localctx = Cypher25Parser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1711
                self.match(Cypher25Parser.FALSE)
                pass
            elif token in [134]:
                localctx = Cypher25Parser.KeywordLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1712
                self.match(Cypher25Parser.INF)
                pass
            elif token in [135]:
                localctx = Cypher25Parser.KeywordLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1713
                self.match(Cypher25Parser.INFINITY)
                pass
            elif token in [177]:
                localctx = Cypher25Parser.KeywordLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1714
                self.match(Cypher25Parser.NAN)
                pass
            elif token in [192]:
                localctx = Cypher25Parser.KeywordLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1715
                self.match(Cypher25Parser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Cypher25Parser.CASE, 0)

        def END(self):
            return self.getToken(Cypher25Parser.END, 0)

        def caseAlternative(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.CaseAlternativeContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.CaseAlternativeContext, i
                )

        def ELSE(self):
            return self.getToken(Cypher25Parser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_caseExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCaseExpression'):
                listener.enterCaseExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCaseExpression'):
                listener.exitCaseExpression(self)

    def caseExpression(self):
        localctx = Cypher25Parser.CaseExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 224, self.RULE_caseExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(Cypher25Parser.CASE)
            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1719
                self.caseAlternative()
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 312):
                    break

            self.state = 1726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 93:
                self.state = 1724
                self.match(Cypher25Parser.ELSE)
                self.state = 1725
                self.expression()

            self.state = 1728
            self.match(Cypher25Parser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Cypher25Parser.WHEN, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def THEN(self):
            return self.getToken(Cypher25Parser.THEN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_caseAlternative

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCaseAlternative'):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCaseAlternative'):
                listener.exitCaseAlternative(self)

    def caseAlternative(self):
        localctx = Cypher25Parser.CaseAlternativeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 226, self.RULE_caseAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.match(Cypher25Parser.WHEN)
            self.state = 1731
            self.expression()
            self.state = 1732
            self.match(Cypher25Parser.THEN)
            self.state = 1733
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtendedCaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.elseExp = None  # ExpressionContext

        def CASE(self):
            return self.getToken(Cypher25Parser.CASE, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def END(self):
            return self.getToken(Cypher25Parser.END, 0)

        def extendedCaseAlternative(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExtendedCaseAlternativeContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExtendedCaseAlternativeContext, i
                )

        def ELSE(self):
            return self.getToken(Cypher25Parser.ELSE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_extendedCaseExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExtendedCaseExpression'):
                listener.enterExtendedCaseExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExtendedCaseExpression'):
                listener.exitExtendedCaseExpression(self)

    def extendedCaseExpression(self):
        localctx = Cypher25Parser.ExtendedCaseExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 228, self.RULE_extendedCaseExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(Cypher25Parser.CASE)
            self.state = 1736
            self.expression()
            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1737
                self.extendedCaseAlternative()
                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 312):
                    break

            self.state = 1744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 93:
                self.state = 1742
                self.match(Cypher25Parser.ELSE)
                self.state = 1743
                localctx.elseExp = self.expression()

            self.state = 1746
            self.match(Cypher25Parser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtendedCaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Cypher25Parser.WHEN, 0)

        def extendedWhen(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExtendedWhenContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExtendedWhenContext, i
                )

        def THEN(self):
            return self.getToken(Cypher25Parser.THEN, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_extendedCaseAlternative

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExtendedCaseAlternative'):
                listener.enterExtendedCaseAlternative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExtendedCaseAlternative'):
                listener.exitExtendedCaseAlternative(self)

    def extendedCaseAlternative(self):
        localctx = Cypher25Parser.ExtendedCaseAlternativeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 230, self.RULE_extendedCaseAlternative)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.match(Cypher25Parser.WHEN)
            self.state = 1749
            self.extendedWhen()
            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 1750
                self.match(Cypher25Parser.COMMA)
                self.state = 1751
                self.extendedWhen()
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1757
            self.match(Cypher25Parser.THEN)
            self.state = 1758
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtendedWhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_extendedWhen

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class WhenSimpleComparisonContext(ExtendedWhenContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ExtendedWhenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression7(self):
            return self.getTypedRuleContext(
                Cypher25Parser.Expression7Context, 0
            )

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def INVALID_NEQ(self):
            return self.getToken(Cypher25Parser.INVALID_NEQ, 0)

        def NEQ(self):
            return self.getToken(Cypher25Parser.NEQ, 0)

        def LE(self):
            return self.getToken(Cypher25Parser.LE, 0)

        def GE(self):
            return self.getToken(Cypher25Parser.GE, 0)

        def LT(self):
            return self.getToken(Cypher25Parser.LT, 0)

        def GT(self):
            return self.getToken(Cypher25Parser.GT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWhenSimpleComparison'):
                listener.enterWhenSimpleComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWhenSimpleComparison'):
                listener.exitWhenSimpleComparison(self)

    class WhenEqualsContext(ExtendedWhenContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ExtendedWhenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWhenEquals'):
                listener.enterWhenEquals(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWhenEquals'):
                listener.exitWhenEquals(self)

    class WhenAdvancedComparisonContext(ExtendedWhenContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ExtendedWhenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonExpression6(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComparisonExpression6Context, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWhenAdvancedComparison'):
                listener.enterWhenAdvancedComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWhenAdvancedComparison'):
                listener.exitWhenAdvancedComparison(self)

    def extendedWhen(self):
        localctx = Cypher25Parser.ExtendedWhenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 232, self.RULE_extendedWhen)
        self._la = 0  # Token type
        try:
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.WhenSimpleComparisonContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 1760
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la - 97) & ~0x3F) == 0
                        and ((1 << (_la - 97)) & 1152921504743161857) != 0
                    )
                    or (
                        ((_la - 166) & ~0x3F) == 0
                        and ((1 << (_la - 166)) & 385) != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1761
                self.expression7()
                pass

            elif la_ == 2:
                localctx = Cypher25Parser.WhenAdvancedComparisonContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 1762
                self.comparisonExpression6()
                pass

            elif la_ == 3:
                localctx = Cypher25Parser.WhenEqualsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1763
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExp = None  # ExpressionContext
            self.barExp = None  # ExpressionContext

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def BAR(self):
            return self.getToken(Cypher25Parser.BAR, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_listComprehension

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterListComprehension'):
                listener.enterListComprehension(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitListComprehension'):
                listener.exitListComprehension(self)

    def listComprehension(self):
        localctx = Cypher25Parser.ListComprehensionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 234, self.RULE_listComprehension)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(Cypher25Parser.LBRACKET)
            self.state = 1767
            self.variable()
            self.state = 1768
            self.match(Cypher25Parser.IN)
            self.state = 1769
            self.expression()
            self.state = 1780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
            if la_ == 1:
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313:
                    self.state = 1770
                    self.match(Cypher25Parser.WHERE)
                    self.state = 1771
                    localctx.whereExp = self.expression()

                self.state = 1774
                self.match(Cypher25Parser.BAR)
                self.state = 1775
                localctx.barExp = self.expression()
                pass

            elif la_ == 2:
                self.state = 1778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313:
                    self.state = 1776
                    self.match(Cypher25Parser.WHERE)
                    self.state = 1777
                    localctx.whereExp = self.expression()

                pass

            self.state = 1782
            self.match(Cypher25Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExp = None  # ExpressionContext
            self.barExp = None  # ExpressionContext

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def pathPatternNonEmpty(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PathPatternNonEmptyContext, 0
            )

        def BAR(self):
            return self.getToken(Cypher25Parser.BAR, 0)

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_patternComprehension

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPatternComprehension'):
                listener.enterPatternComprehension(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPatternComprehension'):
                listener.exitPatternComprehension(self)

    def patternComprehension(self):
        localctx = Cypher25Parser.PatternComprehensionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 236, self.RULE_patternComprehension)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(Cypher25Parser.LBRACKET)
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la - 10) & ~0x3F) == 0
                    and ((1 << (_la - 10)) & -120259608577) != 0
                )
                or (
                    ((_la - 74) & ~0x3F) == 0
                    and ((1 << (_la - 74)) & -1143492101276137) != 0
                )
                or (
                    ((_la - 138) & ~0x3F) == 0
                    and ((1 << (_la - 138)) & -129252638721) != 0
                )
                or (
                    ((_la - 202) & ~0x3F) == 0
                    and ((1 << (_la - 202)) & -72339069296706145) != 0
                )
                or (
                    ((_la - 266) & ~0x3F) == 0
                    and ((1 << (_la - 266)) & 72057594037665791) != 0
                )
            ):
                self.state = 1785
                self.variable()
                self.state = 1786
                self.match(Cypher25Parser.EQ)

            self.state = 1790
            self.pathPatternNonEmpty()
            self.state = 1793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313:
                self.state = 1791
                self.match(Cypher25Parser.WHERE)
                self.state = 1792
                localctx.whereExp = self.expression()

            self.state = 1795
            self.match(Cypher25Parser.BAR)
            self.state = 1796
            localctx.barExp = self.expression()
            self.state = 1797
            self.match(Cypher25Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReduceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDUCE(self):
            return self.getToken(Cypher25Parser.REDUCE, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def variable(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.VariableContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.VariableContext, i
                )

        def EQ(self):
            return self.getToken(Cypher25Parser.EQ, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def COMMA(self):
            return self.getToken(Cypher25Parser.COMMA, 0)

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def BAR(self):
            return self.getToken(Cypher25Parser.BAR, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_reduceExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterReduceExpression'):
                listener.enterReduceExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitReduceExpression'):
                listener.exitReduceExpression(self)

    def reduceExpression(self):
        localctx = Cypher25Parser.ReduceExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 238, self.RULE_reduceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.match(Cypher25Parser.REDUCE)
            self.state = 1800
            self.match(Cypher25Parser.LPAREN)
            self.state = 1801
            self.variable()
            self.state = 1802
            self.match(Cypher25Parser.EQ)
            self.state = 1803
            self.expression()
            self.state = 1804
            self.match(Cypher25Parser.COMMA)
            self.state = 1805
            self.variable()
            self.state = 1806
            self.match(Cypher25Parser.IN)
            self.state = 1807
            self.expression()
            self.state = 1808
            self.match(Cypher25Parser.BAR)
            self.state = 1809
            self.expression()
            self.state = 1810
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListItemsPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inExp = None  # ExpressionContext
            self.whereExp = None  # ExpressionContext

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def ANY(self):
            return self.getToken(Cypher25Parser.ANY, 0)

        def NONE(self):
            return self.getToken(Cypher25Parser.NONE, 0)

        def SINGLE(self):
            return self.getToken(Cypher25Parser.SINGLE, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_listItemsPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterListItemsPredicate'):
                listener.enterListItemsPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitListItemsPredicate'):
                listener.exitListItemsPredicate(self)

    def listItemsPredicate(self):
        localctx = Cypher25Parser.ListItemsPredicateContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 240, self.RULE_listItemsPredicate)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            _la = self._input.LA(1)
            if not (_la == 18 or _la == 21 or _la == 186 or _la == 270):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1813
            self.match(Cypher25Parser.LPAREN)
            self.state = 1814
            self.variable()
            self.state = 1815
            self.match(Cypher25Parser.IN)
            self.state = 1816
            localctx.inExp = self.expression()
            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313:
                self.state = 1817
                self.match(Cypher25Parser.WHERE)
                self.state = 1818
                localctx.whereExp = self.expression()

            self.state = 1821
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NormalizeFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(Cypher25Parser.NORMALIZE, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(Cypher25Parser.COMMA, 0)

        def normalForm(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NormalFormContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_normalizeFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNormalizeFunction'):
                listener.enterNormalizeFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNormalizeFunction'):
                listener.exitNormalizeFunction(self)

    def normalizeFunction(self):
        localctx = Cypher25Parser.NormalizeFunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 242, self.RULE_normalizeFunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(Cypher25Parser.NORMALIZE)
            self.state = 1824
            self.match(Cypher25Parser.LPAREN)
            self.state = 1825
            self.expression()
            self.state = 1828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 46:
                self.state = 1826
                self.match(Cypher25Parser.COMMA)
                self.state = 1827
                self.normalForm()

            self.state = 1830
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VectorFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.vectorValue = None  # ExpressionContext
            self.dimension = None  # ExpressionContext

        def VECTOR(self):
            return self.getToken(Cypher25Parser.VECTOR, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def vectorCoordinateType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.VectorCoordinateTypeContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_vectorFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterVectorFunction'):
                listener.enterVectorFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitVectorFunction'):
                listener.exitVectorFunction(self)

    def vectorFunction(self):
        localctx = Cypher25Parser.VectorFunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 244, self.RULE_vectorFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(Cypher25Parser.VECTOR)
            self.state = 1833
            self.match(Cypher25Parser.LPAREN)
            self.state = 1834
            localctx.vectorValue = self.expression()
            self.state = 1835
            self.match(Cypher25Parser.COMMA)
            self.state = 1836
            localctx.dimension = self.expression()
            self.state = 1837
            self.match(Cypher25Parser.COMMA)
            self.state = 1838
            self.vectorCoordinateType()
            self.state = 1839
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trimCharacterString = None  # ExpressionContext
            self.trimSource = None  # ExpressionContext

        def TRIM(self):
            return self.getToken(Cypher25Parser.TRIM, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def FROM(self):
            return self.getToken(Cypher25Parser.FROM, 0)

        def BOTH(self):
            return self.getToken(Cypher25Parser.BOTH, 0)

        def LEADING(self):
            return self.getToken(Cypher25Parser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(Cypher25Parser.TRAILING, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_trimFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTrimFunction'):
                listener.enterTrimFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTrimFunction'):
                listener.exitTrimFunction(self)

    def trimFunction(self):
        localctx = Cypher25Parser.TrimFunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 246, self.RULE_trimFunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.match(Cypher25Parser.TRIM)
            self.state = 1842
            self.match(Cypher25Parser.LPAREN)
            self.state = 1850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
            if la_ == 1:
                self.state = 1844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
                if la_ == 1:
                    self.state = 1843
                    _la = self._input.LA(1)
                    if not (_la == 34 or _la == 158 or _la == 289):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
                if la_ == 1:
                    self.state = 1846
                    localctx.trimCharacterString = self.expression()

                self.state = 1849
                self.match(Cypher25Parser.FROM)

            self.state = 1852
            localctx.trimSource = self.expression()
            self.state = 1853
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternNonEmpty(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PathPatternNonEmptyContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_patternExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPatternExpression'):
                listener.enterPatternExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPatternExpression'):
                listener.exitPatternExpression(self)

    def patternExpression(self):
        localctx = Cypher25Parser.PatternExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 248, self.RULE_patternExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.pathPatternNonEmpty()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShortestPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathPattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShortestPathPatternContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_shortestPathExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShortestPathExpression'):
                listener.enterShortestPathExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShortestPathExpression'):
                listener.exitShortestPathExpression(self)

    def shortestPathExpression(self):
        localctx = Cypher25Parser.ShortestPathExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 250, self.RULE_shortestPathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.shortestPathPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_parenthesizedExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterParenthesizedExpression'):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitParenthesizedExpression'):
                listener.exitParenthesizedExpression(self)

    def parenthesizedExpression(self):
        localctx = Cypher25Parser.ParenthesizedExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 252, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(Cypher25Parser.LPAREN)
            self.state = 1860
            self.expression()
            self.state = 1861
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapProjectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def mapProjectionElement(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.MapProjectionElementContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.MapProjectionElementContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_mapProjection

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMapProjection'):
                listener.enterMapProjection(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMapProjection'):
                listener.exitMapProjection(self)

    def mapProjection(self):
        localctx = Cypher25Parser.MapProjectionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 254, self.RULE_mapProjection)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.variable()
            self.state = 1864
            self.match(Cypher25Parser.LCURLY)
            self.state = 1873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la - 10) & ~0x3F) == 0
                    and ((1 << (_la - 10)) & -120259608577) != 0
                )
                or (
                    ((_la - 74) & ~0x3F) == 0
                    and ((1 << (_la - 74)) & -1143492101276073) != 0
                )
                or (
                    ((_la - 138) & ~0x3F) == 0
                    and ((1 << (_la - 138)) & -129252638721) != 0
                )
                or (
                    ((_la - 202) & ~0x3F) == 0
                    and ((1 << (_la - 202)) & -72339069296706145) != 0
                )
                or (
                    ((_la - 266) & ~0x3F) == 0
                    and ((1 << (_la - 266)) & 72057594037665791) != 0
                )
            ):
                self.state = 1865
                self.mapProjectionElement()
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 46:
                    self.state = 1866
                    self.match(Cypher25Parser.COMMA)
                    self.state = 1867
                    self.mapProjectionElement()
                    self.state = 1872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1875
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapProjectionElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyKeyName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyKeyNameContext, 0
            )

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def property_(self):
            return self.getTypedRuleContext(Cypher25Parser.PropertyContext, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def DOT(self):
            return self.getToken(Cypher25Parser.DOT, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_mapProjectionElement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMapProjectionElement'):
                listener.enterMapProjectionElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMapProjectionElement'):
                listener.exitMapProjectionElement(self)

    def mapProjectionElement(self):
        localctx = Cypher25Parser.MapProjectionElementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 256, self.RULE_mapProjectionElement)
        try:
            self.state = 1885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 181, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1877
                self.propertyKeyName()
                self.state = 1878
                self.match(Cypher25Parser.COLON)
                self.state = 1879
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1881
                self.property_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1882
                self.variable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1883
                self.match(Cypher25Parser.DOT)
                self.state = 1884
                self.match(Cypher25Parser.TIMES)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CountStarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(Cypher25Parser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_countStar

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCountStar'):
                listener.enterCountStar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCountStar'):
                listener.exitCountStar(self)

    def countStar(self):
        localctx = Cypher25Parser.CountStarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_countStar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.match(Cypher25Parser.COUNT)
            self.state = 1888
            self.match(Cypher25Parser.LPAREN)
            self.state = 1889
            self.match(Cypher25Parser.TIMES)
            self.state = 1890
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExistsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RegularQueryContext, 0
            )

        def patternList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternListContext, 0
            )

        def matchMode(self):
            return self.getTypedRuleContext(Cypher25Parser.MatchModeContext, 0)

        def whereClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WhereClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_existsExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExistsExpression'):
                listener.enterExistsExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExistsExpression'):
                listener.exitExistsExpression(self)

    def existsExpression(self):
        localctx = Cypher25Parser.ExistsExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 260, self.RULE_existsExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.match(Cypher25Parser.EXISTS)
            self.state = 1893
            self.match(Cypher25Parser.LCURLY)
            self.state = 1902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 184, self._ctx)
            if la_ == 1:
                self.state = 1894
                self.regularQuery()
                pass

            elif la_ == 2:
                self.state = 1896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
                if la_ == 1:
                    self.state = 1895
                    self.matchMode()

                self.state = 1898
                self.patternList()
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313:
                    self.state = 1899
                    self.whereClause()

                pass

            self.state = 1904
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CountExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(Cypher25Parser.COUNT, 0)

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RegularQueryContext, 0
            )

        def patternList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PatternListContext, 0
            )

        def matchMode(self):
            return self.getTypedRuleContext(Cypher25Parser.MatchModeContext, 0)

        def whereClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WhereClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_countExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCountExpression'):
                listener.enterCountExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCountExpression'):
                listener.exitCountExpression(self)

    def countExpression(self):
        localctx = Cypher25Parser.CountExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 262, self.RULE_countExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.match(Cypher25Parser.COUNT)
            self.state = 1907
            self.match(Cypher25Parser.LCURLY)
            self.state = 1916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
            if la_ == 1:
                self.state = 1908
                self.regularQuery()
                pass

            elif la_ == 2:
                self.state = 1910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
                if la_ == 1:
                    self.state = 1909
                    self.matchMode()

                self.state = 1912
                self.patternList()
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313:
                    self.state = 1913
                    self.whereClause()

                pass

            self.state = 1918
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLECT(self):
            return self.getToken(Cypher25Parser.COLLECT, 0)

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def regularQuery(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RegularQueryContext, 0
            )

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_collectExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCollectExpression'):
                listener.enterCollectExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCollectExpression'):
                listener.exitCollectExpression(self)

    def collectExpression(self):
        localctx = Cypher25Parser.CollectExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 264, self.RULE_collectExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            self.match(Cypher25Parser.COLLECT)
            self.state = 1921
            self.match(Cypher25Parser.LCURLY)
            self.state = 1922
            self.regularQuery()
            self.state = 1923
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_DOUBLE(self):
            return self.getToken(Cypher25Parser.DECIMAL_DOUBLE, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def UNSIGNED_HEX_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_HEX_INTEGER, 0)

        def UNSIGNED_OCTAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_OCTAL_INTEGER, 0)

        def MINUS(self):
            return self.getToken(Cypher25Parser.MINUS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_numberLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNumberLiteral'):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNumberLiteral'):
                listener.exitNumberLiteral(self)

    def numberLiteral(self):
        localctx = Cypher25Parser.NumberLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 266, self.RULE_numberLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 171:
                self.state = 1925
                self.match(Cypher25Parser.MINUS)

            self.state = 1928
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 240) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedIntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def MINUS(self):
            return self.getToken(Cypher25Parser.MINUS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_signedIntegerLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSignedIntegerLiteral'):
                listener.enterSignedIntegerLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSignedIntegerLiteral'):
                listener.exitSignedIntegerLiteral(self)

    def signedIntegerLiteral(self):
        localctx = Cypher25Parser.SignedIntegerLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 268, self.RULE_signedIntegerLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 171:
                self.state = 1930
                self.match(Cypher25Parser.MINUS)

            self.state = 1933
            self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_listLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterListLiteral'):
                listener.enterListLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitListLiteral'):
                listener.exitListLiteral(self)

    def listLiteral(self):
        localctx = Cypher25Parser.ListLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 270, self.RULE_listLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.match(Cypher25Parser.LBRACKET)
            self.state = 1944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la - 4) & ~0x3F) == 0
                    and ((1 << (_la - 4)) & -7696614948865) != 0
                )
                or (
                    ((_la - 68) & ~0x3F) == 0
                    and ((1 << (_la - 68)) & -73183494481672193) != 0
                )
                or (
                    ((_la - 132) & ~0x3F) == 0
                    and ((1 << (_la - 132)) & -7713797963777) != 0
                )
                or (
                    ((_la - 196) & ~0x3F) == 0
                    and ((1 << (_la - 196)) & -4629700434989191169) != 0
                )
                or (
                    ((_la - 260) & ~0x3F) == 0
                    and ((1 << (_la - 260)) & 4611686018410610687) != 0
                )
            ):
                self.state = 1936
                self.expression()
                self.state = 1941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 46:
                    self.state = 1937
                    self.match(Cypher25Parser.COMMA)
                    self.state = 1938
                    self.expression()
                    self.state = 1943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1946
            self.match(Cypher25Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_propertyKeyName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPropertyKeyName'):
                listener.enterPropertyKeyName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPropertyKeyName'):
                listener.exitPropertyKeyName(self)

    def propertyKeyName(self):
        localctx = Cypher25Parser.PropertyKeyNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 272, self.RULE_propertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
            paramType: str | None = None,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.paramType = None
            self.paramType = paramType

        def DOLLAR(self):
            return self.getToken(Cypher25Parser.DOLLAR, 0)

        def parameterName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ParameterNameContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_parameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterParameter'):
                listener.enterParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitParameter'):
                listener.exitParameter(self)

    def parameter(self, paramType: str):
        localctx = Cypher25Parser.ParameterContext(
            self, self._ctx, self.state, paramType
        )
        self.enterRule(localctx, 274, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.match(Cypher25Parser.DOLLAR)
            self.state = 1951
            self.parameterName(paramType)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
            paramType: str | None = None,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.paramType = None
            self.paramType = paramType

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def UNSIGNED_OCTAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_OCTAL_INTEGER, 0)

        def EXTENDED_IDENTIFIER(self):
            return self.getToken(Cypher25Parser.EXTENDED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_parameterName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterParameterName'):
                listener.enterParameterName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitParameterName'):
                listener.exitParameterName(self)

    def parameterName(self, paramType: str):
        localctx = Cypher25Parser.ParameterNameContext(
            self, self._ctx, self.state, paramType
        )
        self.enterRule(localctx, 276, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.state = 1953
                self.symbolicNameString()
                pass
            elif token in [5]:
                self.state = 1954
                self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
                pass
            elif token in [7]:
                self.state = 1955
                self.match(Cypher25Parser.UNSIGNED_OCTAL_INTEGER)
                pass
            elif token in [322]:
                self.state = 1956
                self.match(Cypher25Parser.EXTENDED_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FunctionNameContext, 0
            )

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def functionArgument(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.FunctionArgumentContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.FunctionArgumentContext, i
                )

        def DISTINCT(self):
            return self.getToken(Cypher25Parser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_functionInvocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFunctionInvocation'):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFunctionInvocation'):
                listener.exitFunctionInvocation(self)

    def functionInvocation(self):
        localctx = Cypher25Parser.FunctionInvocationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 278, self.RULE_functionInvocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.functionName()
            self.state = 1960
            self.match(Cypher25Parser.LPAREN)
            self.state = 1962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.state = 1961
                _la = self._input.LA(1)
                if not (_la == 18 or _la == 78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la - 4) & ~0x3F) == 0
                    and ((1 << (_la - 4)) & -7696614948865) != 0
                )
                or (
                    ((_la - 68) & ~0x3F) == 0
                    and ((1 << (_la - 68)) & -73183494481672193) != 0
                )
                or (
                    ((_la - 132) & ~0x3F) == 0
                    and ((1 << (_la - 132)) & -7713797963777) != 0
                )
                or (
                    ((_la - 196) & ~0x3F) == 0
                    and ((1 << (_la - 196)) & -4629700434989191169) != 0
                )
                or (
                    ((_la - 260) & ~0x3F) == 0
                    and ((1 << (_la - 260)) & 4611686018410610687) != 0
                )
            ):
                self.state = 1964
                self.functionArgument()
                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 46:
                    self.state = 1965
                    self.match(Cypher25Parser.COMMA)
                    self.state = 1966
                    self.functionArgument()
                    self.state = 1971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1974
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_functionArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFunctionArgument'):
                listener.enterFunctionArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFunctionArgument'):
                listener.exitFunctionArgument(self)

    def functionArgument(self):
        localctx = Cypher25Parser.FunctionArgumentContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 280, self.RULE_functionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace(self):
            return self.getTypedRuleContext(Cypher25Parser.NamespaceContext, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_functionName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFunctionName'):
                listener.enterFunctionName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFunctionName'):
                listener.exitFunctionName(self)

    def functionName(self):
        localctx = Cypher25Parser.FunctionNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 282, self.RULE_functionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.namespace()
            self.state = 1979
            self.symbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def DOT(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.DOT)
            else:
                return self.getToken(Cypher25Parser.DOT, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_namespace

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNamespace'):
                listener.enterNamespace(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNamespace'):
                listener.exitNamespace(self)

    def namespace(self):
        localctx = Cypher25Parser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 196, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1981
                    self.symbolicNameString()
                    self.state = 1982
                    self.match(Cypher25Parser.DOT)
                self.state = 1988
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(
                    self._input, 196, self._ctx
                )

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicVariableNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicVariableNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_variable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterVariable'):
                listener.enterVariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitVariable'):
                listener.exitVariable(self)

    def variable(self):
        localctx = Cypher25Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self.symbolicVariableNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonEmptyNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_nonEmptyNameList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNonEmptyNameList'):
                listener.enterNonEmptyNameList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNonEmptyNameList'):
                listener.exitNonEmptyNameList(self)

    def nonEmptyNameList(self):
        localctx = Cypher25Parser.NonEmptyNameListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 288, self.RULE_nonEmptyNameList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.symbolicNameString()
            self.state = 1996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 1992
                self.match(Cypher25Parser.COMMA)
                self.state = 1993
                self.symbolicNameString()
                self.state = 1998
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePart(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.TypePartContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.TypePartContext, i
                )

        def BAR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.BAR)
            else:
                return self.getToken(Cypher25Parser.BAR, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterType'):
                listener.enterType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitType'):
                listener.exitType(self)

    def type_(self):
        localctx = Cypher25Parser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.typePart()
            self.state = 2004
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2000
                    self.match(Cypher25Parser.BAR)
                    self.state = 2001
                    self.typePart()
                self.state = 2006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(
                    self._input, 198, self._ctx
                )

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(Cypher25Parser.TypeNameContext, 0)

        def typeNullability(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TypeNullabilityContext, 0
            )

        def typeListSuffix(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.TypeListSuffixContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.TypeListSuffixContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_typePart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTypePart'):
                listener.enterTypePart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTypePart'):
                listener.exitTypePart(self)

    def typePart(self):
        localctx = Cypher25Parser.TypePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_typePart)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.typeName()
            self.state = 2009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 153 or _la == 189:
                self.state = 2008
                self.typeNullability()

            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 22 or _la == 161:
                self.state = 2011
                self.typeListSuffix()
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(Cypher25Parser.NOTHING, 0)

        def NULL(self):
            return self.getToken(Cypher25Parser.NULL, 0)

        def BOOL(self):
            return self.getToken(Cypher25Parser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(Cypher25Parser.BOOLEAN, 0)

        def VARCHAR(self):
            return self.getToken(Cypher25Parser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(Cypher25Parser.STRING, 0)

        def INT(self):
            return self.getToken(Cypher25Parser.INT, 0)

        def INTEGER(self):
            return self.getToken(Cypher25Parser.INTEGER, 0)

        def SIGNED(self):
            return self.getToken(Cypher25Parser.SIGNED, 0)

        def FLOAT(self):
            return self.getToken(Cypher25Parser.FLOAT, 0)

        def DATE(self):
            return self.getToken(Cypher25Parser.DATE, 0)

        def LOCAL(self):
            return self.getToken(Cypher25Parser.LOCAL, 0)

        def TIME(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.TIME)
            else:
                return self.getToken(Cypher25Parser.TIME, i)

        def DATETIME(self):
            return self.getToken(Cypher25Parser.DATETIME, 0)

        def ZONED(self):
            return self.getToken(Cypher25Parser.ZONED, 0)

        def WITHOUT(self):
            return self.getToken(Cypher25Parser.WITHOUT, 0)

        def WITH(self):
            return self.getToken(Cypher25Parser.WITH, 0)

        def TIMEZONE(self):
            return self.getToken(Cypher25Parser.TIMEZONE, 0)

        def ZONE(self):
            return self.getToken(Cypher25Parser.ZONE, 0)

        def TIMESTAMP(self):
            return self.getToken(Cypher25Parser.TIMESTAMP, 0)

        def DURATION(self):
            return self.getToken(Cypher25Parser.DURATION, 0)

        def POINT(self):
            return self.getToken(Cypher25Parser.POINT, 0)

        def NODE(self):
            return self.getToken(Cypher25Parser.NODE, 0)

        def VECTOR(self):
            return self.getToken(Cypher25Parser.VECTOR, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def COMMA(self):
            return self.getToken(Cypher25Parser.COMMA, 0)

        def vectorCoordinateType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.VectorCoordinateTypeContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def LT(self):
            return self.getToken(Cypher25Parser.LT, 0)

        def GT(self):
            return self.getToken(Cypher25Parser.GT, 0)

        def VERTEX(self):
            return self.getToken(Cypher25Parser.VERTEX, 0)

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def EDGE(self):
            return self.getToken(Cypher25Parser.EDGE, 0)

        def MAP(self):
            return self.getToken(Cypher25Parser.MAP, 0)

        def type_(self):
            return self.getTypedRuleContext(Cypher25Parser.TypeContext, 0)

        def LIST(self):
            return self.getToken(Cypher25Parser.LIST, 0)

        def ARRAY(self):
            return self.getToken(Cypher25Parser.ARRAY, 0)

        def PATH(self):
            return self.getToken(Cypher25Parser.PATH, 0)

        def PATHS(self):
            return self.getToken(Cypher25Parser.PATHS, 0)

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def VALUE(self):
            return self.getToken(Cypher25Parser.VALUE, 0)

        def ANY(self):
            return self.getToken(Cypher25Parser.ANY, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_typeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTypeName'):
                listener.enterTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTypeName'):
                listener.exitTypeName(self)

    def typeName(self):
        localctx = Cypher25Parser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_typeName)
        self._la = 0  # Token type
        try:
            self.state = 2101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 208, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                self.match(Cypher25Parser.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2018
                self.match(Cypher25Parser.NULL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2019
                self.match(Cypher25Parser.BOOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2020
                self.match(Cypher25Parser.BOOLEAN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2021
                self.match(Cypher25Parser.VARCHAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2022
                self.match(Cypher25Parser.STRING)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2023
                self.match(Cypher25Parser.INT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 269:
                    self.state = 2024
                    self.match(Cypher25Parser.SIGNED)

                self.state = 2027
                self.match(Cypher25Parser.INTEGER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2028
                self.match(Cypher25Parser.FLOAT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2029
                self.match(Cypher25Parser.DATE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2030
                self.match(Cypher25Parser.LOCAL)
                self.state = 2031
                _la = self._input.LA(1)
                if not (_la == 65 or _la == 283):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2032
                self.match(Cypher25Parser.ZONED)
                self.state = 2033
                _la = self._input.LA(1)
                if not (_la == 65 or _la == 283):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2034
                self.match(Cypher25Parser.TIME)
                self.state = 2035
                _la = self._input.LA(1)
                if not (_la == 314 or _la == 315):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2039
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [286]:
                    self.state = 2036
                    self.match(Cypher25Parser.TIMEZONE)
                    pass
                elif token in [283]:
                    self.state = 2037
                    self.match(Cypher25Parser.TIME)
                    self.state = 2038
                    self.match(Cypher25Parser.ZONE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2041
                self.match(Cypher25Parser.TIMESTAMP)
                self.state = 2042
                _la = self._input.LA(1)
                if not (_la == 314 or _la == 315):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2046
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [286]:
                    self.state = 2043
                    self.match(Cypher25Parser.TIMEZONE)
                    pass
                elif token in [283]:
                    self.state = 2044
                    self.match(Cypher25Parser.TIME)
                    self.state = 2045
                    self.match(Cypher25Parser.ZONE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2048
                self.match(Cypher25Parser.DURATION)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2049
                self.match(Cypher25Parser.POINT)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2050
                self.match(Cypher25Parser.NODE)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2051
                self.match(Cypher25Parser.VECTOR)
                self.state = 2052
                self.match(Cypher25Parser.LPAREN)
                self.state = 2053
                self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
                self.state = 2054
                self.match(Cypher25Parser.COMMA)
                self.state = 2055
                self.vectorCoordinateType()
                self.state = 2056
                self.match(Cypher25Parser.RPAREN)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2058
                self.match(Cypher25Parser.VECTOR)
                self.state = 2063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 204, self._ctx)
                if la_ == 1:
                    self.state = 2059
                    self.match(Cypher25Parser.LT)
                    self.state = 2060
                    self.vectorCoordinateType()
                    self.state = 2061
                    self.match(Cypher25Parser.GT)

                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 165:
                    self.state = 2065
                    self.match(Cypher25Parser.LPAREN)
                    self.state = 2066
                    self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
                    self.state = 2067
                    self.match(Cypher25Parser.RPAREN)

                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2070
                self.match(Cypher25Parser.VERTEX)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2071
                self.match(Cypher25Parser.RELATIONSHIP)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2072
                self.match(Cypher25Parser.EDGE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2073
                self.match(Cypher25Parser.MAP)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2074
                _la = self._input.LA(1)
                if not (_la == 22 or _la == 161):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2075
                self.match(Cypher25Parser.LT)
                self.state = 2076
                self.type_()
                self.state = 2077
                self.match(Cypher25Parser.GT)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2079
                self.match(Cypher25Parser.PATH)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2080
                self.match(Cypher25Parser.PATHS)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2081
                self.match(Cypher25Parser.PROPERTY)
                self.state = 2082
                self.match(Cypher25Parser.VALUE)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2083
                self.match(Cypher25Parser.ANY)
                self.state = 2099
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 207, self._ctx)
                if la_ == 1:
                    self.state = 2084
                    self.match(Cypher25Parser.NODE)

                elif la_ == 2:
                    self.state = 2085
                    self.match(Cypher25Parser.VERTEX)

                elif la_ == 3:
                    self.state = 2086
                    self.match(Cypher25Parser.RELATIONSHIP)

                elif la_ == 4:
                    self.state = 2087
                    self.match(Cypher25Parser.EDGE)

                elif la_ == 5:
                    self.state = 2088
                    self.match(Cypher25Parser.MAP)

                elif la_ == 6:
                    self.state = 2089
                    self.match(Cypher25Parser.PROPERTY)
                    self.state = 2090
                    self.match(Cypher25Parser.VALUE)

                elif la_ == 7:
                    self.state = 2092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 307:
                        self.state = 2091
                        self.match(Cypher25Parser.VALUE)

                    self.state = 2094
                    self.match(Cypher25Parser.LT)
                    self.state = 2095
                    self.type_()
                    self.state = 2096
                    self.match(Cypher25Parser.GT)

                elif la_ == 8:
                    self.state = 2098
                    self.match(Cypher25Parser.VALUE)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNullabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def NULL(self):
            return self.getToken(Cypher25Parser.NULL, 0)

        def EXCLAMATION_MARK(self):
            return self.getToken(Cypher25Parser.EXCLAMATION_MARK, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_typeNullability

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTypeNullability'):
                listener.enterTypeNullability(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTypeNullability'):
                listener.exitTypeNullability(self)

    def typeNullability(self):
        localctx = Cypher25Parser.TypeNullabilityContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 296, self.RULE_typeNullability)
        try:
            self.state = 2106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [189]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2103
                self.match(Cypher25Parser.NOT)
                self.state = 2104
                self.match(Cypher25Parser.NULL)
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2105
                self.match(Cypher25Parser.EXCLAMATION_MARK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeListSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(Cypher25Parser.LIST, 0)

        def ARRAY(self):
            return self.getToken(Cypher25Parser.ARRAY, 0)

        def typeNullability(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TypeNullabilityContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_typeListSuffix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTypeListSuffix'):
                listener.enterTypeListSuffix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTypeListSuffix'):
                listener.exitTypeListSuffix(self)

    def typeListSuffix(self):
        localctx = Cypher25Parser.TypeListSuffixContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 298, self.RULE_typeListSuffix)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            _la = self._input.LA(1)
            if not (_la == 22 or _la == 161):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 153 or _la == 189:
                self.state = 2109
                self.typeNullability()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VectorCoordinateTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(Cypher25Parser.INT, 0)

        def INTEGER(self):
            return self.getToken(Cypher25Parser.INTEGER, 0)

        def INTEGER64(self):
            return self.getToken(Cypher25Parser.INTEGER64, 0)

        def INTEGER32(self):
            return self.getToken(Cypher25Parser.INTEGER32, 0)

        def INTEGER16(self):
            return self.getToken(Cypher25Parser.INTEGER16, 0)

        def INTEGER8(self):
            return self.getToken(Cypher25Parser.INTEGER8, 0)

        def INT64(self):
            return self.getToken(Cypher25Parser.INT64, 0)

        def INT32(self):
            return self.getToken(Cypher25Parser.INT32, 0)

        def INT16(self):
            return self.getToken(Cypher25Parser.INT16, 0)

        def INT8(self):
            return self.getToken(Cypher25Parser.INT8, 0)

        def FLOAT(self):
            return self.getToken(Cypher25Parser.FLOAT, 0)

        def FLOAT64(self):
            return self.getToken(Cypher25Parser.FLOAT64, 0)

        def FLOAT32(self):
            return self.getToken(Cypher25Parser.FLOAT32, 0)

        def typeNullability(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TypeNullabilityContext, 0
            )

        def SIGNED(self):
            return self.getToken(Cypher25Parser.SIGNED, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_vectorCoordinateType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterVectorCoordinateType'):
                listener.enterVectorCoordinateType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitVectorCoordinateType'):
                listener.exitVectorCoordinateType(self)

    def vectorCoordinateType(self):
        localctx = Cypher25Parser.VectorCoordinateTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 300, self.RULE_vectorCoordinateType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137]:
                self.state = 2112
                self.match(Cypher25Parser.INT)
                pass
            elif token in [142, 269]:
                self.state = 2114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 269:
                    self.state = 2113
                    self.match(Cypher25Parser.SIGNED)

                self.state = 2116
                self.match(Cypher25Parser.INTEGER)
                pass
            elif token in [143]:
                self.state = 2117
                self.match(Cypher25Parser.INTEGER64)
                pass
            elif token in [144]:
                self.state = 2118
                self.match(Cypher25Parser.INTEGER32)
                pass
            elif token in [145]:
                self.state = 2119
                self.match(Cypher25Parser.INTEGER16)
                pass
            elif token in [146]:
                self.state = 2120
                self.match(Cypher25Parser.INTEGER8)
                pass
            elif token in [138]:
                self.state = 2121
                self.match(Cypher25Parser.INT64)
                pass
            elif token in [139]:
                self.state = 2122
                self.match(Cypher25Parser.INT32)
                pass
            elif token in [140]:
                self.state = 2123
                self.match(Cypher25Parser.INT16)
                pass
            elif token in [141]:
                self.state = 2124
                self.match(Cypher25Parser.INT8)
                pass
            elif token in [109]:
                self.state = 2125
                self.match(Cypher25Parser.FLOAT)
                pass
            elif token in [110]:
                self.state = 2126
                self.match(Cypher25Parser.FLOAT64)
                pass
            elif token in [111]:
                self.state = 2127
                self.match(Cypher25Parser.FLOAT32)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 153 or _la == 189:
                self.state = 2130
                self.typeNullability()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateCommandContext, 0
            )

        def dropCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DropCommandContext, 0
            )

        def alterCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AlterCommandContext, 0
            )

        def renameCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RenameCommandContext, 0
            )

        def denyCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DenyCommandContext, 0
            )

        def revokeCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RevokeCommandContext, 0
            )

        def grantCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GrantCommandContext, 0
            )

        def startDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StartDatabaseContext, 0
            )

        def stopDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StopDatabaseContext, 0
            )

        def enableServerCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EnableServerCommandContext, 0
            )

        def allocationCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AllocationCommandContext, 0
            )

        def showCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandContext, 0
            )

        def terminateCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TerminateCommandContext, 0
            )

        def useClause(self):
            return self.getTypedRuleContext(Cypher25Parser.UseClauseContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_command

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCommand'):
                listener.enterCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCommand'):
                listener.exitCommand(self)

    def command(self):
        localctx = Cypher25Parser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_command)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 303:
                self.state = 2133
                self.useClause()

            self.state = 2149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.state = 2136
                self.createCommand()
                pass
            elif token in [84]:
                self.state = 2137
                self.dropCommand()
                pass
            elif token in [19]:
                self.state = 2138
                self.alterCommand()
                pass
            elif token in [229]:
                self.state = 2139
                self.renameCommand()
                pass
            elif token in [71]:
                self.state = 2140
                self.denyCommand()
                pass
            elif token in [245]:
                self.state = 2141
                self.revokeCommand()
                pass
            elif token in [119]:
                self.state = 2142
                self.grantCommand()
                pass
            elif token in [272]:
                self.state = 2143
                self.startDatabase()
                pass
            elif token in [275]:
                self.state = 2144
                self.stopDatabase()
                pass
            elif token in [90]:
                self.state = 2145
                self.enableServerCommand()
                pass
            elif token in [67, 85, 227]:
                self.state = 2146
                self.allocationCommand()
                pass
            elif token in [268]:
                self.state = 2147
                self.showCommand()
                pass
            elif token in [280]:
                self.state = 2148
                self.terminateCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(Cypher25Parser.CREATE, 0)

        def createAlias(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateAliasContext, 0
            )

        def createCompositeDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateCompositeDatabaseContext, 0
            )

        def createConstraint(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateConstraintContext, 0
            )

        def createDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateDatabaseContext, 0
            )

        def createIndex(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateIndexContext, 0
            )

        def createRole(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateRoleContext, 0
            )

        def createUser(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateUserContext, 0
            )

        def OR(self):
            return self.getToken(Cypher25Parser.OR, 0)

        def REPLACE(self):
            return self.getToken(Cypher25Parser.REPLACE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateCommand'):
                listener.enterCreateCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateCommand'):
                listener.exitCreateCommand(self)

    def createCommand(self):
        localctx = Cypher25Parser.CreateCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 304, self.RULE_createCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.match(Cypher25Parser.CREATE)
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 200:
                self.state = 2152
                self.match(Cypher25Parser.OR)
                self.state = 2153
                self.match(Cypher25Parser.REPLACE)

            self.state = 2163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 2156
                self.createAlias()
                pass
            elif token in [49]:
                self.state = 2157
                self.createCompositeDatabase()
                pass
            elif token in [51]:
                self.state = 2158
                self.createConstraint()
                pass
            elif token in [62]:
                self.state = 2159
                self.createDatabase()
                pass
            elif token in [115, 132, 164, 209, 223, 281, 309]:
                self.state = 2160
                self.createIndex()
                pass
            elif token in [130, 246]:
                self.state = 2161
                self.createRole()
                pass
            elif token in [304]:
                self.state = 2162
                self.createUser()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(Cypher25Parser.DROP, 0)

        def dropAlias(self):
            return self.getTypedRuleContext(Cypher25Parser.DropAliasContext, 0)

        def dropConstraint(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DropConstraintContext, 0
            )

        def dropDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DropDatabaseContext, 0
            )

        def dropIndex(self):
            return self.getTypedRuleContext(Cypher25Parser.DropIndexContext, 0)

        def dropRole(self):
            return self.getTypedRuleContext(Cypher25Parser.DropRoleContext, 0)

        def dropServer(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DropServerContext, 0
            )

        def dropUser(self):
            return self.getTypedRuleContext(Cypher25Parser.DropUserContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropCommand'):
                listener.enterDropCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropCommand'):
                listener.exitDropCommand(self)

    def dropCommand(self):
        localctx = Cypher25Parser.DropCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 306, self.RULE_dropCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            self.match(Cypher25Parser.DROP)
            self.state = 2173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 2166
                self.dropAlias()
                pass
            elif token in [51]:
                self.state = 2167
                self.dropConstraint()
                pass
            elif token in [49, 62]:
                self.state = 2168
                self.dropDatabase()
                pass
            elif token in [132]:
                self.state = 2169
                self.dropIndex()
                pass
            elif token in [246]:
                self.state = 2170
                self.dropRole()
                pass
            elif token in [259]:
                self.state = 2171
                self.dropServer()
                pass
            elif token in [304]:
                self.state = 2172
                self.dropUser()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(Cypher25Parser.SHOW, 0)

        def showAliases(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowAliasesContext, 0
            )

        def showConstraintCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintCommandContext, 0
            )

        def showCurrentUser(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCurrentUserContext, 0
            )

        def showDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowDatabaseContext, 0
            )

        def showFunctions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowFunctionsContext, 0
            )

        def showIndexCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowIndexCommandContext, 0
            )

        def showPrivileges(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowPrivilegesContext, 0
            )

        def showProcedures(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowProceduresContext, 0
            )

        def showRolePrivileges(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowRolePrivilegesContext, 0
            )

        def showRoles(self):
            return self.getTypedRuleContext(Cypher25Parser.ShowRolesContext, 0)

        def showServers(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowServersContext, 0
            )

        def showSettings(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowSettingsContext, 0
            )

        def showSupportedPrivileges(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowSupportedPrivilegesContext, 0
            )

        def showTransactions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowTransactionsContext, 0
            )

        def showUserPrivileges(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowUserPrivilegesContext, 0
            )

        def showUsers(self):
            return self.getTypedRuleContext(Cypher25Parser.ShowUsersContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowCommand'):
                listener.enterShowCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowCommand'):
                listener.exitShowCommand(self)

    def showCommand(self):
        localctx = Cypher25Parser.ShowCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 308, self.RULE_showCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.match(Cypher25Parser.SHOW)
            self.state = 2192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
            if la_ == 1:
                self.state = 2176
                self.showAliases()
                pass

            elif la_ == 2:
                self.state = 2177
                self.showConstraintCommand()
                pass

            elif la_ == 3:
                self.state = 2178
                self.showCurrentUser()
                pass

            elif la_ == 4:
                self.state = 2179
                self.showDatabase()
                pass

            elif la_ == 5:
                self.state = 2180
                self.showFunctions()
                pass

            elif la_ == 6:
                self.state = 2181
                self.showIndexCommand()
                pass

            elif la_ == 7:
                self.state = 2182
                self.showPrivileges()
                pass

            elif la_ == 8:
                self.state = 2183
                self.showProcedures()
                pass

            elif la_ == 9:
                self.state = 2184
                self.showRolePrivileges()
                pass

            elif la_ == 10:
                self.state = 2185
                self.showRoles()
                pass

            elif la_ == 11:
                self.state = 2186
                self.showServers()
                pass

            elif la_ == 12:
                self.state = 2187
                self.showSettings()
                pass

            elif la_ == 13:
                self.state = 2188
                self.showSupportedPrivileges()
                pass

            elif la_ == 14:
                self.state = 2189
                self.showTransactions()
                pass

            elif la_ == 15:
                self.state = 2190
                self.showUserPrivileges()
                pass

            elif la_ == 16:
                self.state = 2191
                self.showUsers()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowCommandYieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yieldClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.YieldClauseContext, 0
            )

        def returnClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ReturnClauseContext, 0
            )

        def whereClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WhereClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showCommandYield

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowCommandYield'):
                listener.enterShowCommandYield(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowCommandYield'):
                listener.exitShowCommandYield(self)

    def showCommandYield(self):
        localctx = Cypher25Parser.ShowCommandYieldContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 310, self.RULE_showCommandYield)
        self._la = 0  # Token type
        try:
            self.state = 2199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [318]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2194
                self.yieldClause()
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 244:
                    self.state = 2195
                    self.returnClause()

                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2198
                self.whereClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.VariableContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.VariableContext, i
                )

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_yieldItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterYieldItem'):
                listener.enterYieldItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitYieldItem'):
                listener.exitYieldItem(self)

    def yieldItem(self):
        localctx = Cypher25Parser.YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_yieldItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            self.variable()
            self.state = 2204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 2202
                self.match(Cypher25Parser.AS)
                self.state = 2203
                self.variable()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldSkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signedIntegerLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SignedIntegerLiteralContext, 0
            )

        def OFFSET(self):
            return self.getToken(Cypher25Parser.OFFSET, 0)

        def SKIPROWS(self):
            return self.getToken(Cypher25Parser.SKIPROWS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_yieldSkip

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterYieldSkip'):
                listener.enterYieldSkip(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitYieldSkip'):
                listener.exitYieldSkip(self)

    def yieldSkip(self):
        localctx = Cypher25Parser.YieldSkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_yieldSkip)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            _la = self._input.LA(1)
            if not (_la == 194 or _la == 271):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2207
            self.signedIntegerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMITROWS(self):
            return self.getToken(Cypher25Parser.LIMITROWS, 0)

        def signedIntegerLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SignedIntegerLiteralContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_yieldLimit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterYieldLimit'):
                listener.enterYieldLimit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitYieldLimit'):
                listener.exitYieldLimit(self)

    def yieldLimit(self):
        localctx = Cypher25Parser.YieldLimitContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 316, self.RULE_yieldLimit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.match(Cypher25Parser.LIMITROWS)
            self.state = 2210
            self.signedIntegerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Cypher25Parser.YIELD, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def yieldItem(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.YieldItemContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.YieldItemContext, i
                )

        def orderBy(self):
            return self.getTypedRuleContext(Cypher25Parser.OrderByContext, 0)

        def yieldSkip(self):
            return self.getTypedRuleContext(Cypher25Parser.YieldSkipContext, 0)

        def yieldLimit(self):
            return self.getTypedRuleContext(
                Cypher25Parser.YieldLimitContext, 0
            )

        def whereClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WhereClauseContext, 0
            )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_yieldClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterYieldClause'):
                listener.enterYieldClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitYieldClause'):
                listener.exitYieldClause(self)

    def yieldClause(self):
        localctx = Cypher25Parser.YieldClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 318, self.RULE_yieldClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2212
            self.match(Cypher25Parser.YIELD)
            self.state = 2222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.state = 2213
                self.match(Cypher25Parser.TIMES)
                pass
            elif token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.state = 2214
                self.yieldItem()
                self.state = 2219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 46:
                    self.state = 2215
                    self.match(Cypher25Parser.COMMA)
                    self.state = 2216
                    self.yieldItem()
                    self.state = 2221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 201:
                self.state = 2224
                self.orderBy()

            self.state = 2228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 194 or _la == 271:
                self.state = 2227
                self.yieldSkip()

            self.state = 2231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 160:
                self.state = 2230
                self.yieldLimit()

            self.state = 2234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313:
                self.state = 2233
                self.whereClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommandOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS(self):
            return self.getToken(Cypher25Parser.OPTIONS, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.MapOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_commandOptions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCommandOptions'):
                listener.enterCommandOptions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCommandOptions'):
                listener.exitCommandOptions(self)

    def commandOptions(self):
        localctx = Cypher25Parser.CommandOptionsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 320, self.RULE_commandOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2236
            self.match(Cypher25Parser.OPTIONS)
            self.state = 2237
            self.mapOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminateCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATE(self):
            return self.getToken(Cypher25Parser.TERMINATE, 0)

        def terminateTransactions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TerminateTransactionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_terminateCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTerminateCommand'):
                listener.enterTerminateCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTerminateCommand'):
                listener.exitTerminateCommand(self)

    def terminateCommand(self):
        localctx = Cypher25Parser.TerminateCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 322, self.RULE_terminateCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.match(Cypher25Parser.TERMINATE)
            self.state = 2240
            self.terminateTransactions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComposableCommandClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def terminateCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TerminateCommandContext, 0
            )

        def composableShowCommandClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComposableShowCommandClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_composableCommandClauses

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterComposableCommandClauses'):
                listener.enterComposableCommandClauses(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitComposableCommandClauses'):
                listener.exitComposableCommandClauses(self)

    def composableCommandClauses(self):
        localctx = Cypher25Parser.ComposableCommandClausesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 324, self.RULE_composableCommandClauses)
        try:
            self.state = 2244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2242
                self.terminateCommand()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2243
                self.composableShowCommandClauses()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComposableShowCommandClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(Cypher25Parser.SHOW, 0)

        def showIndexCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowIndexCommandContext, 0
            )

        def showConstraintCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintCommandContext, 0
            )

        def showFunctions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowFunctionsContext, 0
            )

        def showProcedures(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowProceduresContext, 0
            )

        def showSettings(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowSettingsContext, 0
            )

        def showTransactions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowTransactionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_composableShowCommandClauses

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterComposableShowCommandClauses'):
                listener.enterComposableShowCommandClauses(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitComposableShowCommandClauses'):
                listener.exitComposableShowCommandClauses(self)

    def composableShowCommandClauses(self):
        localctx = Cypher25Parser.ComposableShowCommandClausesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 326, self.RULE_composableShowCommandClauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2246
            self.match(Cypher25Parser.SHOW)
            self.state = 2253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
            if la_ == 1:
                self.state = 2247
                self.showIndexCommand()
                pass

            elif la_ == 2:
                self.state = 2248
                self.showConstraintCommand()
                pass

            elif la_ == 3:
                self.state = 2249
                self.showFunctions()
                pass

            elif la_ == 4:
                self.state = 2250
                self.showProcedures()
                pass

            elif la_ == 5:
                self.state = 2251
                self.showSettings()
                pass

            elif la_ == 6:
                self.state = 2252
                self.showTransactions()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowIndexCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def showIndexesEnd(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowIndexesEndContext, 0
            )

        def showIndexType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowIndexTypeContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showIndexCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowIndexCommand'):
                listener.enterShowIndexCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowIndexCommand'):
                listener.exitShowIndexCommand(self)

    def showIndexCommand(self):
        localctx = Cypher25Parser.ShowIndexCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 328, self.RULE_showIndexCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 18
                or _la == 115
                or _la == 164
                or _la == 209
                or _la == 223
                or _la == 281
                or _la == 309
            ):
                self.state = 2255
                self.showIndexType()

            self.state = 2258
            self.showIndexesEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowIndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def FULLTEXT(self):
            return self.getToken(Cypher25Parser.FULLTEXT, 0)

        def LOOKUP(self):
            return self.getToken(Cypher25Parser.LOOKUP, 0)

        def POINT(self):
            return self.getToken(Cypher25Parser.POINT, 0)

        def RANGE(self):
            return self.getToken(Cypher25Parser.RANGE, 0)

        def TEXT(self):
            return self.getToken(Cypher25Parser.TEXT, 0)

        def VECTOR(self):
            return self.getToken(Cypher25Parser.VECTOR, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showIndexType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowIndexType'):
                listener.enterShowIndexType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowIndexType'):
                listener.exitShowIndexType(self)

    def showIndexType(self):
        localctx = Cypher25Parser.ShowIndexTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 330, self.RULE_showIndexType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            _la = self._input.LA(1)
            if not (
                _la == 18
                or _la == 115
                or _la == 164
                or _la == 209
                or _la == 223
                or _la == 281
                or _la == 309
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowIndexesEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.IndexTokenContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def composableCommandClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComposableCommandClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showIndexesEnd

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowIndexesEnd'):
                listener.enterShowIndexesEnd(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowIndexesEnd'):
                listener.exitShowIndexesEnd(self)

    def showIndexesEnd(self):
        localctx = Cypher25Parser.ShowIndexesEndContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 332, self.RULE_showIndexesEnd)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.indexToken()
            self.state = 2264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2263
                self.showCommandYield()

            self.state = 2267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 268 or _la == 280:
                self.state = 2266
                self.composableCommandClauses()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowConstraintCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showConstraintCommand

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ShowConstraintUniqueContext(ShowConstraintCommandContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ShowConstraintCommandContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def showConstraintsEnd(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintsEndContext, 0
            )

        def UNIQUE(self):
            return self.getToken(Cypher25Parser.UNIQUE, 0)

        def UNIQUENESS(self):
            return self.getToken(Cypher25Parser.UNIQUENESS, 0)

        def showConstraintEntity(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintEntityContext, 0
            )

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowConstraintUnique'):
                listener.enterShowConstraintUnique(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowConstraintUnique'):
                listener.exitShowConstraintUnique(self)

    class ShowConstraintExistContext(ShowConstraintCommandContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ShowConstraintCommandContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constraintExistType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ConstraintExistTypeContext, 0
            )

        def showConstraintsEnd(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintsEndContext, 0
            )

        def showConstraintEntity(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintEntityContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowConstraintExist'):
                listener.enterShowConstraintExist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowConstraintExist'):
                listener.exitShowConstraintExist(self)

    class ShowConstraintAllContext(ShowConstraintCommandContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ShowConstraintCommandContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def showConstraintsEnd(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintsEndContext, 0
            )

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowConstraintAll'):
                listener.enterShowConstraintAll(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowConstraintAll'):
                listener.exitShowConstraintAll(self)

    class ShowConstraintKeyContext(ShowConstraintCommandContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ShowConstraintCommandContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(Cypher25Parser.KEY, 0)

        def showConstraintsEnd(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintsEndContext, 0
            )

        def showConstraintEntity(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintEntityContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowConstraintKey'):
                listener.enterShowConstraintKey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowConstraintKey'):
                listener.exitShowConstraintKey(self)

    class ShowConstraintPropTypeContext(ShowConstraintCommandContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ShowConstraintCommandContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def TYPE(self):
            return self.getToken(Cypher25Parser.TYPE, 0)

        def showConstraintsEnd(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintsEndContext, 0
            )

        def showConstraintEntity(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowConstraintEntityContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowConstraintPropType'):
                listener.enterShowConstraintPropType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowConstraintPropType'):
                listener.exitShowConstraintPropType(self)

    def showConstraintCommand(self):
        localctx = Cypher25Parser.ShowConstraintCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 334, self.RULE_showConstraintCommand)
        self._la = 0  # Token type
        try:
            self.state = 2298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 240, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.ShowConstraintAllContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 2269
                    self.match(Cypher25Parser.ALL)

                self.state = 2272
                self.showConstraintsEnd()
                pass

            elif la_ == 2:
                localctx = Cypher25Parser.ShowConstraintExistContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 2274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 183) & ~0x3F) == 0 and (
                    (1 << (_la - 183)) & 844424930131969
                ) != 0:
                    self.state = 2273
                    self.showConstraintEntity()

                self.state = 2276
                self.constraintExistType()
                self.state = 2277
                self.showConstraintsEnd()
                pass

            elif la_ == 3:
                localctx = Cypher25Parser.ShowConstraintKeyContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 3)
                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 183) & ~0x3F) == 0 and (
                    (1 << (_la - 183)) & 844424930131969
                ) != 0:
                    self.state = 2279
                    self.showConstraintEntity()

                self.state = 2282
                self.match(Cypher25Parser.KEY)
                self.state = 2283
                self.showConstraintsEnd()
                pass

            elif la_ == 4:
                localctx = Cypher25Parser.ShowConstraintPropTypeContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 4)
                self.state = 2285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 183) & ~0x3F) == 0 and (
                    (1 << (_la - 183)) & 844424930131969
                ) != 0:
                    self.state = 2284
                    self.showConstraintEntity()

                self.state = 2287
                self.match(Cypher25Parser.PROPERTY)
                self.state = 2288
                self.match(Cypher25Parser.TYPE)
                self.state = 2289
                self.showConstraintsEnd()
                pass

            elif la_ == 5:
                localctx = Cypher25Parser.ShowConstraintUniqueContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 5)
                self.state = 2291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 183) & ~0x3F) == 0 and (
                    (1 << (_la - 183)) & 844424930131969
                ) != 0:
                    self.state = 2290
                    self.showConstraintEntity()

                self.state = 2294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 219:
                    self.state = 2293
                    self.match(Cypher25Parser.PROPERTY)

                self.state = 2296
                _la = self._input.LA(1)
                if not (_la == 299 or _la == 300):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2297
                self.showConstraintsEnd()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowConstraintEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showConstraintEntity

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NodeEntityContext(ShowConstraintEntityContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ShowConstraintEntityContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NODE(self):
            return self.getToken(Cypher25Parser.NODE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNodeEntity'):
                listener.enterNodeEntity(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNodeEntity'):
                listener.exitNodeEntity(self)

    class RelEntityContext(ShowConstraintEntityContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ShowConstraintEntityContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def REL(self):
            return self.getToken(Cypher25Parser.REL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRelEntity'):
                listener.enterRelEntity(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRelEntity'):
                listener.exitRelEntity(self)

    def showConstraintEntity(self):
        localctx = Cypher25Parser.ShowConstraintEntityContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 336, self.RULE_showConstraintEntity)
        self._la = 0  # Token type
        try:
            self.state = 2302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                localctx = Cypher25Parser.NodeEntityContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2300
                self.match(Cypher25Parser.NODE)
                pass
            elif token in [231, 232]:
                localctx = Cypher25Parser.RelEntityContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2301
                _la = self._input.LA(1)
                if not (_la == 231 or _la == 232):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintExistTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTENCE(self):
            return self.getToken(Cypher25Parser.EXISTENCE, 0)

        def EXIST(self):
            return self.getToken(Cypher25Parser.EXIST, 0)

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_constraintExistType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterConstraintExistType'):
                listener.enterConstraintExistType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitConstraintExistType'):
                listener.exitConstraintExistType(self)

    def constraintExistType(self):
        localctx = Cypher25Parser.ConstraintExistTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 338, self.RULE_constraintExistType)
        try:
            self.state = 2310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 242, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2304
                self.match(Cypher25Parser.EXISTENCE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2305
                self.match(Cypher25Parser.EXIST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2306
                self.match(Cypher25Parser.PROPERTY)
                self.state = 2307
                self.match(Cypher25Parser.EXISTENCE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2308
                self.match(Cypher25Parser.PROPERTY)
                self.state = 2309
                self.match(Cypher25Parser.EXIST)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowConstraintsEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ConstraintTokenContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def composableCommandClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComposableCommandClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showConstraintsEnd

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowConstraintsEnd'):
                listener.enterShowConstraintsEnd(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowConstraintsEnd'):
                listener.exitShowConstraintsEnd(self)

    def showConstraintsEnd(self):
        localctx = Cypher25Parser.ShowConstraintsEndContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 340, self.RULE_showConstraintsEnd)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2312
            self.constraintToken()
            self.state = 2314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2313
                self.showCommandYield()

            self.state = 2317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 268 or _la == 280:
                self.state = 2316
                self.composableCommandClauses()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowProceduresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(Cypher25Parser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(Cypher25Parser.PROCEDURES, 0)

        def executableBy(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExecutableByContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def composableCommandClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComposableCommandClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showProcedures

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowProcedures'):
                listener.enterShowProcedures(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowProcedures'):
                listener.exitShowProcedures(self)

    def showProcedures(self):
        localctx = Cypher25Parser.ShowProceduresContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 342, self.RULE_showProcedures)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            _la = self._input.LA(1)
            if not (_la == 216 or _la == 217):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 98:
                self.state = 2320
                self.executableBy()

            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2323
                self.showCommandYield()

            self.state = 2327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 268 or _la == 280:
                self.state = 2326
                self.composableCommandClauses()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowFunctionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FunctionTokenContext, 0
            )

        def showFunctionsType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowFunctionsTypeContext, 0
            )

        def executableBy(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExecutableByContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def composableCommandClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComposableCommandClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showFunctions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowFunctions'):
                listener.enterShowFunctions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowFunctions'):
                listener.exitShowFunctions(self)

    def showFunctions(self):
        localctx = Cypher25Parser.ShowFunctionsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 344, self.RULE_showFunctions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 18 or _la == 36 or _la == 304:
                self.state = 2329
                self.showFunctionsType()

            self.state = 2332
            self.functionToken()
            self.state = 2334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 98:
                self.state = 2333
                self.executableBy()

            self.state = 2337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2336
                self.showCommandYield()

            self.state = 2340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 268 or _la == 280:
                self.state = 2339
                self.composableCommandClauses()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(Cypher25Parser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(Cypher25Parser.FUNCTIONS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_functionToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFunctionToken'):
                listener.enterFunctionToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFunctionToken'):
                listener.exitFunctionToken(self)

    def functionToken(self):
        localctx = Cypher25Parser.FunctionTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 346, self.RULE_functionToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2342
            _la = self._input.LA(1)
            if not (_la == 116 or _la == 117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecutableByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTABLE(self):
            return self.getToken(Cypher25Parser.EXECUTABLE, 0)

        def BY(self):
            return self.getToken(Cypher25Parser.BY, 0)

        def CURRENT(self):
            return self.getToken(Cypher25Parser.CURRENT, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_executableBy

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExecutableBy'):
                listener.enterExecutableBy(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExecutableBy'):
                listener.exitExecutableBy(self)

    def executableBy(self):
        localctx = Cypher25Parser.ExecutableByContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 348, self.RULE_executableBy)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            self.match(Cypher25Parser.EXECUTABLE)
            self.state = 2351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 37:
                self.state = 2345
                self.match(Cypher25Parser.BY)
                self.state = 2349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 252, self._ctx)
                if la_ == 1:
                    self.state = 2346
                    self.match(Cypher25Parser.CURRENT)
                    self.state = 2347
                    self.match(Cypher25Parser.USER)
                    pass

                elif la_ == 2:
                    self.state = 2348
                    self.symbolicNameString()
                    pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowFunctionsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def BUILT(self):
            return self.getToken(Cypher25Parser.BUILT, 0)

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def DEFINED(self):
            return self.getToken(Cypher25Parser.DEFINED, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showFunctionsType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowFunctionsType'):
                listener.enterShowFunctionsType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowFunctionsType'):
                listener.exitShowFunctionsType(self)

    def showFunctionsType(self):
        localctx = Cypher25Parser.ShowFunctionsTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 350, self.RULE_showFunctionsType)
        try:
            self.state = 2358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2353
                self.match(Cypher25Parser.ALL)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2354
                self.match(Cypher25Parser.BUILT)
                self.state = 2355
                self.match(Cypher25Parser.IN)
                pass
            elif token in [304]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2356
                self.match(Cypher25Parser.USER)
                self.state = 2357
                self.match(Cypher25Parser.DEFINED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowTransactionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TransactionTokenContext, 0
            )

        def namesAndClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NamesAndClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showTransactions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowTransactions'):
                listener.enterShowTransactions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowTransactions'):
                listener.exitShowTransactions(self)

    def showTransactions(self):
        localctx = Cypher25Parser.ShowTransactionsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 352, self.RULE_showTransactions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2360
            self.transactionToken()
            self.state = 2361
            self.namesAndClauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminateTransactionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TransactionTokenContext, 0
            )

        def stringsOrExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringsOrExpressionContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def composableCommandClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComposableCommandClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_terminateTransactions

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTerminateTransactions'):
                listener.enterTerminateTransactions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTerminateTransactions'):
                listener.exitTerminateTransactions(self)

    def terminateTransactions(self):
        localctx = Cypher25Parser.TerminateTransactionsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 354, self.RULE_terminateTransactions)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.transactionToken()
            self.state = 2364
            self.stringsOrExpression()
            self.state = 2366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2365
                self.showCommandYield()

            self.state = 2369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 268 or _la == 280:
                self.state = 2368
                self.composableCommandClauses()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowSettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SettingTokenContext, 0
            )

        def namesAndClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NamesAndClausesContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showSettings

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowSettings'):
                listener.enterShowSettings(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowSettings'):
                listener.exitShowSettings(self)

    def showSettings(self):
        localctx = Cypher25Parser.ShowSettingsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 356, self.RULE_showSettings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self.settingToken()
            self.state = 2372
            self.namesAndClauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SettingTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTING(self):
            return self.getToken(Cypher25Parser.SETTING, 0)

        def SETTINGS(self):
            return self.getToken(Cypher25Parser.SETTINGS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_settingToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSettingToken'):
                listener.enterSettingToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSettingToken'):
                listener.exitSettingToken(self)

    def settingToken(self):
        localctx = Cypher25Parser.SettingTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 358, self.RULE_settingToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2374
            _la = self._input.LA(1)
            if not (_la == 262 or _la == 263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamesAndClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringsOrExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringsOrExpressionContext, 0
            )

        def composableCommandClauses(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ComposableCommandClausesContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_namesAndClauses

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNamesAndClauses'):
                listener.enterNamesAndClauses(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNamesAndClauses'):
                listener.exitNamesAndClauses(self)

    def namesAndClauses(self):
        localctx = Cypher25Parser.NamesAndClausesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 360, self.RULE_namesAndClauses)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 259, self._ctx)
            if la_ == 1:
                self.state = 2377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313 or _la == 318:
                    self.state = 2376
                    self.showCommandYield()

                pass

            elif la_ == 2:
                self.state = 2379
                self.stringsOrExpression()
                self.state = 2381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313 or _la == 318:
                    self.state = 2380
                    self.showCommandYield()

                pass

            self.state = 2386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 268 or _la == 280:
                self.state = 2385
                self.composableCommandClauses()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringsOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringListContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_stringsOrExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringsOrExpression'):
                listener.enterStringsOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringsOrExpression'):
                listener.exitStringsOrExpression(self)

    def stringsOrExpression(self):
        localctx = Cypher25Parser.StringsOrExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 362, self.RULE_stringsOrExpression)
        try:
            self.state = 2390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 261, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2388
                self.stringList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2389
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommandNodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def labelType(self):
            return self.getTypedRuleContext(Cypher25Parser.LabelTypeContext, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_commandNodePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCommandNodePattern'):
                listener.enterCommandNodePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCommandNodePattern'):
                listener.exitCommandNodePattern(self)

    def commandNodePattern(self):
        localctx = Cypher25Parser.CommandNodePatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 364, self.RULE_commandNodePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self.match(Cypher25Parser.LPAREN)
            self.state = 2393
            self.variable()
            self.state = 2394
            self.labelType()
            self.state = 2395
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommandRelPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.LPAREN)
            else:
                return self.getToken(Cypher25Parser.LPAREN, i)

        def RPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.RPAREN)
            else:
                return self.getToken(Cypher25Parser.RPAREN, i)

        def arrowLine(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ArrowLineContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ArrowLineContext, i
                )

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def relType(self):
            return self.getTypedRuleContext(Cypher25Parser.RelTypeContext, 0)

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def leftArrow(self):
            return self.getTypedRuleContext(Cypher25Parser.LeftArrowContext, 0)

        def rightArrow(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RightArrowContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_commandRelPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCommandRelPattern'):
                listener.enterCommandRelPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCommandRelPattern'):
                listener.exitCommandRelPattern(self)

    def commandRelPattern(self):
        localctx = Cypher25Parser.CommandRelPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 366, self.RULE_commandRelPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2397
            self.match(Cypher25Parser.LPAREN)
            self.state = 2398
            self.match(Cypher25Parser.RPAREN)
            self.state = 2400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 166 or _la == 324:
                self.state = 2399
                self.leftArrow()

            self.state = 2402
            self.arrowLine()
            self.state = 2403
            self.match(Cypher25Parser.LBRACKET)
            self.state = 2404
            self.variable()
            self.state = 2405
            self.relType()
            self.state = 2406
            self.match(Cypher25Parser.RBRACKET)
            self.state = 2407
            self.arrowLine()
            self.state = 2409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 124 or _la == 325:
                self.state = 2408
                self.rightArrow()

            self.state = 2411
            self.match(Cypher25Parser.LPAREN)
            self.state = 2412
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(Cypher25Parser.CONSTRAINT, 0)

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def constraintType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ConstraintTypeContext, 0
            )

        def commandNodePattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNodePatternContext, 0
            )

        def commandRelPattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandRelPatternContext, 0
            )

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createConstraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateConstraint'):
                listener.enterCreateConstraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateConstraint'):
                listener.exitCreateConstraint(self)

    def createConstraint(self):
        localctx = Cypher25Parser.CreateConstraintContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 368, self.RULE_createConstraint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2414
            self.match(Cypher25Parser.CONSTRAINT)
            self.state = 2416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 264, self._ctx)
            if la_ == 1:
                self.state = 2415
                self.symbolicNameOrStringParameter()

            self.state = 2421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2418
                self.match(Cypher25Parser.IF)
                self.state = 2419
                self.match(Cypher25Parser.NOT)
                self.state = 2420
                self.match(Cypher25Parser.EXISTS)

            self.state = 2423
            self.match(Cypher25Parser.FOR)
            self.state = 2426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 266, self._ctx)
            if la_ == 1:
                self.state = 2424
                self.commandNodePattern()
                pass

            elif la_ == 2:
                self.state = 2425
                self.commandRelPattern()
                pass

            self.state = 2428
            self.constraintType()
            self.state = 2430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 198:
                self.state = 2429
                self.commandOptions()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_constraintType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ConstraintTypedContext(ConstraintTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ConstraintTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REQUIRE(self):
            return self.getToken(Cypher25Parser.REQUIRE, 0)

        def propertyList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyListContext, 0
            )

        def type_(self):
            return self.getTypedRuleContext(Cypher25Parser.TypeContext, 0)

        def COLONCOLON(self):
            return self.getToken(Cypher25Parser.COLONCOLON, 0)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def TYPED(self):
            return self.getToken(Cypher25Parser.TYPED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterConstraintTyped'):
                listener.enterConstraintTyped(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitConstraintTyped'):
                listener.exitConstraintTyped(self)

    class ConstraintKeyContext(ConstraintTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ConstraintTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REQUIRE(self):
            return self.getToken(Cypher25Parser.REQUIRE, 0)

        def propertyList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyListContext, 0
            )

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def KEY(self):
            return self.getToken(Cypher25Parser.KEY, 0)

        def NODE(self):
            return self.getToken(Cypher25Parser.NODE, 0)

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def REL(self):
            return self.getToken(Cypher25Parser.REL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterConstraintKey'):
                listener.enterConstraintKey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitConstraintKey'):
                listener.exitConstraintKey(self)

    class ConstraintIsNotNullContext(ConstraintTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ConstraintTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REQUIRE(self):
            return self.getToken(Cypher25Parser.REQUIRE, 0)

        def propertyList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyListContext, 0
            )

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def NULL(self):
            return self.getToken(Cypher25Parser.NULL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterConstraintIsNotNull'):
                listener.enterConstraintIsNotNull(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitConstraintIsNotNull'):
                listener.exitConstraintIsNotNull(self)

    class ConstraintIsUniqueContext(ConstraintTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.ConstraintTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REQUIRE(self):
            return self.getToken(Cypher25Parser.REQUIRE, 0)

        def propertyList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyListContext, 0
            )

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def UNIQUE(self):
            return self.getToken(Cypher25Parser.UNIQUE, 0)

        def NODE(self):
            return self.getToken(Cypher25Parser.NODE, 0)

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def REL(self):
            return self.getToken(Cypher25Parser.REL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterConstraintIsUnique'):
                listener.enterConstraintIsUnique(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitConstraintIsUnique'):
                listener.exitConstraintIsUnique(self)

    def constraintType(self):
        localctx = Cypher25Parser.ConstraintTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 370, self.RULE_constraintType)
        self._la = 0  # Token type
        try:
            self.state = 2463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 271, self._ctx)
            if la_ == 1:
                localctx = Cypher25Parser.ConstraintTypedContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 1)
                self.state = 2432
                self.match(Cypher25Parser.REQUIRE)
                self.state = 2433
                self.propertyList()
                self.state = 2437
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 2434
                    self.match(Cypher25Parser.COLONCOLON)
                    pass
                elif token in [147]:
                    self.state = 2435
                    self.match(Cypher25Parser.IS)
                    self.state = 2436
                    _la = self._input.LA(1)
                    if not (_la == 45 or _la == 296):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2439
                self.type_()
                pass

            elif la_ == 2:
                localctx = Cypher25Parser.ConstraintIsUniqueContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 2441
                self.match(Cypher25Parser.REQUIRE)
                self.state = 2442
                self.propertyList()
                self.state = 2443
                self.match(Cypher25Parser.IS)
                self.state = 2445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 183) & ~0x3F) == 0 and (
                    (1 << (_la - 183)) & 844424930131969
                ) != 0:
                    self.state = 2444
                    _la = self._input.LA(1)
                    if not (
                        ((_la - 183) & ~0x3F) == 0
                        and ((1 << (_la - 183)) & 844424930131969) != 0
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 2447
                self.match(Cypher25Parser.UNIQUE)
                pass

            elif la_ == 3:
                localctx = Cypher25Parser.ConstraintKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2449
                self.match(Cypher25Parser.REQUIRE)
                self.state = 2450
                self.propertyList()
                self.state = 2451
                self.match(Cypher25Parser.IS)
                self.state = 2453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 183) & ~0x3F) == 0 and (
                    (1 << (_la - 183)) & 844424930131969
                ) != 0:
                    self.state = 2452
                    _la = self._input.LA(1)
                    if not (
                        ((_la - 183) & ~0x3F) == 0
                        and ((1 << (_la - 183)) & 844424930131969) != 0
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 2455
                self.match(Cypher25Parser.KEY)
                pass

            elif la_ == 4:
                localctx = Cypher25Parser.ConstraintIsNotNullContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 4)
                self.state = 2457
                self.match(Cypher25Parser.REQUIRE)
                self.state = 2458
                self.propertyList()
                self.state = 2459
                self.match(Cypher25Parser.IS)
                self.state = 2460
                self.match(Cypher25Parser.NOT)
                self.state = 2461
                self.match(Cypher25Parser.NULL)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(Cypher25Parser.CONSTRAINT, 0)

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropConstraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropConstraint'):
                listener.enterDropConstraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropConstraint'):
                listener.exitDropConstraint(self)

    def dropConstraint(self):
        localctx = Cypher25Parser.DropConstraintContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 372, self.RULE_dropConstraint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.match(Cypher25Parser.CONSTRAINT)
            self.state = 2466
            self.symbolicNameOrStringParameter()
            self.state = 2469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2467
                self.match(Cypher25Parser.IF)
                self.state = 2468
                self.match(Cypher25Parser.EXISTS)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(Cypher25Parser.RANGE, 0)

        def INDEX(self):
            return self.getToken(Cypher25Parser.INDEX, 0)

        def createIndex_(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateIndex_Context, 0
            )

        def TEXT(self):
            return self.getToken(Cypher25Parser.TEXT, 0)

        def POINT(self):
            return self.getToken(Cypher25Parser.POINT, 0)

        def VECTOR(self):
            return self.getToken(Cypher25Parser.VECTOR, 0)

        def LOOKUP(self):
            return self.getToken(Cypher25Parser.LOOKUP, 0)

        def createLookupIndex(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateLookupIndexContext, 0
            )

        def FULLTEXT(self):
            return self.getToken(Cypher25Parser.FULLTEXT, 0)

        def createFulltextIndex(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateFulltextIndexContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createIndex

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateIndex'):
                listener.enterCreateIndex(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateIndex'):
                listener.exitCreateIndex(self)

    def createIndex(self):
        localctx = Cypher25Parser.CreateIndexContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 374, self.RULE_createIndex)
        try:
            self.state = 2491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [223]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2471
                self.match(Cypher25Parser.RANGE)
                self.state = 2472
                self.match(Cypher25Parser.INDEX)
                self.state = 2473
                self.createIndex_()
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2474
                self.match(Cypher25Parser.TEXT)
                self.state = 2475
                self.match(Cypher25Parser.INDEX)
                self.state = 2476
                self.createIndex_()
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2477
                self.match(Cypher25Parser.POINT)
                self.state = 2478
                self.match(Cypher25Parser.INDEX)
                self.state = 2479
                self.createIndex_()
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2480
                self.match(Cypher25Parser.VECTOR)
                self.state = 2481
                self.match(Cypher25Parser.INDEX)
                self.state = 2482
                self.createIndex_()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2483
                self.match(Cypher25Parser.LOOKUP)
                self.state = 2484
                self.match(Cypher25Parser.INDEX)
                self.state = 2485
                self.createLookupIndex()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2486
                self.match(Cypher25Parser.FULLTEXT)
                self.state = 2487
                self.match(Cypher25Parser.INDEX)
                self.state = 2488
                self.createFulltextIndex()
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2489
                self.match(Cypher25Parser.INDEX)
                self.state = 2490
                self.createIndex_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateIndex_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def propertyList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyListContext, 0
            )

        def commandNodePattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNodePatternContext, 0
            )

        def commandRelPattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandRelPatternContext, 0
            )

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createIndex_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateIndex_'):
                listener.enterCreateIndex_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateIndex_'):
                listener.exitCreateIndex_(self)

    def createIndex_(self):
        localctx = Cypher25Parser.CreateIndex_Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 376, self.RULE_createIndex_)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
            if la_ == 1:
                self.state = 2493
                self.symbolicNameOrStringParameter()

            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2496
                self.match(Cypher25Parser.IF)
                self.state = 2497
                self.match(Cypher25Parser.NOT)
                self.state = 2498
                self.match(Cypher25Parser.EXISTS)

            self.state = 2501
            self.match(Cypher25Parser.FOR)
            self.state = 2504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 276, self._ctx)
            if la_ == 1:
                self.state = 2502
                self.commandNodePattern()
                pass

            elif la_ == 2:
                self.state = 2503
                self.commandRelPattern()
                pass

            self.state = 2506
            self.match(Cypher25Parser.ON)
            self.state = 2507
            self.propertyList()
            self.state = 2509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 198:
                self.state = 2508
                self.commandOptions()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFulltextIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def EACH(self):
            return self.getToken(Cypher25Parser.EACH, 0)

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def enclosedPropertyList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EnclosedPropertyListContext, 0
            )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def fulltextNodePattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FulltextNodePatternContext, 0
            )

        def fulltextRelPattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FulltextRelPatternContext, 0
            )

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createFulltextIndex

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateFulltextIndex'):
                listener.enterCreateFulltextIndex(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateFulltextIndex'):
                listener.exitCreateFulltextIndex(self)

    def createFulltextIndex(self):
        localctx = Cypher25Parser.CreateFulltextIndexContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 378, self.RULE_createFulltextIndex)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 278, self._ctx)
            if la_ == 1:
                self.state = 2511
                self.symbolicNameOrStringParameter()

            self.state = 2517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2514
                self.match(Cypher25Parser.IF)
                self.state = 2515
                self.match(Cypher25Parser.NOT)
                self.state = 2516
                self.match(Cypher25Parser.EXISTS)

            self.state = 2519
            self.match(Cypher25Parser.FOR)
            self.state = 2522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 280, self._ctx)
            if la_ == 1:
                self.state = 2520
                self.fulltextNodePattern()
                pass

            elif la_ == 2:
                self.state = 2521
                self.fulltextRelPattern()
                pass

            self.state = 2524
            self.match(Cypher25Parser.ON)
            self.state = 2525
            self.match(Cypher25Parser.EACH)
            self.state = 2526
            self.match(Cypher25Parser.LBRACKET)
            self.state = 2527
            self.enclosedPropertyList()
            self.state = 2528
            self.match(Cypher25Parser.RBRACKET)
            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 198:
                self.state = 2529
                self.commandOptions()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FulltextNodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def BAR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.BAR)
            else:
                return self.getToken(Cypher25Parser.BAR, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_fulltextNodePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFulltextNodePattern'):
                listener.enterFulltextNodePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFulltextNodePattern'):
                listener.exitFulltextNodePattern(self)

    def fulltextNodePattern(self):
        localctx = Cypher25Parser.FulltextNodePatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 380, self.RULE_fulltextNodePattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2532
            self.match(Cypher25Parser.LPAREN)
            self.state = 2533
            self.variable()
            self.state = 2534
            self.match(Cypher25Parser.COLON)
            self.state = 2535
            self.symbolicNameString()
            self.state = 2540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 2536
                self.match(Cypher25Parser.BAR)
                self.state = 2537
                self.symbolicNameString()
                self.state = 2542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2543
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FulltextRelPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.LPAREN)
            else:
                return self.getToken(Cypher25Parser.LPAREN, i)

        def RPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.RPAREN)
            else:
                return self.getToken(Cypher25Parser.RPAREN, i)

        def arrowLine(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ArrowLineContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ArrowLineContext, i
                )

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def leftArrow(self):
            return self.getTypedRuleContext(Cypher25Parser.LeftArrowContext, 0)

        def BAR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.BAR)
            else:
                return self.getToken(Cypher25Parser.BAR, i)

        def rightArrow(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RightArrowContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_fulltextRelPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterFulltextRelPattern'):
                listener.enterFulltextRelPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitFulltextRelPattern'):
                listener.exitFulltextRelPattern(self)

    def fulltextRelPattern(self):
        localctx = Cypher25Parser.FulltextRelPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 382, self.RULE_fulltextRelPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2545
            self.match(Cypher25Parser.LPAREN)
            self.state = 2546
            self.match(Cypher25Parser.RPAREN)
            self.state = 2548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 166 or _la == 324:
                self.state = 2547
                self.leftArrow()

            self.state = 2550
            self.arrowLine()
            self.state = 2551
            self.match(Cypher25Parser.LBRACKET)
            self.state = 2552
            self.variable()
            self.state = 2553
            self.match(Cypher25Parser.COLON)
            self.state = 2554
            self.symbolicNameString()
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 2555
                self.match(Cypher25Parser.BAR)
                self.state = 2556
                self.symbolicNameString()
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2562
            self.match(Cypher25Parser.RBRACKET)
            self.state = 2563
            self.arrowLine()
            self.state = 2565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 124 or _la == 325:
                self.state = 2564
                self.rightArrow()

            self.state = 2567
            self.match(Cypher25Parser.LPAREN)
            self.state = 2568
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateLookupIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def lookupIndexNodePattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LookupIndexNodePatternContext, 0
            )

        def lookupIndexRelPattern(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LookupIndexRelPatternContext, 0
            )

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createLookupIndex

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateLookupIndex'):
                listener.enterCreateLookupIndex(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateLookupIndex'):
                listener.exitCreateLookupIndex(self)

    def createLookupIndex(self):
        localctx = Cypher25Parser.CreateLookupIndexContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 384, self.RULE_createLookupIndex)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
            if la_ == 1:
                self.state = 2570
                self.symbolicNameOrStringParameter()

            self.state = 2576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2573
                self.match(Cypher25Parser.IF)
                self.state = 2574
                self.match(Cypher25Parser.NOT)
                self.state = 2575
                self.match(Cypher25Parser.EXISTS)

            self.state = 2578
            self.match(Cypher25Parser.FOR)
            self.state = 2581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 288, self._ctx)
            if la_ == 1:
                self.state = 2579
                self.lookupIndexNodePattern()
                pass

            elif la_ == 2:
                self.state = 2580
                self.lookupIndexRelPattern()
                pass

            self.state = 2583
            self.symbolicNameString()
            self.state = 2584
            self.match(Cypher25Parser.LPAREN)
            self.state = 2585
            self.variable()
            self.state = 2586
            self.match(Cypher25Parser.RPAREN)
            self.state = 2588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 198:
                self.state = 2587
                self.commandOptions()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LookupIndexNodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def EACH(self):
            return self.getToken(Cypher25Parser.EACH, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_lookupIndexNodePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLookupIndexNodePattern'):
                listener.enterLookupIndexNodePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLookupIndexNodePattern'):
                listener.exitLookupIndexNodePattern(self)

    def lookupIndexNodePattern(self):
        localctx = Cypher25Parser.LookupIndexNodePatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 386, self.RULE_lookupIndexNodePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(Cypher25Parser.LPAREN)
            self.state = 2591
            self.variable()
            self.state = 2592
            self.match(Cypher25Parser.RPAREN)
            self.state = 2593
            self.match(Cypher25Parser.ON)
            self.state = 2594
            self.match(Cypher25Parser.EACH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LookupIndexRelPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.LPAREN)
            else:
                return self.getToken(Cypher25Parser.LPAREN, i)

        def RPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.RPAREN)
            else:
                return self.getToken(Cypher25Parser.RPAREN, i)

        def arrowLine(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ArrowLineContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ArrowLineContext, i
                )

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def leftArrow(self):
            return self.getTypedRuleContext(Cypher25Parser.LeftArrowContext, 0)

        def rightArrow(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RightArrowContext, 0
            )

        def EACH(self):
            return self.getToken(Cypher25Parser.EACH, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_lookupIndexRelPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLookupIndexRelPattern'):
                listener.enterLookupIndexRelPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLookupIndexRelPattern'):
                listener.exitLookupIndexRelPattern(self)

    def lookupIndexRelPattern(self):
        localctx = Cypher25Parser.LookupIndexRelPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 388, self.RULE_lookupIndexRelPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(Cypher25Parser.LPAREN)
            self.state = 2597
            self.match(Cypher25Parser.RPAREN)
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 166 or _la == 324:
                self.state = 2598
                self.leftArrow()

            self.state = 2601
            self.arrowLine()
            self.state = 2602
            self.match(Cypher25Parser.LBRACKET)
            self.state = 2603
            self.variable()
            self.state = 2604
            self.match(Cypher25Parser.RBRACKET)
            self.state = 2605
            self.arrowLine()
            self.state = 2607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 124 or _la == 325:
                self.state = 2606
                self.rightArrow()

            self.state = 2609
            self.match(Cypher25Parser.LPAREN)
            self.state = 2610
            self.match(Cypher25Parser.RPAREN)
            self.state = 2611
            self.match(Cypher25Parser.ON)
            self.state = 2613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 292, self._ctx)
            if la_ == 1:
                self.state = 2612
                self.match(Cypher25Parser.EACH)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(Cypher25Parser.INDEX, 0)

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropIndex

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropIndex'):
                listener.enterDropIndex(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropIndex'):
                listener.exitDropIndex(self)

    def dropIndex(self):
        localctx = Cypher25Parser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_dropIndex)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self.match(Cypher25Parser.INDEX)
            self.state = 2616
            self.symbolicNameOrStringParameter()
            self.state = 2619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2617
                self.match(Cypher25Parser.IF)
                self.state = 2618
                self.match(Cypher25Parser.EXISTS)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def property_(self):
            return self.getTypedRuleContext(Cypher25Parser.PropertyContext, 0)

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def enclosedPropertyList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EnclosedPropertyListContext, 0
            )

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_propertyList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPropertyList'):
                listener.enterPropertyList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPropertyList'):
                listener.exitPropertyList(self)

    def propertyList(self):
        localctx = Cypher25Parser.PropertyListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 392, self.RULE_propertyList)
        try:
            self.state = 2628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2621
                self.variable()
                self.state = 2622
                self.property_()
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                self.match(Cypher25Parser.LPAREN)
                self.state = 2625
                self.enclosedPropertyList()
                self.state = 2626
                self.match(Cypher25Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnclosedPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.VariableContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.VariableContext, i
                )

        def property_(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PropertyContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PropertyContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_enclosedPropertyList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterEnclosedPropertyList'):
                listener.enterEnclosedPropertyList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitEnclosedPropertyList'):
                listener.exitEnclosedPropertyList(self)

    def enclosedPropertyList(self):
        localctx = Cypher25Parser.EnclosedPropertyListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 394, self.RULE_enclosedPropertyList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            self.variable()
            self.state = 2631
            self.property_()
            self.state = 2638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 2632
                self.match(Cypher25Parser.COMMA)
                self.state = 2633
                self.variable()
                self.state = 2634
                self.property_()
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(Cypher25Parser.ALTER, 0)

        def alterAlias(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AlterAliasContext, 0
            )

        def alterCurrentUser(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AlterCurrentUserContext, 0
            )

        def alterDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AlterDatabaseContext, 0
            )

        def alterUser(self):
            return self.getTypedRuleContext(Cypher25Parser.AlterUserContext, 0)

        def alterServer(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AlterServerContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterCommand'):
                listener.enterAlterCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterCommand'):
                listener.exitAlterCommand(self)

    def alterCommand(self):
        localctx = Cypher25Parser.AlterCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 396, self.RULE_alterCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.match(Cypher25Parser.ALTER)
            self.state = 2647
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 2642
                self.alterAlias()
                pass
            elif token in [59]:
                self.state = 2643
                self.alterCurrentUser()
                pass
            elif token in [62]:
                self.state = 2644
                self.alterDatabase()
                pass
            elif token in [304]:
                self.state = 2645
                self.alterUser()
                pass
            elif token in [259]:
                self.state = 2646
                self.alterServer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(Cypher25Parser.RENAME, 0)

        def renameRole(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RenameRoleContext, 0
            )

        def renameServer(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RenameServerContext, 0
            )

        def renameUser(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RenameUserContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_renameCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRenameCommand'):
                listener.enterRenameCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRenameCommand'):
                listener.exitRenameCommand(self)

    def renameCommand(self):
        localctx = Cypher25Parser.RenameCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 398, self.RULE_renameCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            self.match(Cypher25Parser.RENAME)
            self.state = 2653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [246]:
                self.state = 2650
                self.renameRole()
                pass
            elif token in [259]:
                self.state = 2651
                self.renameServer()
                pass
            elif token in [304]:
                self.state = 2652
                self.renameUser()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(Cypher25Parser.GRANT, 0)

        def privilege(self):
            return self.getTypedRuleContext(Cypher25Parser.PrivilegeContext, 0)

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def roleNames(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleNamesContext, 0)

        def roleToken(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleTokenContext, 0)

        def grantRole(self):
            return self.getTypedRuleContext(Cypher25Parser.GrantRoleContext, 0)

        def IMMUTABLE(self):
            return self.getToken(Cypher25Parser.IMMUTABLE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_grantCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGrantCommand'):
                listener.enterGrantCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGrantCommand'):
                listener.exitGrantCommand(self)

    def grantCommand(self):
        localctx = Cypher25Parser.GrantCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 400, self.RULE_grantCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            self.match(Cypher25Parser.GRANT)
            self.state = 2666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 299, self._ctx)
            if la_ == 1:
                self.state = 2657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 130:
                    self.state = 2656
                    self.match(Cypher25Parser.IMMUTABLE)

                self.state = 2659
                self.privilege()
                self.state = 2660
                self.match(Cypher25Parser.TO)
                self.state = 2661
                self.roleNames()
                pass

            elif la_ == 2:
                self.state = 2663
                self.roleToken()
                self.state = 2664
                self.grantRole()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DenyCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DENY(self):
            return self.getToken(Cypher25Parser.DENY, 0)

        def privilege(self):
            return self.getTypedRuleContext(Cypher25Parser.PrivilegeContext, 0)

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def roleNames(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleNamesContext, 0)

        def IMMUTABLE(self):
            return self.getToken(Cypher25Parser.IMMUTABLE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_denyCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDenyCommand'):
                listener.enterDenyCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDenyCommand'):
                listener.exitDenyCommand(self)

    def denyCommand(self):
        localctx = Cypher25Parser.DenyCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 402, self.RULE_denyCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            self.match(Cypher25Parser.DENY)
            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 130:
                self.state = 2669
                self.match(Cypher25Parser.IMMUTABLE)

            self.state = 2672
            self.privilege()
            self.state = 2673
            self.match(Cypher25Parser.TO)
            self.state = 2674
            self.roleNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(Cypher25Parser.REVOKE, 0)

        def privilege(self):
            return self.getTypedRuleContext(Cypher25Parser.PrivilegeContext, 0)

        def FROM(self):
            return self.getToken(Cypher25Parser.FROM, 0)

        def roleNames(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleNamesContext, 0)

        def roleToken(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleTokenContext, 0)

        def revokeRole(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RevokeRoleContext, 0
            )

        def IMMUTABLE(self):
            return self.getToken(Cypher25Parser.IMMUTABLE, 0)

        def DENY(self):
            return self.getToken(Cypher25Parser.DENY, 0)

        def GRANT(self):
            return self.getToken(Cypher25Parser.GRANT, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_revokeCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRevokeCommand'):
                listener.enterRevokeCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRevokeCommand'):
                listener.exitRevokeCommand(self)

    def revokeCommand(self):
        localctx = Cypher25Parser.RevokeCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 404, self.RULE_revokeCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2676
            self.match(Cypher25Parser.REVOKE)
            self.state = 2690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 303, self._ctx)
            if la_ == 1:
                self.state = 2678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 71 or _la == 119:
                    self.state = 2677
                    _la = self._input.LA(1)
                    if not (_la == 71 or _la == 119):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 2681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 130:
                    self.state = 2680
                    self.match(Cypher25Parser.IMMUTABLE)

                self.state = 2683
                self.privilege()
                self.state = 2684
                self.match(Cypher25Parser.FROM)
                self.state = 2685
                self.roleNames()
                pass

            elif la_ == 2:
                self.state = 2687
                self.roleToken()
                self.state = 2688
                self.revokeRole()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_userNames

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUserNames'):
                listener.enterUserNames(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUserNames'):
                listener.exitUserNames(self)

    def userNames(self):
        localctx = Cypher25Parser.UserNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_userNames)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoleNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameterList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_roleNames

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRoleNames'):
                listener.enterRoleNames(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRoleNames'):
                listener.exitRoleNames(self)

    def roleNames(self):
        localctx = Cypher25Parser.RoleNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_roleNames)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self.symbolicNameOrStringParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoleTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLES(self):
            return self.getToken(Cypher25Parser.ROLES, 0)

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_roleToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRoleToken'):
                listener.enterRoleToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRoleToken'):
                listener.exitRoleToken(self)

    def roleToken(self):
        localctx = Cypher25Parser.RoleTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_roleToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            _la = self._input.LA(1)
            if not (_la == 246 or _la == 247):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnableServerCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(Cypher25Parser.ENABLE, 0)

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringOrParameterContext, 0
            )

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_enableServerCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterEnableServerCommand'):
                listener.enterEnableServerCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitEnableServerCommand'):
                listener.exitEnableServerCommand(self)

    def enableServerCommand(self):
        localctx = Cypher25Parser.EnableServerCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 412, self.RULE_enableServerCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2698
            self.match(Cypher25Parser.ENABLE)
            self.state = 2699
            self.match(Cypher25Parser.SERVER)
            self.state = 2700
            self.stringOrParameter()
            self.state = 2702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 198:
                self.state = 2701
                self.commandOptions()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringOrParameterContext, 0
            )

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterServer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterServer'):
                listener.enterAlterServer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterServer'):
                listener.exitAlterServer(self)

    def alterServer(self):
        localctx = Cypher25Parser.AlterServerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 414, self.RULE_alterServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2704
            self.match(Cypher25Parser.SERVER)
            self.state = 2705
            self.stringOrParameter()
            self.state = 2706
            self.match(Cypher25Parser.SET)
            self.state = 2707
            self.commandOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def stringOrParameter(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.StringOrParameterContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.StringOrParameterContext, i
                )

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_renameServer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRenameServer'):
                listener.enterRenameServer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRenameServer'):
                listener.exitRenameServer(self)

    def renameServer(self):
        localctx = Cypher25Parser.RenameServerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 416, self.RULE_renameServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2709
            self.match(Cypher25Parser.SERVER)
            self.state = 2710
            self.stringOrParameter()
            self.state = 2711
            self.match(Cypher25Parser.TO)
            self.state = 2712
            self.stringOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropServer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropServer'):
                listener.enterDropServer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropServer'):
                listener.exitDropServer(self)

    def dropServer(self):
        localctx = Cypher25Parser.DropServerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 418, self.RULE_dropServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2714
            self.match(Cypher25Parser.SERVER)
            self.state = 2715
            self.stringOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowServersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def SERVERS(self):
            return self.getToken(Cypher25Parser.SERVERS, 0)

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showServers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowServers'):
                listener.enterShowServers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowServers'):
                listener.exitShowServers(self)

    def showServers(self):
        localctx = Cypher25Parser.ShowServersContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 420, self.RULE_showServers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2717
            _la = self._input.LA(1)
            if not (_la == 259 or _la == 260):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2718
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AllocationCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deallocateDatabaseFromServers(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DeallocateDatabaseFromServersContext, 0
            )

        def reallocateDatabases(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ReallocateDatabasesContext, 0
            )

        def DRYRUN(self):
            return self.getToken(Cypher25Parser.DRYRUN, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_allocationCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAllocationCommand'):
                listener.enterAllocationCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAllocationCommand'):
                listener.exitAllocationCommand(self)

    def allocationCommand(self):
        localctx = Cypher25Parser.AllocationCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 422, self.RULE_allocationCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 2721
                self.match(Cypher25Parser.DRYRUN)

            self.state = 2726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 2724
                self.deallocateDatabaseFromServers()
                pass
            elif token in [227]:
                self.state = 2725
                self.reallocateDatabases()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeallocateDatabaseFromServersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(Cypher25Parser.DEALLOCATE, 0)

        def FROM(self):
            return self.getToken(Cypher25Parser.FROM, 0)

        def stringOrParameter(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.StringOrParameterContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.StringOrParameterContext, i
                )

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(Cypher25Parser.DATABASES, 0)

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def SERVERS(self):
            return self.getToken(Cypher25Parser.SERVERS, 0)

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_deallocateDatabaseFromServers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDeallocateDatabaseFromServers'):
                listener.enterDeallocateDatabaseFromServers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDeallocateDatabaseFromServers'):
                listener.exitDeallocateDatabaseFromServers(self)

    def deallocateDatabaseFromServers(self):
        localctx = Cypher25Parser.DeallocateDatabaseFromServersContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 424, self.RULE_deallocateDatabaseFromServers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            self.match(Cypher25Parser.DEALLOCATE)
            self.state = 2729
            _la = self._input.LA(1)
            if not (_la == 62 or _la == 63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2730
            self.match(Cypher25Parser.FROM)
            self.state = 2731
            _la = self._input.LA(1)
            if not (_la == 259 or _la == 260):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2732
            self.stringOrParameter()
            self.state = 2737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 2733
                self.match(Cypher25Parser.COMMA)
                self.state = 2734
                self.stringOrParameter()
                self.state = 2739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReallocateDatabasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REALLOCATE(self):
            return self.getToken(Cypher25Parser.REALLOCATE, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(Cypher25Parser.DATABASES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_reallocateDatabases

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterReallocateDatabases'):
                listener.enterReallocateDatabases(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitReallocateDatabases'):
                listener.exitReallocateDatabases(self)

    def reallocateDatabases(self):
        localctx = Cypher25Parser.ReallocateDatabasesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 426, self.RULE_reallocateDatabases)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2740
            self.match(Cypher25Parser.REALLOCATE)
            self.state = 2741
            _la = self._input.LA(1)
            if not (_la == 62 or _la == 63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def commandNameExpression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.CommandNameExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.CommandNameExpressionContext, i
                )

        def IMMUTABLE(self):
            return self.getToken(Cypher25Parser.IMMUTABLE, 0)

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def COPY(self):
            return self.getToken(Cypher25Parser.COPY, 0)

        def OF(self):
            return self.getToken(Cypher25Parser.OF, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createRole

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateRole'):
                listener.enterCreateRole(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateRole'):
                listener.exitCreateRole(self)

    def createRole(self):
        localctx = Cypher25Parser.CreateRoleContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 428, self.RULE_createRole)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 130:
                self.state = 2743
                self.match(Cypher25Parser.IMMUTABLE)

            self.state = 2746
            self.match(Cypher25Parser.ROLE)
            self.state = 2747
            self.commandNameExpression()
            self.state = 2751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2748
                self.match(Cypher25Parser.IF)
                self.state = 2749
                self.match(Cypher25Parser.NOT)
                self.state = 2750
                self.match(Cypher25Parser.EXISTS)

            self.state = 2757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 2753
                self.match(Cypher25Parser.AS)
                self.state = 2754
                self.match(Cypher25Parser.COPY)
                self.state = 2755
                self.match(Cypher25Parser.OF)
                self.state = 2756
                self.commandNameExpression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def commandNameExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNameExpressionContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropRole

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropRole'):
                listener.enterDropRole(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropRole'):
                listener.exitDropRole(self)

    def dropRole(self):
        localctx = Cypher25Parser.DropRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_dropRole)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2759
            self.match(Cypher25Parser.ROLE)
            self.state = 2760
            self.commandNameExpression()
            self.state = 2763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2761
                self.match(Cypher25Parser.IF)
                self.state = 2762
                self.match(Cypher25Parser.EXISTS)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def commandNameExpression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.CommandNameExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.CommandNameExpressionContext, i
                )

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_renameRole

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRenameRole'):
                listener.enterRenameRole(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRenameRole'):
                listener.exitRenameRole(self)

    def renameRole(self):
        localctx = Cypher25Parser.RenameRoleContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 432, self.RULE_renameRole)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            self.match(Cypher25Parser.ROLE)
            self.state = 2766
            self.commandNameExpression()
            self.state = 2769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2767
                self.match(Cypher25Parser.IF)
                self.state = 2768
                self.match(Cypher25Parser.EXISTS)

            self.state = 2771
            self.match(Cypher25Parser.TO)
            self.state = 2772
            self.commandNameExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowRolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleToken(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleTokenContext, 0)

        def WITH(self):
            return self.getToken(Cypher25Parser.WITH, 0)

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def POPULATED(self):
            return self.getToken(Cypher25Parser.POPULATED, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def USERS(self):
            return self.getToken(Cypher25Parser.USERS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showRoles

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowRoles'):
                listener.enterShowRoles(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowRoles'):
                listener.exitShowRoles(self)

    def showRoles(self):
        localctx = Cypher25Parser.ShowRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_showRoles)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 18 or _la == 210:
                self.state = 2774
                _la = self._input.LA(1)
                if not (_la == 18 or _la == 210):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2777
            self.roleToken()
            self.state = 2780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 314:
                self.state = 2778
                self.match(Cypher25Parser.WITH)
                self.state = 2779
                _la = self._input.LA(1)
                if not (_la == 304 or _la == 305):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2782
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleNames(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleNamesContext, 0)

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def userNames(self):
            return self.getTypedRuleContext(Cypher25Parser.UserNamesContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_grantRole

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGrantRole'):
                listener.enterGrantRole(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGrantRole'):
                listener.exitGrantRole(self)

    def grantRole(self):
        localctx = Cypher25Parser.GrantRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_grantRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2785
            self.roleNames()
            self.state = 2786
            self.match(Cypher25Parser.TO)
            self.state = 2787
            self.userNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleNames(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleNamesContext, 0)

        def FROM(self):
            return self.getToken(Cypher25Parser.FROM, 0)

        def userNames(self):
            return self.getTypedRuleContext(Cypher25Parser.UserNamesContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_revokeRole

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRevokeRole'):
                listener.enterRevokeRole(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRevokeRole'):
                listener.exitRevokeRole(self)

    def revokeRole(self):
        localctx = Cypher25Parser.RevokeRoleContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 438, self.RULE_revokeRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2789
            self.roleNames()
            self.state = 2790
            self.match(Cypher25Parser.FROM)
            self.state = 2791
            self.userNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def commandNameExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNameExpressionContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def SET(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.SET)
            else:
                return self.getToken(Cypher25Parser.SET, i)

        def password(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PasswordContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PasswordContext, i
                )

        def PASSWORD(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.PASSWORD)
            else:
                return self.getToken(Cypher25Parser.PASSWORD, i)

        def passwordChangeRequired(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PasswordChangeRequiredContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PasswordChangeRequiredContext, i
                )

        def userStatus(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.UserStatusContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.UserStatusContext, i
                )

        def homeDatabase(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.HomeDatabaseContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.HomeDatabaseContext, i
                )

        def setAuthClause(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SetAuthClauseContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SetAuthClauseContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createUser

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateUser'):
                listener.enterCreateUser(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateUser'):
                listener.exitCreateUser(self)

    def createUser(self):
        localctx = Cypher25Parser.CreateUserContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 440, self.RULE_createUser)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2793
            self.match(Cypher25Parser.USER)
            self.state = 2794
            self.commandNameExpression()
            self.state = 2798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2795
                self.match(Cypher25Parser.IF)
                self.state = 2796
                self.match(Cypher25Parser.NOT)
                self.state = 2797
                self.match(Cypher25Parser.EXISTS)

            self.state = 2809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2800
                self.match(Cypher25Parser.SET)
                self.state = 2807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 318, self._ctx)
                if la_ == 1:
                    self.state = 2801
                    self.password()
                    pass

                elif la_ == 2:
                    self.state = 2802
                    self.match(Cypher25Parser.PASSWORD)
                    self.state = 2803
                    self.passwordChangeRequired()
                    pass

                elif la_ == 3:
                    self.state = 2804
                    self.userStatus()
                    pass

                elif la_ == 4:
                    self.state = 2805
                    self.homeDatabase()
                    pass

                elif la_ == 5:
                    self.state = 2806
                    self.setAuthClause()
                    pass

                self.state = 2811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 261):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def commandNameExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNameExpressionContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropUser

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropUser'):
                listener.enterDropUser(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropUser'):
                listener.exitDropUser(self)

    def dropUser(self):
        localctx = Cypher25Parser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_dropUser)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2813
            self.match(Cypher25Parser.USER)
            self.state = 2814
            self.commandNameExpression()
            self.state = 2817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2815
                self.match(Cypher25Parser.IF)
                self.state = 2816
                self.match(Cypher25Parser.EXISTS)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def commandNameExpression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.CommandNameExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.CommandNameExpressionContext, i
                )

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_renameUser

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRenameUser'):
                listener.enterRenameUser(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRenameUser'):
                listener.exitRenameUser(self)

    def renameUser(self):
        localctx = Cypher25Parser.RenameUserContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 444, self.RULE_renameUser)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            self.match(Cypher25Parser.USER)
            self.state = 2820
            self.commandNameExpression()
            self.state = 2823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2821
                self.match(Cypher25Parser.IF)
                self.state = 2822
                self.match(Cypher25Parser.EXISTS)

            self.state = 2825
            self.match(Cypher25Parser.TO)
            self.state = 2826
            self.commandNameExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterCurrentUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(Cypher25Parser.CURRENT, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def FROM(self):
            return self.getToken(Cypher25Parser.FROM, 0)

        def passwordExpression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PasswordExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PasswordExpressionContext, i
                )

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterCurrentUser

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterCurrentUser'):
                listener.enterAlterCurrentUser(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterCurrentUser'):
                listener.exitAlterCurrentUser(self)

    def alterCurrentUser(self):
        localctx = Cypher25Parser.AlterCurrentUserContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 446, self.RULE_alterCurrentUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2828
            self.match(Cypher25Parser.CURRENT)
            self.state = 2829
            self.match(Cypher25Parser.USER)
            self.state = 2830
            self.match(Cypher25Parser.SET)
            self.state = 2831
            self.match(Cypher25Parser.PASSWORD)
            self.state = 2832
            self.match(Cypher25Parser.FROM)
            self.state = 2833
            self.passwordExpression()
            self.state = 2834
            self.match(Cypher25Parser.TO)
            self.state = 2835
            self.passwordExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def commandNameExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNameExpressionContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def REMOVE(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.REMOVE)
            else:
                return self.getToken(Cypher25Parser.REMOVE, i)

        def SET(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.SET)
            else:
                return self.getToken(Cypher25Parser.SET, i)

        def HOME(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.HOME)
            else:
                return self.getToken(Cypher25Parser.HOME, i)

        def DATABASE(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.DATABASE)
            else:
                return self.getToken(Cypher25Parser.DATABASE, i)

        def ALL(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.ALL)
            else:
                return self.getToken(Cypher25Parser.ALL, i)

        def AUTH(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.AUTH)
            else:
                return self.getToken(Cypher25Parser.AUTH, i)

        def removeNamedProvider(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.RemoveNamedProviderContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.RemoveNamedProviderContext, i
                )

        def password(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PasswordContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PasswordContext, i
                )

        def PASSWORD(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.PASSWORD)
            else:
                return self.getToken(Cypher25Parser.PASSWORD, i)

        def passwordChangeRequired(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PasswordChangeRequiredContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PasswordChangeRequiredContext, i
                )

        def userStatus(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.UserStatusContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.UserStatusContext, i
                )

        def homeDatabase(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.HomeDatabaseContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.HomeDatabaseContext, i
                )

        def setAuthClause(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SetAuthClauseContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SetAuthClauseContext, i
                )

        def PROVIDER(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.PROVIDER)
            else:
                return self.getToken(Cypher25Parser.PROVIDER, i)

        def PROVIDERS(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.PROVIDERS)
            else:
                return self.getToken(Cypher25Parser.PROVIDERS, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterUser

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterUser'):
                listener.enterAlterUser(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterUser'):
                listener.exitAlterUser(self)

    def alterUser(self):
        localctx = Cypher25Parser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_alterUser)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            self.match(Cypher25Parser.USER)
            self.state = 2838
            self.commandNameExpression()
            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 2839
                self.match(Cypher25Parser.IF)
                self.state = 2840
                self.match(Cypher25Parser.EXISTS)

            self.state = 2856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 234:
                self.state = 2843
                self.match(Cypher25Parser.REMOVE)
                self.state = 2852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [126]:
                    self.state = 2844
                    self.match(Cypher25Parser.HOME)
                    self.state = 2845
                    self.match(Cypher25Parser.DATABASE)
                    pass
                elif token in [18]:
                    self.state = 2846
                    self.match(Cypher25Parser.ALL)
                    self.state = 2847
                    self.match(Cypher25Parser.AUTH)
                    self.state = 2849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 220 or _la == 221:
                        self.state = 2848
                        _la = self._input.LA(1)
                        if not (_la == 220 or _la == 221):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    pass
                elif token in [28]:
                    self.state = 2851
                    self.removeNamedProvider()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2858
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 261:
                self.state = 2859
                self.match(Cypher25Parser.SET)
                self.state = 2866
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 326, self._ctx)
                if la_ == 1:
                    self.state = 2860
                    self.password()
                    pass

                elif la_ == 2:
                    self.state = 2861
                    self.match(Cypher25Parser.PASSWORD)
                    self.state = 2862
                    self.passwordChangeRequired()
                    pass

                elif la_ == 3:
                    self.state = 2863
                    self.userStatus()
                    pass

                elif la_ == 4:
                    self.state = 2864
                    self.homeDatabase()
                    pass

                elif la_ == 5:
                    self.state = 2865
                    self.setAuthClause()
                    pass

                self.state = 2872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveNamedProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTH(self):
            return self.getToken(Cypher25Parser.AUTH, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringLiteralContext, 0
            )

        def stringListLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringListLiteralContext, 0
            )

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def PROVIDER(self):
            return self.getToken(Cypher25Parser.PROVIDER, 0)

        def PROVIDERS(self):
            return self.getToken(Cypher25Parser.PROVIDERS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_removeNamedProvider

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRemoveNamedProvider'):
                listener.enterRemoveNamedProvider(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRemoveNamedProvider'):
                listener.exitRemoveNamedProvider(self)

    def removeNamedProvider(self):
        localctx = Cypher25Parser.RemoveNamedProviderContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 450, self.RULE_removeNamedProvider)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.match(Cypher25Parser.AUTH)
            self.state = 2875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 220 or _la == 221:
                self.state = 2874
                _la = self._input.LA(1)
                if not (_la == 220 or _la == 221):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9]:
                self.state = 2877
                self.stringLiteral()
                pass
            elif token in [155]:
                self.state = 2878
                self.stringListLiteral()
                pass
            elif token in [77]:
                self.state = 2879
                self.parameter('ANY')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def passwordExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordExpressionContext, 0
            )

        def passwordChangeRequired(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordChangeRequiredContext, 0
            )

        def PLAINTEXT(self):
            return self.getToken(Cypher25Parser.PLAINTEXT, 0)

        def ENCRYPTED(self):
            return self.getToken(Cypher25Parser.ENCRYPTED, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_password

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPassword'):
                listener.enterPassword(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPassword'):
                listener.exitPassword(self)

    def password(self):
        localctx = Cypher25Parser.PasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_password)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 94 or _la == 206:
                self.state = 2882
                _la = self._input.LA(1)
                if not (_la == 94 or _la == 206):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2885
            self.match(Cypher25Parser.PASSWORD)
            self.state = 2886
            self.passwordExpression()
            self.state = 2888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 41:
                self.state = 2887
                self.passwordChangeRequired()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordOnlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def passwordExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordExpressionContext, 0
            )

        def PLAINTEXT(self):
            return self.getToken(Cypher25Parser.PLAINTEXT, 0)

        def ENCRYPTED(self):
            return self.getToken(Cypher25Parser.ENCRYPTED, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_passwordOnly

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPasswordOnly'):
                listener.enterPasswordOnly(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPasswordOnly'):
                listener.exitPasswordOnly(self)

    def passwordOnly(self):
        localctx = Cypher25Parser.PasswordOnlyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 454, self.RULE_passwordOnly)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 94 or _la == 206:
                self.state = 2890
                _la = self._input.LA(1)
                if not (_la == 94 or _la == 206):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2893
            self.match(Cypher25Parser.PASSWORD)
            self.state = 2894
            self.passwordExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringLiteralContext, 0
            )

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_passwordExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPasswordExpression'):
                listener.enterPasswordExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPasswordExpression'):
                listener.exitPasswordExpression(self)

    def passwordExpression(self):
        localctx = Cypher25Parser.PasswordExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 456, self.RULE_passwordExpression)
        try:
            self.state = 2898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2896
                self.stringLiteral()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2897
                self.parameter('STRING')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordChangeRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(Cypher25Parser.CHANGE, 0)

        def REQUIRED(self):
            return self.getToken(Cypher25Parser.REQUIRED, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_passwordChangeRequired

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPasswordChangeRequired'):
                listener.enterPasswordChangeRequired(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPasswordChangeRequired'):
                listener.exitPasswordChangeRequired(self)

    def passwordChangeRequired(self):
        localctx = Cypher25Parser.PasswordChangeRequiredContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 458, self.RULE_passwordChangeRequired)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2900
            self.match(Cypher25Parser.CHANGE)
            self.state = 2902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 189:
                self.state = 2901
                self.match(Cypher25Parser.NOT)

            self.state = 2904
            self.match(Cypher25Parser.REQUIRED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserStatusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(Cypher25Parser.STATUS, 0)

        def SUSPENDED(self):
            return self.getToken(Cypher25Parser.SUSPENDED, 0)

        def ACTIVE(self):
            return self.getToken(Cypher25Parser.ACTIVE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_userStatus

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUserStatus'):
                listener.enterUserStatus(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUserStatus'):
                listener.exitUserStatus(self)

    def userStatus(self):
        localctx = Cypher25Parser.UserStatusContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 460, self.RULE_userStatus)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2906
            self.match(Cypher25Parser.STATUS)
            self.state = 2907
            _la = self._input.LA(1)
            if not (_la == 12 or _la == 278):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HomeDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME(self):
            return self.getToken(Cypher25Parser.HOME, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_homeDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterHomeDatabase'):
                listener.enterHomeDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitHomeDatabase'):
                listener.exitHomeDatabase(self)

    def homeDatabase(self):
        localctx = Cypher25Parser.HomeDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 462, self.RULE_homeDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2909
            self.match(Cypher25Parser.HOME)
            self.state = 2910
            self.match(Cypher25Parser.DATABASE)
            self.state = 2911
            self.symbolicAliasNameOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetAuthClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTH(self):
            return self.getToken(Cypher25Parser.AUTH, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringLiteralContext, 0
            )

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def PROVIDER(self):
            return self.getToken(Cypher25Parser.PROVIDER, 0)

        def SET(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.SET)
            else:
                return self.getToken(Cypher25Parser.SET, i)

        def userAuthAttribute(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.UserAuthAttributeContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.UserAuthAttributeContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_setAuthClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetAuthClause'):
                listener.enterSetAuthClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetAuthClause'):
                listener.exitSetAuthClause(self)

    def setAuthClause(self):
        localctx = Cypher25Parser.SetAuthClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 464, self.RULE_setAuthClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913
            self.match(Cypher25Parser.AUTH)
            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 220:
                self.state = 2914
                self.match(Cypher25Parser.PROVIDER)

            self.state = 2917
            self.stringLiteral()
            self.state = 2918
            self.match(Cypher25Parser.LCURLY)
            self.state = 2921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2919
                self.match(Cypher25Parser.SET)

                self.state = 2920
                self.userAuthAttribute()
                self.state = 2923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 261):
                    break

            self.state = 2925
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserAuthAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(Cypher25Parser.ID, 0)

        def stringOrParameterExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringOrParameterExpressionContext, 0
            )

        def passwordOnly(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordOnlyContext, 0
            )

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def passwordChangeRequired(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordChangeRequiredContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_userAuthAttribute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUserAuthAttribute'):
                listener.enterUserAuthAttribute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUserAuthAttribute'):
                listener.exitUserAuthAttribute(self)

    def userAuthAttribute(self):
        localctx = Cypher25Parser.UserAuthAttributeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 466, self.RULE_userAuthAttribute)
        try:
            self.state = 2932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 337, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2927
                self.match(Cypher25Parser.ID)
                self.state = 2928
                self.stringOrParameterExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2929
                self.passwordOnly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2930
                self.match(Cypher25Parser.PASSWORD)
                self.state = 2931
                self.passwordChangeRequired()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowUsersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def USERS(self):
            return self.getToken(Cypher25Parser.USERS, 0)

        def WITH(self):
            return self.getToken(Cypher25Parser.WITH, 0)

        def AUTH(self):
            return self.getToken(Cypher25Parser.AUTH, 0)

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showUsers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowUsers'):
                listener.enterShowUsers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowUsers'):
                listener.exitShowUsers(self)

    def showUsers(self):
        localctx = Cypher25Parser.ShowUsersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_showUsers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            _la = self._input.LA(1)
            if not (_la == 304 or _la == 305):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 314:
                self.state = 2935
                self.match(Cypher25Parser.WITH)
                self.state = 2936
                self.match(Cypher25Parser.AUTH)

            self.state = 2940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2939
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowCurrentUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(Cypher25Parser.CURRENT, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showCurrentUser

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowCurrentUser'):
                listener.enterShowCurrentUser(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowCurrentUser'):
                listener.exitShowCurrentUser(self)

    def showCurrentUser(self):
        localctx = Cypher25Parser.ShowCurrentUserContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 470, self.RULE_showCurrentUser)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2942
            self.match(Cypher25Parser.CURRENT)
            self.state = 2943
            self.match(Cypher25Parser.USER)
            self.state = 2945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2944
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowSupportedPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPPORTED(self):
            return self.getToken(Cypher25Parser.SUPPORTED, 0)

        def privilegeToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrivilegeTokenContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showSupportedPrivileges

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowSupportedPrivileges'):
                listener.enterShowSupportedPrivileges(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowSupportedPrivileges'):
                listener.exitShowSupportedPrivileges(self)

    def showSupportedPrivileges(self):
        localctx = Cypher25Parser.ShowSupportedPrivilegesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 472, self.RULE_showSupportedPrivileges)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2947
            self.match(Cypher25Parser.SUPPORTED)
            self.state = 2948
            self.privilegeToken()
            self.state = 2950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2949
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrivilegeTokenContext, 0
            )

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def privilegeAsCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrivilegeAsCommandContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showPrivileges

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowPrivileges'):
                listener.enterShowPrivileges(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowPrivileges'):
                listener.exitShowPrivileges(self)

    def showPrivileges(self):
        localctx = Cypher25Parser.ShowPrivilegesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 474, self.RULE_showPrivileges)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 18:
                self.state = 2952
                self.match(Cypher25Parser.ALL)

            self.state = 2955
            self.privilegeToken()
            self.state = 2957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 2956
                self.privilegeAsCommand()

            self.state = 2960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2959
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowRolePrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleNames(self):
            return self.getTypedRuleContext(Cypher25Parser.RoleNamesContext, 0)

        def privilegeToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrivilegeTokenContext, 0
            )

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def ROLES(self):
            return self.getToken(Cypher25Parser.ROLES, 0)

        def privilegeAsCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrivilegeAsCommandContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showRolePrivileges

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowRolePrivileges'):
                listener.enterShowRolePrivileges(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowRolePrivileges'):
                listener.exitShowRolePrivileges(self)

    def showRolePrivileges(self):
        localctx = Cypher25Parser.ShowRolePrivilegesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 476, self.RULE_showRolePrivileges)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2962
            _la = self._input.LA(1)
            if not (_la == 246 or _la == 247):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2963
            self.roleNames()
            self.state = 2964
            self.privilegeToken()
            self.state = 2966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 2965
                self.privilegeAsCommand()

            self.state = 2969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2968
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowUserPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrivilegeTokenContext, 0
            )

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def USERS(self):
            return self.getToken(Cypher25Parser.USERS, 0)

        def userNames(self):
            return self.getTypedRuleContext(Cypher25Parser.UserNamesContext, 0)

        def privilegeAsCommand(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrivilegeAsCommandContext, 0
            )

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showUserPrivileges

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowUserPrivileges'):
                listener.enterShowUserPrivileges(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowUserPrivileges'):
                listener.exitShowUserPrivileges(self)

    def showUserPrivileges(self):
        localctx = Cypher25Parser.ShowUserPrivilegesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 478, self.RULE_showUserPrivileges)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2971
            _la = self._input.LA(1)
            if not (_la == 304 or _la == 305):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 347, self._ctx)
            if la_ == 1:
                self.state = 2972
                self.userNames()

            self.state = 2975
            self.privilegeToken()
            self.state = 2977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 2976
                self.privilegeAsCommand()

            self.state = 2980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 2979
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegeAsCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def COMMAND(self):
            return self.getToken(Cypher25Parser.COMMAND, 0)

        def COMMANDS(self):
            return self.getToken(Cypher25Parser.COMMANDS, 0)

        def REVOKE(self):
            return self.getToken(Cypher25Parser.REVOKE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_privilegeAsCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPrivilegeAsCommand'):
                listener.enterPrivilegeAsCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPrivilegeAsCommand'):
                listener.exitPrivilegeAsCommand(self)

    def privilegeAsCommand(self):
        localctx = Cypher25Parser.PrivilegeAsCommandContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 480, self.RULE_privilegeAsCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2982
            self.match(Cypher25Parser.AS)
            self.state = 2984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 245:
                self.state = 2983
                self.match(Cypher25Parser.REVOKE)

            self.state = 2986
            _la = self._input.LA(1)
            if not (_la == 47 or _la == 48):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegeTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVILEGE(self):
            return self.getToken(Cypher25Parser.PRIVILEGE, 0)

        def PRIVILEGES(self):
            return self.getToken(Cypher25Parser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_privilegeToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPrivilegeToken'):
                listener.enterPrivilegeToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPrivilegeToken'):
                listener.exitPrivilegeToken(self)

    def privilegeToken(self):
        localctx = Cypher25Parser.PrivilegeTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 482, self.RULE_privilegeToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2988
            _la = self._input.LA(1)
            if not (_la == 214 or _la == 215):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allPrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AllPrivilegeContext, 0
            )

        def createPrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreatePrivilegeContext, 0
            )

        def databasePrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DatabasePrivilegeContext, 0
            )

        def dbmsPrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DbmsPrivilegeContext, 0
            )

        def dropPrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DropPrivilegeContext, 0
            )

        def loadPrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LoadPrivilegeContext, 0
            )

        def qualifiedGraphPrivileges(self):
            return self.getTypedRuleContext(
                Cypher25Parser.QualifiedGraphPrivilegesContext, 0
            )

        def removePrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RemovePrivilegeContext, 0
            )

        def setPrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SetPrivilegeContext, 0
            )

        def showPrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowPrivilegeContext, 0
            )

        def writePrivilege(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WritePrivilegeContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_privilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPrivilege'):
                listener.enterPrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPrivilege'):
                listener.exitPrivilege(self)

    def privilege(self):
        localctx = Cypher25Parser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_privilege)
        try:
            self.state = 3001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2990
                self.allPrivilege()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2991
                self.createPrivilege()
                pass
            elif token in [11, 51, 52, 132, 133, 175, 272, 275, 280, 290]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2992
                self.databasePrivilege()
                pass
            elif token in [
                15,
                19,
                26,
                49,
                62,
                99,
                129,
                214,
                229,
                246,
                259,
                304,
            ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2993
                self.dbmsPrivilege()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2994
                self.dropPrivilege()
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2995
                self.loadPrivilege()
                pass
            elif token in [70, 169, 170, 226, 292]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2996
                self.qualifiedGraphPrivileges()
                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2997
                self.removePrivilege()
                pass
            elif token in [261]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2998
                self.setPrivilege()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2999
                self.showPrivilege()
                pass
            elif token in [316]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3000
                self.writePrivilege()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AllPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def allPrivilegeTarget(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AllPrivilegeTargetContext, 0
            )

        def allPrivilegeType(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AllPrivilegeTypeContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_allPrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAllPrivilege'):
                listener.enterAllPrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAllPrivilege'):
                listener.exitAllPrivilege(self)

    def allPrivilege(self):
        localctx = Cypher25Parser.AllPrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 486, self.RULE_allPrivilege)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3003
            self.match(Cypher25Parser.ALL)
            self.state = 3005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la - 62) & ~0x3F) == 0
                and ((1 << (_la - 62)) & 288230376151711761) != 0
            ) or _la == 215:
                self.state = 3004
                self.allPrivilegeType()

            self.state = 3007
            self.match(Cypher25Parser.ON)
            self.state = 3008
            self.allPrivilegeTarget()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AllPrivilegeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVILEGES(self):
            return self.getToken(Cypher25Parser.PRIVILEGES, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def GRAPH(self):
            return self.getToken(Cypher25Parser.GRAPH, 0)

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_allPrivilegeType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAllPrivilegeType'):
                listener.enterAllPrivilegeType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAllPrivilegeType'):
                listener.exitAllPrivilegeType(self)

    def allPrivilegeType(self):
        localctx = Cypher25Parser.AllPrivilegeTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 488, self.RULE_allPrivilegeType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la - 62) & ~0x3F) == 0 and (
                (1 << (_la - 62)) & 288230376151711761
            ) != 0:
                self.state = 3010
                _la = self._input.LA(1)
                if not (
                    ((_la - 62) & ~0x3F) == 0
                    and ((1 << (_la - 62)) & 288230376151711761) != 0
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 3013
            self.match(Cypher25Parser.PRIVILEGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AllPrivilegeTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Cypher25Parser.RULE_allPrivilegeTarget

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DefaultTargetContext(AllPrivilegeTargetContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.AllPrivilegeTargetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HOME(self):
            return self.getToken(Cypher25Parser.HOME, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def GRAPH(self):
            return self.getToken(Cypher25Parser.GRAPH, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDefaultTarget'):
                listener.enterDefaultTarget(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDefaultTarget'):
                listener.exitDefaultTarget(self)

    class DatabaseVariableTargetContext(AllPrivilegeTargetContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.AllPrivilegeTargetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(Cypher25Parser.DATABASES, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def symbolicAliasNameList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameListContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDatabaseVariableTarget'):
                listener.enterDatabaseVariableTarget(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDatabaseVariableTarget'):
                listener.exitDatabaseVariableTarget(self)

    class GraphVariableTargetContext(AllPrivilegeTargetContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.AllPrivilegeTargetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRAPH(self):
            return self.getToken(Cypher25Parser.GRAPH, 0)

        def GRAPHS(self):
            return self.getToken(Cypher25Parser.GRAPHS, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def symbolicAliasNameList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameListContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGraphVariableTarget'):
                listener.enterGraphVariableTarget(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGraphVariableTarget'):
                listener.exitGraphVariableTarget(self)

    class DBMSTargetContext(AllPrivilegeTargetContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Cypher25Parser.AllPrivilegeTargetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDBMSTarget'):
                listener.enterDBMSTarget(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDBMSTarget'):
                listener.exitDBMSTarget(self)

    def allPrivilegeTarget(self):
        localctx = Cypher25Parser.AllPrivilegeTargetContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 490, self.RULE_allPrivilegeTarget)
        self._la = 0  # Token type
        try:
            self.state = 3028
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                localctx = Cypher25Parser.DefaultTargetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3015
                self.match(Cypher25Parser.HOME)
                self.state = 3016
                _la = self._input.LA(1)
                if not (_la == 62 or _la == 120):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [62, 63]:
                localctx = Cypher25Parser.DatabaseVariableTargetContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 3017
                _la = self._input.LA(1)
                if not (_la == 62 or _la == 63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3020
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [284]:
                    self.state = 3018
                    self.match(Cypher25Parser.TIMES)
                    pass
                elif token in [
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    119,
                    120,
                    121,
                    122,
                    123,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    154,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    167,
                    168,
                    169,
                    170,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    209,
                    210,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    223,
                    226,
                    227,
                    228,
                    229,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                ]:
                    self.state = 3019
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [120, 121]:
                localctx = Cypher25Parser.GraphVariableTargetContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 3)
                self.state = 3022
                _la = self._input.LA(1)
                if not (_la == 120 or _la == 121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3025
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [284]:
                    self.state = 3023
                    self.match(Cypher25Parser.TIMES)
                    pass
                elif token in [
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    119,
                    120,
                    121,
                    122,
                    123,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    154,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    167,
                    168,
                    169,
                    170,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    209,
                    210,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    223,
                    226,
                    227,
                    228,
                    229,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                ]:
                    self.state = 3024
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [66]:
                localctx = Cypher25Parser.DBMSTargetContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3027
                self.match(Cypher25Parser.DBMS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(Cypher25Parser.CREATE, 0)

        def createPrivilegeForDatabase(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreatePrivilegeForDatabaseContext, 0
            )

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def databaseScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DatabaseScopeContext, 0
            )

        def actionForDBMS(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ActionForDBMSContext, 0
            )

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def graphScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphScopeContext, 0
            )

        def graphQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphQualifierContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createPrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreatePrivilege'):
                listener.enterCreatePrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreatePrivilege'):
                listener.exitCreatePrivilege(self)

    def createPrivilege(self):
        localctx = Cypher25Parser.CreatePrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 492, self.RULE_createPrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3030
            self.match(Cypher25Parser.CREATE)
            self.state = 3043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 132, 133, 182]:
                self.state = 3031
                self.createPrivilegeForDatabase()
                self.state = 3032
                self.match(Cypher25Parser.ON)
                self.state = 3033
                self.databaseScope()
                pass
            elif token in [15, 49, 62, 246, 304]:
                self.state = 3035
                self.actionForDBMS()
                self.state = 3036
                self.match(Cypher25Parser.ON)
                self.state = 3037
                self.match(Cypher25Parser.DBMS)
                pass
            elif token in [195]:
                self.state = 3039
                self.match(Cypher25Parser.ON)
                self.state = 3040
                self.graphScope()
                self.state = 3041
                self.graphQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatePrivilegeForDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.IndexTokenContext, 0
            )

        def constraintToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ConstraintTokenContext, 0
            )

        def createNodePrivilegeToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateNodePrivilegeTokenContext, 0
            )

        def createRelPrivilegeToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreateRelPrivilegeTokenContext, 0
            )

        def createPropertyPrivilegeToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CreatePropertyPrivilegeTokenContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createPrivilegeForDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreatePrivilegeForDatabase'):
                listener.enterCreatePrivilegeForDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreatePrivilegeForDatabase'):
                listener.exitCreatePrivilegeForDatabase(self)

    def createPrivilegeForDatabase(self):
        localctx = Cypher25Parser.CreatePrivilegeForDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 494, self.RULE_createPrivilegeForDatabase)
        try:
            self.state = 3050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 358, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3045
                self.indexToken()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3046
                self.constraintToken()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3047
                self.createNodePrivilegeToken()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3048
                self.createRelPrivilegeToken()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3049
                self.createPropertyPrivilegeToken()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateNodePrivilegeTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Cypher25Parser.NEW, 0)

        def LABEL(self):
            return self.getToken(Cypher25Parser.LABEL, 0)

        def LABELS(self):
            return self.getToken(Cypher25Parser.LABELS, 0)

        def NODE(self):
            return self.getToken(Cypher25Parser.NODE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createNodePrivilegeToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateNodePrivilegeToken'):
                listener.enterCreateNodePrivilegeToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateNodePrivilegeToken'):
                listener.exitCreateNodePrivilegeToken(self)

    def createNodePrivilegeToken(self):
        localctx = Cypher25Parser.CreateNodePrivilegeTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 496, self.RULE_createNodePrivilegeToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3052
            self.match(Cypher25Parser.NEW)
            self.state = 3054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 183:
                self.state = 3053
                self.match(Cypher25Parser.NODE)

            self.state = 3056
            _la = self._input.LA(1)
            if not (_la == 150 or _la == 151):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateRelPrivilegeTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Cypher25Parser.NEW, 0)

        def TYPE(self):
            return self.getToken(Cypher25Parser.TYPE, 0)

        def TYPES(self):
            return self.getToken(Cypher25Parser.TYPES, 0)

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createRelPrivilegeToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateRelPrivilegeToken'):
                listener.enterCreateRelPrivilegeToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateRelPrivilegeToken'):
                listener.exitCreateRelPrivilegeToken(self)

    def createRelPrivilegeToken(self):
        localctx = Cypher25Parser.CreateRelPrivilegeTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 498, self.RULE_createRelPrivilegeToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3058
            self.match(Cypher25Parser.NEW)
            self.state = 3060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 232:
                self.state = 3059
                self.match(Cypher25Parser.RELATIONSHIP)

            self.state = 3062
            _la = self._input.LA(1)
            if not (_la == 295 or _la == 297):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatePropertyPrivilegeTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Cypher25Parser.NEW, 0)

        def NAME(self):
            return self.getToken(Cypher25Parser.NAME, 0)

        def NAMES(self):
            return self.getToken(Cypher25Parser.NAMES, 0)

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createPropertyPrivilegeToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreatePropertyPrivilegeToken'):
                listener.enterCreatePropertyPrivilegeToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreatePropertyPrivilegeToken'):
                listener.exitCreatePropertyPrivilegeToken(self)

    def createPropertyPrivilegeToken(self):
        localctx = Cypher25Parser.CreatePropertyPrivilegeTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 500, self.RULE_createPropertyPrivilegeToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3064
            self.match(Cypher25Parser.NEW)
            self.state = 3066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 219:
                self.state = 3065
                self.match(Cypher25Parser.PROPERTY)

            self.state = 3068
            _la = self._input.LA(1)
            if not (_la == 175 or _la == 176):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionForDBMSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def COMPOSITE(self):
            return self.getToken(Cypher25Parser.COMPOSITE, 0)

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_actionForDBMS

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterActionForDBMS'):
                listener.enterActionForDBMS(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitActionForDBMS'):
                listener.exitActionForDBMS(self)

    def actionForDBMS(self):
        localctx = Cypher25Parser.ActionForDBMSContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 502, self.RULE_actionForDBMS)
        self._la = 0  # Token type
        try:
            self.state = 3077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3070
                self.match(Cypher25Parser.ALIAS)
                pass
            elif token in [49, 62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 49:
                    self.state = 3071
                    self.match(Cypher25Parser.COMPOSITE)

                self.state = 3074
                self.match(Cypher25Parser.DATABASE)
                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3075
                self.match(Cypher25Parser.ROLE)
                pass
            elif token in [304]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3076
                self.match(Cypher25Parser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(Cypher25Parser.DROP, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def databaseScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DatabaseScopeContext, 0
            )

        def actionForDBMS(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ActionForDBMSContext, 0
            )

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def indexToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.IndexTokenContext, 0
            )

        def constraintToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ConstraintTokenContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropPrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropPrivilege'):
                listener.enterDropPrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropPrivilege'):
                listener.exitDropPrivilege(self)

    def dropPrivilege(self):
        localctx = Cypher25Parser.DropPrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 504, self.RULE_dropPrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3079
            self.match(Cypher25Parser.DROP)
            self.state = 3091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 132, 133]:
                self.state = 3082
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [132, 133]:
                    self.state = 3080
                    self.indexToken()
                    pass
                elif token in [51, 52]:
                    self.state = 3081
                    self.constraintToken()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3084
                self.match(Cypher25Parser.ON)
                self.state = 3085
                self.databaseScope()
                pass
            elif token in [15, 49, 62, 246, 304]:
                self.state = 3087
                self.actionForDBMS()
                self.state = 3088
                self.match(Cypher25Parser.ON)
                self.state = 3089
                self.match(Cypher25Parser.DBMS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(Cypher25Parser.LOAD, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringOrParameterContext, 0
            )

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def DATA(self):
            return self.getToken(Cypher25Parser.DATA, 0)

        def URL(self):
            return self.getToken(Cypher25Parser.URL, 0)

        def CIDR(self):
            return self.getToken(Cypher25Parser.CIDR, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_loadPrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLoadPrivilege'):
                listener.enterLoadPrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLoadPrivilege'):
                listener.exitLoadPrivilege(self)

    def loadPrivilege(self):
        localctx = Cypher25Parser.LoadPrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 506, self.RULE_loadPrivilege)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3093
            self.match(Cypher25Parser.LOAD)
            self.state = 3094
            self.match(Cypher25Parser.ON)
            self.state = 3099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 302]:
                self.state = 3095
                _la = self._input.LA(1)
                if not (_la == 42 or _la == 302):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3096
                self.stringOrParameter()
                pass
            elif token in [18]:
                self.state = 3097
                self.match(Cypher25Parser.ALL)
                self.state = 3098
                self.match(Cypher25Parser.DATA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(Cypher25Parser.SHOW, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def databaseScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DatabaseScopeContext, 0
            )

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def indexToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.IndexTokenContext, 0
            )

        def constraintToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ConstraintTokenContext, 0
            )

        def transactionToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TransactionTokenContext, 0
            )

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def PRIVILEGE(self):
            return self.getToken(Cypher25Parser.PRIVILEGE, 0)

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def SERVERS(self):
            return self.getToken(Cypher25Parser.SERVERS, 0)

        def settingToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SettingTokenContext, 0
            )

        def settingQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SettingQualifierContext, 0
            )

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def userQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UserQualifierContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showPrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowPrivilege'):
                listener.enterShowPrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowPrivilege'):
                listener.exitShowPrivilege(self)

    def showPrivilege(self):
        localctx = Cypher25Parser.ShowPrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 508, self.RULE_showPrivilege)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3101
            self.match(Cypher25Parser.SHOW)
            self.state = 3126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 132, 133, 290, 291]:
                self.state = 3108
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [132, 133]:
                    self.state = 3102
                    self.indexToken()
                    pass
                elif token in [51, 52]:
                    self.state = 3103
                    self.constraintToken()
                    pass
                elif token in [290, 291]:
                    self.state = 3104
                    self.transactionToken()
                    self.state = 3106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 165:
                        self.state = 3105
                        self.userQualifier()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3110
                self.match(Cypher25Parser.ON)
                self.state = 3111
                self.databaseScope()
                pass
            elif token in [15, 214, 246, 259, 260, 262, 263, 304]:
                self.state = 3122
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 3113
                    self.match(Cypher25Parser.ALIAS)
                    pass
                elif token in [214]:
                    self.state = 3114
                    self.match(Cypher25Parser.PRIVILEGE)
                    pass
                elif token in [246]:
                    self.state = 3115
                    self.match(Cypher25Parser.ROLE)
                    pass
                elif token in [259]:
                    self.state = 3116
                    self.match(Cypher25Parser.SERVER)
                    pass
                elif token in [260]:
                    self.state = 3117
                    self.match(Cypher25Parser.SERVERS)
                    pass
                elif token in [262, 263]:
                    self.state = 3118
                    self.settingToken()
                    self.state = 3119
                    self.settingQualifier()
                    pass
                elif token in [304]:
                    self.state = 3121
                    self.match(Cypher25Parser.USER)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3124
                self.match(Cypher25Parser.ON)
                self.state = 3125
                self.match(Cypher25Parser.DBMS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def LABEL(self):
            return self.getToken(Cypher25Parser.LABEL, 0)

        def labelsResource(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelsResourceContext, 0
            )

        def graphScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphScopeContext, 0
            )

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def propertiesResource(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertiesResourceContext, 0
            )

        def graphQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphQualifierContext, 0
            )

        def passwordToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordTokenContext, 0
            )

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def AUTH(self):
            return self.getToken(Cypher25Parser.AUTH, 0)

        def STATUS(self):
            return self.getToken(Cypher25Parser.STATUS, 0)

        def HOME(self):
            return self.getToken(Cypher25Parser.HOME, 0)

        def ACCESS(self):
            return self.getToken(Cypher25Parser.ACCESS, 0)

        def DEFAULT(self):
            return self.getToken(Cypher25Parser.DEFAULT, 0)

        def LANGUAGE(self):
            return self.getToken(Cypher25Parser.LANGUAGE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_setPrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSetPrivilege'):
                listener.enterSetPrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSetPrivilege'):
                listener.exitSetPrivilege(self)

    def setPrivilege(self):
        localctx = Cypher25Parser.SetPrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 510, self.RULE_setPrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3128
            self.match(Cypher25Parser.SET)
            self.state = 3158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 62, 202, 203, 304]:
                self.state = 3143
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [202, 203]:
                    self.state = 3129
                    self.passwordToken()
                    pass
                elif token in [304]:
                    self.state = 3130
                    self.match(Cypher25Parser.USER)
                    self.state = 3134
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [274]:
                        self.state = 3131
                        self.match(Cypher25Parser.STATUS)
                        pass
                    elif token in [126]:
                        self.state = 3132
                        self.match(Cypher25Parser.HOME)
                        self.state = 3133
                        self.match(Cypher25Parser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [62]:
                    self.state = 3136
                    self.match(Cypher25Parser.DATABASE)
                    self.state = 3140
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [11]:
                        self.state = 3137
                        self.match(Cypher25Parser.ACCESS)
                        pass
                    elif token in [68]:
                        self.state = 3138
                        self.match(Cypher25Parser.DEFAULT)
                        self.state = 3139
                        self.match(Cypher25Parser.LANGUAGE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [28]:
                    self.state = 3142
                    self.match(Cypher25Parser.AUTH)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3145
                self.match(Cypher25Parser.ON)
                self.state = 3146
                self.match(Cypher25Parser.DBMS)
                pass
            elif token in [150]:
                self.state = 3147
                self.match(Cypher25Parser.LABEL)
                self.state = 3148
                self.labelsResource()
                self.state = 3149
                self.match(Cypher25Parser.ON)
                self.state = 3150
                self.graphScope()
                pass
            elif token in [219]:
                self.state = 3152
                self.match(Cypher25Parser.PROPERTY)
                self.state = 3153
                self.propertiesResource()
                self.state = 3154
                self.match(Cypher25Parser.ON)
                self.state = 3155
                self.graphScope()
                self.state = 3156
                self.graphQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def PASSWORDS(self):
            return self.getToken(Cypher25Parser.PASSWORDS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_passwordToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPasswordToken'):
                listener.enterPasswordToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPasswordToken'):
                listener.exitPasswordToken(self)

    def passwordToken(self):
        localctx = Cypher25Parser.PasswordTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 512, self.RULE_passwordToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3160
            _la = self._input.LA(1)
            if not (_la == 202 or _la == 203):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemovePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(Cypher25Parser.REMOVE, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def LABEL(self):
            return self.getToken(Cypher25Parser.LABEL, 0)

        def labelsResource(self):
            return self.getTypedRuleContext(
                Cypher25Parser.LabelsResourceContext, 0
            )

        def graphScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphScopeContext, 0
            )

        def PRIVILEGE(self):
            return self.getToken(Cypher25Parser.PRIVILEGE, 0)

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_removePrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRemovePrivilege'):
                listener.enterRemovePrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRemovePrivilege'):
                listener.exitRemovePrivilege(self)

    def removePrivilege(self):
        localctx = Cypher25Parser.RemovePrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 514, self.RULE_removePrivilege)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3162
            self.match(Cypher25Parser.REMOVE)
            self.state = 3171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [214, 246]:
                self.state = 3163
                _la = self._input.LA(1)
                if not (_la == 214 or _la == 246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3164
                self.match(Cypher25Parser.ON)
                self.state = 3165
                self.match(Cypher25Parser.DBMS)
                pass
            elif token in [150]:
                self.state = 3166
                self.match(Cypher25Parser.LABEL)
                self.state = 3167
                self.labelsResource()
                self.state = 3168
                self.match(Cypher25Parser.ON)
                self.state = 3169
                self.graphScope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WritePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(Cypher25Parser.WRITE, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def graphScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphScopeContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_writePrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWritePrivilege'):
                listener.enterWritePrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWritePrivilege'):
                listener.exitWritePrivilege(self)

    def writePrivilege(self):
        localctx = Cypher25Parser.WritePrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 516, self.RULE_writePrivilege)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3173
            self.match(Cypher25Parser.WRITE)
            self.state = 3174
            self.match(Cypher25Parser.ON)
            self.state = 3175
            self.graphScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatabasePrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def databaseScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DatabaseScopeContext, 0
            )

        def ACCESS(self):
            return self.getToken(Cypher25Parser.ACCESS, 0)

        def START(self):
            return self.getToken(Cypher25Parser.START, 0)

        def STOP(self):
            return self.getToken(Cypher25Parser.STOP, 0)

        def indexToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.IndexTokenContext, 0
            )

        def constraintToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ConstraintTokenContext, 0
            )

        def NAME(self):
            return self.getToken(Cypher25Parser.NAME, 0)

        def TRANSACTION(self):
            return self.getToken(Cypher25Parser.TRANSACTION, 0)

        def TERMINATE(self):
            return self.getToken(Cypher25Parser.TERMINATE, 0)

        def transactionToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.TransactionTokenContext, 0
            )

        def MANAGEMENT(self):
            return self.getToken(Cypher25Parser.MANAGEMENT, 0)

        def userQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UserQualifierContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_databasePrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDatabasePrivilege'):
                listener.enterDatabasePrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDatabasePrivilege'):
                listener.exitDatabasePrivilege(self)

    def databasePrivilege(self):
        localctx = Cypher25Parser.DatabasePrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 518, self.RULE_databasePrivilege)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.state = 3177
                self.match(Cypher25Parser.ACCESS)
                pass
            elif token in [272]:
                self.state = 3178
                self.match(Cypher25Parser.START)
                pass
            elif token in [275]:
                self.state = 3179
                self.match(Cypher25Parser.STOP)
                pass
            elif token in [51, 52, 132, 133, 175]:
                self.state = 3183
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [132, 133]:
                    self.state = 3180
                    self.indexToken()
                    pass
                elif token in [51, 52]:
                    self.state = 3181
                    self.constraintToken()
                    pass
                elif token in [175]:
                    self.state = 3182
                    self.match(Cypher25Parser.NAME)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 167:
                    self.state = 3185
                    self.match(Cypher25Parser.MANAGEMENT)

                pass
            elif token in [280, 290]:
                self.state = 3194
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [290]:
                    self.state = 3188
                    self.match(Cypher25Parser.TRANSACTION)
                    self.state = 3190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 167:
                        self.state = 3189
                        self.match(Cypher25Parser.MANAGEMENT)

                    pass
                elif token in [280]:
                    self.state = 3192
                    self.match(Cypher25Parser.TERMINATE)
                    self.state = 3193
                    self.transactionToken()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 165:
                    self.state = 3196
                    self.userQualifier()

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3201
            self.match(Cypher25Parser.ON)
            self.state = 3202
            self.databaseScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DbmsPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def ALTER(self):
            return self.getToken(Cypher25Parser.ALTER, 0)

        def ASSIGN(self):
            return self.getToken(Cypher25Parser.ASSIGN, 0)

        def MANAGEMENT(self):
            return self.getToken(Cypher25Parser.MANAGEMENT, 0)

        def dbmsPrivilegeExecute(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DbmsPrivilegeExecuteContext, 0
            )

        def RENAME(self):
            return self.getToken(Cypher25Parser.RENAME, 0)

        def IMPERSONATE(self):
            return self.getToken(Cypher25Parser.IMPERSONATE, 0)

        def PRIVILEGE(self):
            return self.getToken(Cypher25Parser.PRIVILEGE, 0)

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def userQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UserQualifierContext, 0
            )

        def COMPOSITE(self):
            return self.getToken(Cypher25Parser.COMPOSITE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dbmsPrivilege

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDbmsPrivilege'):
                listener.enterDbmsPrivilege(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDbmsPrivilege'):
                listener.exitDbmsPrivilege(self)

    def dbmsPrivilege(self):
        localctx = Cypher25Parser.DbmsPrivilegeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 520, self.RULE_dbmsPrivilege)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.state = 3204
                self.match(Cypher25Parser.ALTER)
                self.state = 3211
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 3205
                    self.match(Cypher25Parser.ALIAS)
                    pass
                elif token in [49, 62]:
                    self.state = 3207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 49:
                        self.state = 3206
                        self.match(Cypher25Parser.COMPOSITE)

                    self.state = 3209
                    self.match(Cypher25Parser.DATABASE)
                    pass
                elif token in [304]:
                    self.state = 3210
                    self.match(Cypher25Parser.USER)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [26]:
                self.state = 3213
                self.match(Cypher25Parser.ASSIGN)
                self.state = 3214
                _la = self._input.LA(1)
                if not (_la == 214 or _la == 246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [15, 49, 62, 214, 246, 259, 304]:
                self.state = 3224
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 3215
                    self.match(Cypher25Parser.ALIAS)
                    pass
                elif token in [49, 62]:
                    self.state = 3217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 49:
                        self.state = 3216
                        self.match(Cypher25Parser.COMPOSITE)

                    self.state = 3219
                    self.match(Cypher25Parser.DATABASE)
                    pass
                elif token in [214]:
                    self.state = 3220
                    self.match(Cypher25Parser.PRIVILEGE)
                    pass
                elif token in [246]:
                    self.state = 3221
                    self.match(Cypher25Parser.ROLE)
                    pass
                elif token in [259]:
                    self.state = 3222
                    self.match(Cypher25Parser.SERVER)
                    pass
                elif token in [304]:
                    self.state = 3223
                    self.match(Cypher25Parser.USER)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3226
                self.match(Cypher25Parser.MANAGEMENT)
                pass
            elif token in [99]:
                self.state = 3227
                self.dbmsPrivilegeExecute()
                pass
            elif token in [229]:
                self.state = 3228
                self.match(Cypher25Parser.RENAME)
                self.state = 3229
                _la = self._input.LA(1)
                if not (_la == 246 or _la == 304):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [129]:
                self.state = 3230
                self.match(Cypher25Parser.IMPERSONATE)
                self.state = 3232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 165:
                    self.state = 3231
                    self.userQualifier()

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3236
            self.match(Cypher25Parser.ON)
            self.state = 3237
            self.match(Cypher25Parser.DBMS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DbmsPrivilegeExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(Cypher25Parser.EXECUTE, 0)

        def adminToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AdminTokenContext, 0
            )

        def PROCEDURES(self):
            return self.getToken(Cypher25Parser.PROCEDURES, 0)

        def procedureToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ProcedureTokenContext, 0
            )

        def executeProcedureQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExecuteProcedureQualifierContext, 0
            )

        def functionToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.FunctionTokenContext, 0
            )

        def executeFunctionQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExecuteFunctionQualifierContext, 0
            )

        def BOOSTED(self):
            return self.getToken(Cypher25Parser.BOOSTED, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def DEFINED(self):
            return self.getToken(Cypher25Parser.DEFINED, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dbmsPrivilegeExecute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDbmsPrivilegeExecute'):
                listener.enterDbmsPrivilegeExecute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDbmsPrivilegeExecute'):
                listener.exitDbmsPrivilegeExecute(self)

    def dbmsPrivilegeExecute(self):
        localctx = Cypher25Parser.DbmsPrivilegeExecuteContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 522, self.RULE_dbmsPrivilegeExecute)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239
            self.match(Cypher25Parser.EXECUTE)
            self.state = 3260
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 14]:
                self.state = 3240
                self.adminToken()
                self.state = 3241
                self.match(Cypher25Parser.PROCEDURES)
                pass
            elif token in [33, 116, 117, 216, 217, 304]:
                self.state = 3244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 33:
                    self.state = 3243
                    self.match(Cypher25Parser.BOOSTED)

                self.state = 3258
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [216, 217]:
                    self.state = 3246
                    self.procedureToken()
                    self.state = 3247
                    self.executeProcedureQualifier()
                    pass
                elif token in [116, 117, 304]:
                    self.state = 3253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 304:
                        self.state = 3249
                        self.match(Cypher25Parser.USER)
                        self.state = 3251
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 69:
                            self.state = 3250
                            self.match(Cypher25Parser.DEFINED)

                    self.state = 3255
                    self.functionToken()
                    self.state = 3256
                    self.executeFunctionQualifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdminTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(Cypher25Parser.ADMIN, 0)

        def ADMINISTRATOR(self):
            return self.getToken(Cypher25Parser.ADMINISTRATOR, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_adminToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAdminToken'):
                listener.enterAdminToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAdminToken'):
                listener.exitAdminToken(self)

    def adminToken(self):
        localctx = Cypher25Parser.AdminTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 524, self.RULE_adminToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            _la = self._input.LA(1)
            if not (_la == 13 or _la == 14):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(Cypher25Parser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(Cypher25Parser.PROCEDURES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_procedureToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterProcedureToken'):
                listener.enterProcedureToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitProcedureToken'):
                listener.exitProcedureToken(self)

    def procedureToken(self):
        localctx = Cypher25Parser.ProcedureTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 526, self.RULE_procedureToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3264
            _la = self._input.LA(1)
            if not (_la == 216 or _la == 217):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(Cypher25Parser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(Cypher25Parser.INDEXES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_indexToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterIndexToken'):
                listener.enterIndexToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitIndexToken'):
                listener.exitIndexToken(self)

    def indexToken(self):
        localctx = Cypher25Parser.IndexTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 528, self.RULE_indexToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3266
            _la = self._input.LA(1)
            if not (_la == 132 or _la == 133):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(Cypher25Parser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(Cypher25Parser.CONSTRAINTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_constraintToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterConstraintToken'):
                listener.enterConstraintToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitConstraintToken'):
                listener.exitConstraintToken(self)

    def constraintToken(self):
        localctx = Cypher25Parser.ConstraintTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 530, self.RULE_constraintToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3268
            _la = self._input.LA(1)
            if not (_la == 51 or _la == 52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(Cypher25Parser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(Cypher25Parser.TRANSACTIONS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_transactionToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTransactionToken'):
                listener.enterTransactionToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTransactionToken'):
                listener.exitTransactionToken(self)

    def transactionToken(self):
        localctx = Cypher25Parser.TransactionTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 532, self.RULE_transactionToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3270
            _la = self._input.LA(1)
            if not (_la == 290 or _la == 291):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Cypher25Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Cypher25Parser.RPAREN, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def userNames(self):
            return self.getTypedRuleContext(Cypher25Parser.UserNamesContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_userQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUserQualifier'):
                listener.enterUserQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUserQualifier'):
                listener.exitUserQualifier(self)

    def userQualifier(self):
        localctx = Cypher25Parser.UserQualifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 534, self.RULE_userQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3272
            self.match(Cypher25Parser.LPAREN)
            self.state = 3275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.state = 3273
                self.match(Cypher25Parser.TIMES)
                pass
            elif token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.state = 3274
                self.userNames()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3277
            self.match(Cypher25Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecuteFunctionQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globs(self):
            return self.getTypedRuleContext(Cypher25Parser.GlobsContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_executeFunctionQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExecuteFunctionQualifier'):
                listener.enterExecuteFunctionQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExecuteFunctionQualifier'):
                listener.exitExecuteFunctionQualifier(self)

    def executeFunctionQualifier(self):
        localctx = Cypher25Parser.ExecuteFunctionQualifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 536, self.RULE_executeFunctionQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3279
            self.globs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecuteProcedureQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globs(self):
            return self.getTypedRuleContext(Cypher25Parser.GlobsContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_executeProcedureQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterExecuteProcedureQualifier'):
                listener.enterExecuteProcedureQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitExecuteProcedureQualifier'):
                listener.exitExecuteProcedureQualifier(self)

    def executeProcedureQualifier(self):
        localctx = Cypher25Parser.ExecuteProcedureQualifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 538, self.RULE_executeProcedureQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3281
            self.globs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SettingQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globs(self):
            return self.getTypedRuleContext(Cypher25Parser.GlobsContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_settingQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSettingQualifier'):
                listener.enterSettingQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSettingQualifier'):
                listener.exitSettingQualifier(self)

    def settingQualifier(self):
        localctx = Cypher25Parser.SettingQualifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 540, self.RULE_settingQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3283
            self.globs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def glob(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(Cypher25Parser.GlobContext)
            else:
                return self.getTypedRuleContext(Cypher25Parser.GlobContext, i)

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_globs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGlobs'):
                listener.enterGlobs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGlobs'):
                listener.exitGlobs(self)

    def globs(self):
        localctx = Cypher25Parser.GlobsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_globs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3285
            self.glob()
            self.state = 3290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 3286
                self.match(Cypher25Parser.COMMA)
                self.state = 3287
                self.glob()
                self.state = 3292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EscapedSymbolicNameStringContext, 0
            )

        def globRecursive(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GlobRecursiveContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_glob

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGlob'):
                listener.enterGlob(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGlob'):
                listener.exitGlob(self)

    def glob(self):
        localctx = Cypher25Parser.GlobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_glob)
        try:
            self.state = 3298
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3293
                self.escapedSymbolicNameString()
                self.state = 3295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 395, self._ctx)
                if la_ == 1:
                    self.state = 3294
                    self.globRecursive()

                pass
            elif token in [
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                80,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3297
                self.globRecursive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobRecursiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globPart(self):
            return self.getTypedRuleContext(Cypher25Parser.GlobPartContext, 0)

        def globRecursive(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GlobRecursiveContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_globRecursive

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGlobRecursive'):
                listener.enterGlobRecursive(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGlobRecursive'):
                listener.exitGlobRecursive(self)

    def globRecursive(self):
        localctx = Cypher25Parser.GlobRecursiveContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 546, self.RULE_globRecursive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            self.globPart()
            self.state = 3302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 397, self._ctx)
            if la_ == 1:
                self.state = 3301
                self.globRecursive()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Cypher25Parser.DOT, 0)

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EscapedSymbolicNameStringContext, 0
            )

        def QUESTION(self):
            return self.getToken(Cypher25Parser.QUESTION, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def unescapedSymbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UnescapedSymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_globPart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGlobPart'):
                listener.enterGlobPart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGlobPart'):
                listener.exitGlobPart(self)

    def globPart(self):
        localctx = Cypher25Parser.GlobPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_globPart)
        self._la = 0  # Token type
        try:
            self.state = 3311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3304
                self.match(Cypher25Parser.DOT)
                self.state = 3306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 10:
                    self.state = 3305
                    self.escapedSymbolicNameString()

                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3308
                self.match(Cypher25Parser.QUESTION)
                pass
            elif token in [284]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3309
                self.match(Cypher25Parser.TIMES)
                pass
            elif token in [
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3310
                self.unescapedSymbolicNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedGraphPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def graphScope(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphScopeContext, 0
            )

        def graphQualifier(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphQualifierContext, 0
            )

        def TRAVERSE(self):
            return self.getToken(Cypher25Parser.TRAVERSE, 0)

        def DELETE(self):
            return self.getToken(Cypher25Parser.DELETE, 0)

        def propertiesResource(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertiesResourceContext, 0
            )

        def READ(self):
            return self.getToken(Cypher25Parser.READ, 0)

        def MATCH(self):
            return self.getToken(Cypher25Parser.MATCH, 0)

        def MERGE(self):
            return self.getToken(Cypher25Parser.MERGE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_qualifiedGraphPrivileges

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterQualifiedGraphPrivileges'):
                listener.enterQualifiedGraphPrivileges(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitQualifiedGraphPrivileges'):
                listener.exitQualifiedGraphPrivileges(self)

    def qualifiedGraphPrivileges(self):
        localctx = Cypher25Parser.QualifiedGraphPrivilegesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 550, self.RULE_qualifiedGraphPrivileges)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [292]:
                self.state = 3313
                self.match(Cypher25Parser.TRAVERSE)
                pass
            elif token in [70]:
                self.state = 3314
                self.match(Cypher25Parser.DELETE)
                pass
            elif token in [169, 170, 226]:
                self.state = 3315
                _la = self._input.LA(1)
                if not (
                    ((_la - 169) & ~0x3F) == 0
                    and ((1 << (_la - 169)) & 144115188075855875) != 0
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3316
                self.propertiesResource()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3319
            self.match(Cypher25Parser.ON)
            self.state = 3320
            self.graphScope()
            self.state = 3321
            self.graphQualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelsResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def nonEmptyStringList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NonEmptyStringListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_labelsResource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterLabelsResource'):
                listener.enterLabelsResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitLabelsResource'):
                listener.exitLabelsResource(self)

    def labelsResource(self):
        localctx = Cypher25Parser.LabelsResourceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 552, self.RULE_labelsResource)
        try:
            self.state = 3325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3323
                self.match(Cypher25Parser.TIMES)
                pass
            elif token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3324
                self.nonEmptyStringList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertiesResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def nonEmptyStringList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NonEmptyStringListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_propertiesResource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPropertiesResource'):
                listener.enterPropertiesResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPropertiesResource'):
                listener.exitPropertiesResource(self)

    def propertiesResource(self):
        localctx = Cypher25Parser.PropertiesResourceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 554, self.RULE_propertiesResource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3327
            self.match(Cypher25Parser.LCURLY)
            self.state = 3330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.state = 3328
                self.match(Cypher25Parser.TIMES)
                pass
            elif token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.state = 3329
                self.nonEmptyStringList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3332
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonEmptyStringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_nonEmptyStringList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNonEmptyStringList'):
                listener.enterNonEmptyStringList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNonEmptyStringList'):
                listener.exitNonEmptyStringList(self)

    def nonEmptyStringList(self):
        localctx = Cypher25Parser.NonEmptyStringListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 556, self.RULE_nonEmptyStringList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self.symbolicNameString()
            self.state = 3339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 3335
                self.match(Cypher25Parser.COMMA)
                self.state = 3336
                self.symbolicNameString()
                self.state = 3341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQualifierToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphQualifierTokenContext, 0
            )

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def nonEmptyStringList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.NonEmptyStringListContext, 0
            )

        def LPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.LPAREN)
            else:
                return self.getToken(Cypher25Parser.LPAREN, i)

        def RPAREN(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.RPAREN)
            else:
                return self.getToken(Cypher25Parser.RPAREN, i)

        def arrowLine(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ArrowLineContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ArrowLineContext, i
                )

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def variable(self):
            return self.getTypedRuleContext(Cypher25Parser.VariableContext, 0)

        def COLON(self):
            return self.getToken(Cypher25Parser.COLON, 0)

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def leftArrow(self):
            return self.getTypedRuleContext(Cypher25Parser.LeftArrowContext, 0)

        def map_(self):
            return self.getTypedRuleContext(Cypher25Parser.MapContext, 0)

        def rightArrow(self):
            return self.getTypedRuleContext(
                Cypher25Parser.RightArrowContext, 0
            )

        def BAR(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.BAR)
            else:
                return self.getToken(Cypher25Parser.BAR, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_graphQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGraphQualifier'):
                listener.enterGraphQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGraphQualifier'):
                listener.exitGraphQualifier(self)

    def graphQualifier(self):
        localctx = Cypher25Parser.GraphQualifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 558, self.RULE_graphQualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91, 92, 183, 185, 232, 233]:
                self.state = 3342
                self.graphQualifierToken()
                self.state = 3345
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [284]:
                    self.state = 3343
                    self.match(Cypher25Parser.TIMES)
                    pass
                elif token in [
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    78,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    119,
                    120,
                    121,
                    122,
                    123,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    154,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    167,
                    168,
                    169,
                    170,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    209,
                    210,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    223,
                    226,
                    227,
                    228,
                    229,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                ]:
                    self.state = 3344
                    self.nonEmptyStringList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [112]:
                self.state = 3347
                self.match(Cypher25Parser.FOR)
                self.state = 3421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 418, self._ctx)
                if la_ == 1:
                    self.state = 3348
                    self.match(Cypher25Parser.LPAREN)
                    self.state = 3350
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 405, self._ctx
                    )
                    if la_ == 1:
                        self.state = 3349
                        self.variable()

                    self.state = 3361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 44:
                        self.state = 3352
                        self.match(Cypher25Parser.COLON)
                        self.state = 3353
                        self.symbolicNameString()
                        self.state = 3358
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 3354
                            self.match(Cypher25Parser.BAR)
                            self.state = 3355
                            self.symbolicNameString()
                            self.state = 3360
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 3373
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [250]:
                        self.state = 3363
                        self.match(Cypher25Parser.RPAREN)
                        self.state = 3364
                        self.match(Cypher25Parser.WHERE)
                        self.state = 3365
                        self.expression()
                        pass
                    elif token in [156, 313]:
                        self.state = 3369
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [313]:
                            self.state = 3366
                            self.match(Cypher25Parser.WHERE)
                            self.state = 3367
                            self.expression()
                            pass
                        elif token in [156]:
                            self.state = 3368
                            self.map_()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 3371
                        self.match(Cypher25Parser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 3375
                    self.match(Cypher25Parser.LPAREN)
                    self.state = 3376
                    self.match(Cypher25Parser.RPAREN)
                    self.state = 3378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 166 or _la == 324:
                        self.state = 3377
                        self.leftArrow()

                    self.state = 3380
                    self.arrowLine()
                    self.state = 3381
                    self.match(Cypher25Parser.LBRACKET)
                    self.state = 3383
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 411, self._ctx
                    )
                    if la_ == 1:
                        self.state = 3382
                        self.variable()

                    self.state = 3394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 44:
                        self.state = 3385
                        self.match(Cypher25Parser.COLON)
                        self.state = 3386
                        self.symbolicNameString()
                        self.state = 3391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 3387
                            self.match(Cypher25Parser.BAR)
                            self.state = 3388
                            self.symbolicNameString()
                            self.state = 3393
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 3419
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [224]:
                        self.state = 3396
                        self.match(Cypher25Parser.RBRACKET)
                        self.state = 3397
                        self.arrowLine()
                        self.state = 3399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 124 or _la == 325:
                            self.state = 3398
                            self.rightArrow()

                        self.state = 3401
                        self.match(Cypher25Parser.LPAREN)
                        self.state = 3402
                        self.match(Cypher25Parser.RPAREN)
                        self.state = 3403
                        self.match(Cypher25Parser.WHERE)
                        self.state = 3404
                        self.expression()
                        pass
                    elif token in [156, 313]:
                        self.state = 3409
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [313]:
                            self.state = 3406
                            self.match(Cypher25Parser.WHERE)
                            self.state = 3407
                            self.expression()
                            pass
                        elif token in [156]:
                            self.state = 3408
                            self.map_()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 3411
                        self.match(Cypher25Parser.RBRACKET)
                        self.state = 3412
                        self.arrowLine()
                        self.state = 3414
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 124 or _la == 325:
                            self.state = 3413
                            self.rightArrow()

                        self.state = 3416
                        self.match(Cypher25Parser.LPAREN)
                        self.state = 3417
                        self.match(Cypher25Parser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                pass
            elif token in [114, 287]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphQualifierTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relToken(self):
            return self.getTypedRuleContext(Cypher25Parser.RelTokenContext, 0)

        def nodeToken(self):
            return self.getTypedRuleContext(Cypher25Parser.NodeTokenContext, 0)

        def elementToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ElementTokenContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_graphQualifierToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGraphQualifierToken'):
                listener.enterGraphQualifierToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGraphQualifierToken'):
                listener.exitGraphQualifierToken(self)

    def graphQualifierToken(self):
        localctx = Cypher25Parser.GraphQualifierTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 560, self.RULE_graphQualifierToken)
        try:
            self.state = 3428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [232, 233]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3425
                self.relToken()
                pass
            elif token in [183, 185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3426
                self.nodeToken()
                pass
            elif token in [91, 92]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3427
                self.elementToken()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def RELATIONSHIPS(self):
            return self.getToken(Cypher25Parser.RELATIONSHIPS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_relToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterRelToken'):
                listener.enterRelToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitRelToken'):
                listener.exitRelToken(self)

    def relToken(self):
        localctx = Cypher25Parser.RelTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_relToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430
            _la = self._input.LA(1)
            if not (_la == 232 or _la == 233):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(Cypher25Parser.ELEMENT, 0)

        def ELEMENTS(self):
            return self.getToken(Cypher25Parser.ELEMENTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_elementToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterElementToken'):
                listener.enterElementToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitElementToken'):
                listener.exitElementToken(self)

    def elementToken(self):
        localctx = Cypher25Parser.ElementTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 564, self.RULE_elementToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3432
            _la = self._input.LA(1)
            if not (_la == 91 or _la == 92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE(self):
            return self.getToken(Cypher25Parser.NODE, 0)

        def NODES(self):
            return self.getToken(Cypher25Parser.NODES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_nodeToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterNodeToken'):
                listener.enterNodeToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitNodeToken'):
                listener.exitNodeToken(self)

    def nodeToken(self):
        localctx = Cypher25Parser.NodeTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_nodeToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3434
            _la = self._input.LA(1)
            if not (_la == 183 or _la == 185):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatabaseScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME(self):
            return self.getToken(Cypher25Parser.HOME, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(Cypher25Parser.DATABASES, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def symbolicAliasNameList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_databaseScope

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDatabaseScope'):
                listener.enterDatabaseScope(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDatabaseScope'):
                listener.exitDatabaseScope(self)

    def databaseScope(self):
        localctx = Cypher25Parser.DatabaseScopeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 568, self.RULE_databaseScope)
        self._la = 0  # Token type
        try:
            self.state = 3443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3436
                self.match(Cypher25Parser.HOME)
                self.state = 3437
                self.match(Cypher25Parser.DATABASE)
                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3438
                _la = self._input.LA(1)
                if not (_la == 62 or _la == 63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [284]:
                    self.state = 3439
                    self.match(Cypher25Parser.TIMES)
                    pass
                elif token in [
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    119,
                    120,
                    121,
                    122,
                    123,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    154,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    167,
                    168,
                    169,
                    170,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    209,
                    210,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    223,
                    226,
                    227,
                    228,
                    229,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                ]:
                    self.state = 3440
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME(self):
            return self.getToken(Cypher25Parser.HOME, 0)

        def GRAPH(self):
            return self.getToken(Cypher25Parser.GRAPH, 0)

        def GRAPHS(self):
            return self.getToken(Cypher25Parser.GRAPHS, 0)

        def TIMES(self):
            return self.getToken(Cypher25Parser.TIMES, 0)

        def symbolicAliasNameList(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameListContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_graphScope

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGraphScope'):
                listener.enterGraphScope(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGraphScope'):
                listener.exitGraphScope(self)

    def graphScope(self):
        localctx = Cypher25Parser.GraphScopeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 570, self.RULE_graphScope)
        self._la = 0  # Token type
        try:
            self.state = 3452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3445
                self.match(Cypher25Parser.HOME)
                self.state = 3446
                self.match(Cypher25Parser.GRAPH)
                pass
            elif token in [120, 121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3447
                _la = self._input.LA(1)
                if not (_la == 120 or _la == 121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3450
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [284]:
                    self.state = 3448
                    self.match(Cypher25Parser.TIMES)
                    pass
                elif token in [
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    119,
                    120,
                    121,
                    122,
                    123,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    154,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    167,
                    168,
                    169,
                    170,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    209,
                    210,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    223,
                    226,
                    227,
                    228,
                    229,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                ]:
                    self.state = 3449
                    self.symbolicAliasNameList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateCompositeDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOSITE(self):
            return self.getToken(Cypher25Parser.COMPOSITE, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def databaseName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DatabaseNameContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def defaultLanguageSpecification(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DefaultLanguageSpecificationContext, 0
            )

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def waitClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WaitClauseContext, 0
            )

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createCompositeDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateCompositeDatabase'):
                listener.enterCreateCompositeDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateCompositeDatabase'):
                listener.exitCreateCompositeDatabase(self)

    def createCompositeDatabase(self):
        localctx = Cypher25Parser.CreateCompositeDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 572, self.RULE_createCompositeDatabase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3454
            self.match(Cypher25Parser.COMPOSITE)
            self.state = 3455
            self.match(Cypher25Parser.DATABASE)
            self.state = 3456
            self.databaseName()
            self.state = 3460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 3457
                self.match(Cypher25Parser.IF)
                self.state = 3458
                self.match(Cypher25Parser.NOT)
                self.state = 3459
                self.match(Cypher25Parser.EXISTS)

            self.state = 3466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 68 or _la == 261:
                self.state = 3463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 261:
                    self.state = 3462
                    self.match(Cypher25Parser.SET)

                self.state = 3465
                self.defaultLanguageSpecification()

            self.state = 3469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 198:
                self.state = 3468
                self.commandOptions()

            self.state = 3472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 191 or _la == 311:
                self.state = 3471
                self.waitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def databaseName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DatabaseNameContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def defaultLanguageSpecification(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DefaultLanguageSpecificationContext, 0
            )

        def topology(self):
            return self.getTypedRuleContext(Cypher25Parser.TopologyContext, 0)

        def shards(self):
            return self.getTypedRuleContext(Cypher25Parser.ShardsContext, 0)

        def commandOptions(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandOptionsContext, 0
            )

        def waitClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WaitClauseContext, 0
            )

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateDatabase'):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateDatabase'):
                listener.exitCreateDatabase(self)

    def createDatabase(self):
        localctx = Cypher25Parser.CreateDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 574, self.RULE_createDatabase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3474
            self.match(Cypher25Parser.DATABASE)
            self.state = 3475
            self.databaseName()
            self.state = 3479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 3476
                self.match(Cypher25Parser.IF)
                self.state = 3477
                self.match(Cypher25Parser.NOT)
                self.state = 3478
                self.match(Cypher25Parser.EXISTS)

            self.state = 3485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 432, self._ctx)
            if la_ == 1:
                self.state = 3482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 261:
                    self.state = 3481
                    self.match(Cypher25Parser.SET)

                self.state = 3484
                self.defaultLanguageSpecification()

            self.state = 3489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 433, self._ctx)
            if la_ == 1:
                self.state = 3487
                self.topology()

            elif la_ == 2:
                self.state = 3488
                self.shards()

            self.state = 3492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 198:
                self.state = 3491
                self.commandOptions()

            self.state = 3495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 191 or _la == 311:
                self.state = 3494
                self.waitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShardsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyShard(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PropertyShardContext, 0
            )

        def graphShard(self):
            return self.getTypedRuleContext(
                Cypher25Parser.GraphShardContext, 0
            )

        def SET(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.SET)
            else:
                return self.getToken(Cypher25Parser.SET, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_shards

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShards'):
                listener.enterShards(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShards'):
                listener.exitShards(self)

    def shards(self):
        localctx = Cypher25Parser.ShardsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_shards)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 437, self._ctx)
            if la_ == 1:
                self.state = 3498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 261:
                    self.state = 3497
                    self.match(Cypher25Parser.SET)

                self.state = 3500
                self.graphShard()

            self.state = 3504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 261:
                self.state = 3503
                self.match(Cypher25Parser.SET)

            self.state = 3506
            self.propertyShard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphShardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(Cypher25Parser.GRAPH, 0)

        def SHARD(self):
            return self.getToken(Cypher25Parser.SHARD, 0)

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def topology(self):
            return self.getTypedRuleContext(Cypher25Parser.TopologyContext, 0)

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_graphShard

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterGraphShard'):
                listener.enterGraphShard(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitGraphShard'):
                listener.exitGraphShard(self)

    def graphShard(self):
        localctx = Cypher25Parser.GraphShardContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 578, self.RULE_graphShard)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3508
            self.match(Cypher25Parser.GRAPH)
            self.state = 3509
            self.match(Cypher25Parser.SHARD)
            self.state = 3510
            self.match(Cypher25Parser.LCURLY)
            self.state = 3515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 261 or _la == 288:
                self.state = 3512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 439, self._ctx)
                if la_ == 1:
                    self.state = 3511
                    self.match(Cypher25Parser.SET)

                self.state = 3514
                self.topology()

            self.state = 3517
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyShardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def COUNT(self):
            return self.getToken(Cypher25Parser.COUNT, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def SHARD(self):
            return self.getToken(Cypher25Parser.SHARD, 0)

        def SHARDS(self):
            return self.getToken(Cypher25Parser.SHARDS, 0)

        def TOPOLOGY(self):
            return self.getToken(Cypher25Parser.TOPOLOGY, 0)

        def uIntOrIntParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UIntOrIntParameterContext, 0
            )

        def REPLICA(self):
            return self.getToken(Cypher25Parser.REPLICA, 0)

        def REPLICAS(self):
            return self.getToken(Cypher25Parser.REPLICAS, 0)

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_propertyShard

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPropertyShard'):
                listener.enterPropertyShard(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPropertyShard'):
                listener.exitPropertyShard(self)

    def propertyShard(self):
        localctx = Cypher25Parser.PropertyShardContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 580, self.RULE_propertyShard)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            self.match(Cypher25Parser.PROPERTY)
            self.state = 3520
            _la = self._input.LA(1)
            if not (_la == 264 or _la == 265):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3521
            self.match(Cypher25Parser.LCURLY)
            self.state = 3522
            self.match(Cypher25Parser.COUNT)
            self.state = 3523
            self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
            self.state = 3531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 261 or _la == 288:
                self.state = 3525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 261:
                    self.state = 3524
                    self.match(Cypher25Parser.SET)

                self.state = 3527
                self.match(Cypher25Parser.TOPOLOGY)
                self.state = 3528
                self.uIntOrIntParameter()
                self.state = 3529
                _la = self._input.LA(1)
                if not (_la == 237 or _la == 238):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 3533
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TopologyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOPOLOGY(self):
            return self.getToken(Cypher25Parser.TOPOLOGY, 0)

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def primaryTopology(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PrimaryTopologyContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PrimaryTopologyContext, i
                )

        def secondaryTopology(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SecondaryTopologyContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SecondaryTopologyContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_topology

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterTopology'):
                listener.enterTopology(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitTopology'):
                listener.exitTopology(self)

    def topology(self):
        localctx = Cypher25Parser.TopologyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_topology)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 261:
                self.state = 3535
                self.match(Cypher25Parser.SET)

            self.state = 3538
            self.match(Cypher25Parser.TOPOLOGY)
            self.state = 3541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 444, self._ctx)
                if la_ == 1:
                    self.state = 3539
                    self.primaryTopology()
                    pass

                elif la_ == 2:
                    self.state = 3540
                    self.secondaryTopology()
                    pass

                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 5 or _la == 77):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryTopologyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uIntOrIntParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UIntOrIntParameterContext, 0
            )

        def primaryToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PrimaryTokenContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_primaryTopology

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPrimaryTopology'):
                listener.enterPrimaryTopology(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPrimaryTopology'):
                listener.exitPrimaryTopology(self)

    def primaryTopology(self):
        localctx = Cypher25Parser.PrimaryTopologyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 584, self.RULE_primaryTopology)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3545
            self.uIntOrIntParameter()
            self.state = 3546
            self.primaryToken()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(Cypher25Parser.PRIMARY, 0)

        def PRIMARIES(self):
            return self.getToken(Cypher25Parser.PRIMARIES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_primaryToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterPrimaryToken'):
                listener.enterPrimaryToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitPrimaryToken'):
                listener.exitPrimaryToken(self)

    def primaryToken(self):
        localctx = Cypher25Parser.PrimaryTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 586, self.RULE_primaryToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3548
            _la = self._input.LA(1)
            if not (_la == 212 or _la == 213):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecondaryTopologyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uIntOrIntParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UIntOrIntParameterContext, 0
            )

        def secondaryToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SecondaryTokenContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_secondaryTopology

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSecondaryTopology'):
                listener.enterSecondaryTopology(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSecondaryTopology'):
                listener.exitSecondaryTopology(self)

    def secondaryTopology(self):
        localctx = Cypher25Parser.SecondaryTopologyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 588, self.RULE_secondaryTopology)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3550
            self.uIntOrIntParameter()
            self.state = 3551
            self.secondaryToken()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecondaryTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECONDARY(self):
            return self.getToken(Cypher25Parser.SECONDARY, 0)

        def SECONDARIES(self):
            return self.getToken(Cypher25Parser.SECONDARIES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_secondaryToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSecondaryToken'):
                listener.enterSecondaryToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSecondaryToken'):
                listener.exitSecondaryToken(self)

    def secondaryToken(self):
        localctx = Cypher25Parser.SecondaryTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 590, self.RULE_secondaryToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3553
            _la = self._input.LA(1)
            if not (_la == 254 or _la == 255):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultLanguageSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(Cypher25Parser.DEFAULT, 0)

        def LANGUAGE(self):
            return self.getToken(Cypher25Parser.LANGUAGE, 0)

        def CYPHER(self):
            return self.getToken(Cypher25Parser.CYPHER, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_defaultLanguageSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDefaultLanguageSpecification'):
                listener.enterDefaultLanguageSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDefaultLanguageSpecification'):
                listener.exitDefaultLanguageSpecification(self)

    def defaultLanguageSpecification(self):
        localctx = Cypher25Parser.DefaultLanguageSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 592, self.RULE_defaultLanguageSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            self.match(Cypher25Parser.DEFAULT)
            self.state = 3556
            self.match(Cypher25Parser.LANGUAGE)
            self.state = 3557
            self.match(Cypher25Parser.CYPHER)
            self.state = 3558
            self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def COMPOSITE(self):
            return self.getToken(Cypher25Parser.COMPOSITE, 0)

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def aliasAction(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AliasActionContext, 0
            )

        def DATA(self):
            return self.getToken(Cypher25Parser.DATA, 0)

        def waitClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WaitClauseContext, 0
            )

        def DUMP(self):
            return self.getToken(Cypher25Parser.DUMP, 0)

        def DESTROY(self):
            return self.getToken(Cypher25Parser.DESTROY, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropDatabase'):
                listener.enterDropDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropDatabase'):
                listener.exitDropDatabase(self)

    def dropDatabase(self):
        localctx = Cypher25Parser.DropDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 594, self.RULE_dropDatabase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 49:
                self.state = 3560
                self.match(Cypher25Parser.COMPOSITE)

            self.state = 3563
            self.match(Cypher25Parser.DATABASE)
            self.state = 3564
            self.symbolicAliasNameOrParameter()
            self.state = 3567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 3565
                self.match(Cypher25Parser.IF)
                self.state = 3566
                self.match(Cypher25Parser.EXISTS)

            self.state = 3570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 39 or _la == 242:
                self.state = 3569
                self.aliasAction()

            self.state = 3574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 74 or _la == 86:
                self.state = 3572
                _la = self._input.LA(1)
                if not (_la == 74 or _la == 86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3573
                self.match(Cypher25Parser.DATA)

            self.state = 3577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 191 or _la == 311:
                self.state = 3576
                self.waitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(Cypher25Parser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(Cypher25Parser.CASCADE, 0)

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def ALIASES(self):
            return self.getToken(Cypher25Parser.ALIASES, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_aliasAction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAliasAction'):
                listener.enterAliasAction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAliasAction'):
                listener.exitAliasAction(self)

    def aliasAction(self):
        localctx = Cypher25Parser.AliasActionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 596, self.RULE_aliasAction)
        self._la = 0  # Token type
        try:
            self.state = 3582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [242]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3579
                self.match(Cypher25Parser.RESTRICT)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3580
                self.match(Cypher25Parser.CASCADE)
                self.state = 3581
                _la = self._input.LA(1)
                if not (_la == 15 or _la == 16):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def waitClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WaitClauseContext, 0
            )

        def SET(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.SET)
            else:
                return self.getToken(Cypher25Parser.SET, i)

        def REMOVE(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.REMOVE)
            else:
                return self.getToken(Cypher25Parser.REMOVE, i)

        def OPTION(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.OPTION)
            else:
                return self.getToken(Cypher25Parser.OPTION, i)

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def alterDatabaseAccess(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterDatabaseAccessContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterDatabaseAccessContext, i
                )

        def alterDatabaseTopology(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterDatabaseTopologyContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterDatabaseTopologyContext, i
                )

        def alterDatabaseOption(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterDatabaseOptionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterDatabaseOptionContext, i
                )

        def defaultLanguageSpecification(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.DefaultLanguageSpecificationContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.DefaultLanguageSpecificationContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterDatabase'):
                listener.enterAlterDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterDatabase'):
                listener.exitAlterDatabase(self)

    def alterDatabase(self):
        localctx = Cypher25Parser.AlterDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 598, self.RULE_alterDatabase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3584
            self.match(Cypher25Parser.DATABASE)
            self.state = 3585
            self.symbolicAliasNameOrParameter()
            self.state = 3588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 3586
                self.match(Cypher25Parser.IF)
                self.state = 3587
                self.match(Cypher25Parser.EXISTS)

            self.state = 3608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [261]:
                self.state = 3597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3590
                    self.match(Cypher25Parser.SET)
                    self.state = 3595
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [11]:
                        self.state = 3591
                        self.alterDatabaseAccess()
                        pass
                    elif token in [288]:
                        self.state = 3592
                        self.alterDatabaseTopology()
                        pass
                    elif token in [199]:
                        self.state = 3593
                        self.alterDatabaseOption()
                        pass
                    elif token in [68]:
                        self.state = 3594
                        self.defaultLanguageSpecification()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 261):
                        break

                pass
            elif token in [234]:
                self.state = 3604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3601
                    self.match(Cypher25Parser.REMOVE)
                    self.state = 3602
                    self.match(Cypher25Parser.OPTION)
                    self.state = 3603
                    self.symbolicNameString()
                    self.state = 3606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 234):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 191 or _la == 311:
                self.state = 3610
                self.waitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(Cypher25Parser.ACCESS, 0)

        def READ(self):
            return self.getToken(Cypher25Parser.READ, 0)

        def ONLY(self):
            return self.getToken(Cypher25Parser.ONLY, 0)

        def WRITE(self):
            return self.getToken(Cypher25Parser.WRITE, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterDatabaseAccess

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterDatabaseAccess'):
                listener.enterAlterDatabaseAccess(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterDatabaseAccess'):
                listener.exitAlterDatabaseAccess(self)

    def alterDatabaseAccess(self):
        localctx = Cypher25Parser.AlterDatabaseAccessContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 600, self.RULE_alterDatabaseAccess)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3613
            self.match(Cypher25Parser.ACCESS)
            self.state = 3614
            self.match(Cypher25Parser.READ)
            self.state = 3615
            _la = self._input.LA(1)
            if not (_la == 196 or _la == 316):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseTopologyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOPOLOGY(self):
            return self.getToken(Cypher25Parser.TOPOLOGY, 0)

        def primaryTopology(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PrimaryTopologyContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PrimaryTopologyContext, i
                )

        def secondaryTopology(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SecondaryTopologyContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SecondaryTopologyContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterDatabaseTopology

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterDatabaseTopology'):
                listener.enterAlterDatabaseTopology(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterDatabaseTopology'):
                listener.exitAlterDatabaseTopology(self)

    def alterDatabaseTopology(self):
        localctx = Cypher25Parser.AlterDatabaseTopologyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 602, self.RULE_alterDatabaseTopology)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3617
            self.match(Cypher25Parser.TOPOLOGY)
            self.state = 3620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 458, self._ctx)
                if la_ == 1:
                    self.state = 3618
                    self.primaryTopology()
                    pass

                elif la_ == 2:
                    self.state = 3619
                    self.secondaryTopology()
                    pass

                self.state = 3622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 5 or _la == 77):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(Cypher25Parser.OPTION, 0)

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterDatabaseOption

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterDatabaseOption'):
                listener.enterAlterDatabaseOption(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterDatabaseOption'):
                listener.exitAlterDatabaseOption(self)

    def alterDatabaseOption(self):
        localctx = Cypher25Parser.AlterDatabaseOptionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 604, self.RULE_alterDatabaseOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3624
            self.match(Cypher25Parser.OPTION)
            self.state = 3625
            self.symbolicNameString()
            self.state = 3626
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(Cypher25Parser.START, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def waitClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WaitClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_startDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStartDatabase'):
                listener.enterStartDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStartDatabase'):
                listener.exitStartDatabase(self)

    def startDatabase(self):
        localctx = Cypher25Parser.StartDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 606, self.RULE_startDatabase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3628
            self.match(Cypher25Parser.START)
            self.state = 3629
            self.match(Cypher25Parser.DATABASE)
            self.state = 3630
            self.symbolicAliasNameOrParameter()
            self.state = 3632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 191 or _la == 311:
                self.state = 3631
                self.waitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StopDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(Cypher25Parser.STOP, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def waitClause(self):
            return self.getTypedRuleContext(
                Cypher25Parser.WaitClauseContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_stopDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStopDatabase'):
                listener.enterStopDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStopDatabase'):
                listener.exitStopDatabase(self)

    def stopDatabase(self):
        localctx = Cypher25Parser.StopDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 608, self.RULE_stopDatabase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3634
            self.match(Cypher25Parser.STOP)
            self.state = 3635
            self.match(Cypher25Parser.DATABASE)
            self.state = 3636
            self.symbolicAliasNameOrParameter()
            self.state = 3638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 191 or _la == 311:
                self.state = 3637
                self.waitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WaitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(Cypher25Parser.WAIT, 0)

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def secondsToken(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SecondsTokenContext, 0
            )

        def NOWAIT(self):
            return self.getToken(Cypher25Parser.NOWAIT, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_waitClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterWaitClause'):
                listener.enterWaitClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitWaitClause'):
                listener.exitWaitClause(self)

    def waitClause(self):
        localctx = Cypher25Parser.WaitClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 610, self.RULE_waitClause)
        self._la = 0  # Token type
        try:
            self.state = 3648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [311]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3640
                self.match(Cypher25Parser.WAIT)
                self.state = 3645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 5:
                    self.state = 3641
                    self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
                    self.state = 3643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la - 252) & ~0x3F) == 0 and (
                        (1 << (_la - 252)) & 19
                    ) != 0:
                        self.state = 3642
                        self.secondsToken()

                pass
            elif token in [191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3647
                self.match(Cypher25Parser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecondsTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEC(self):
            return self.getToken(Cypher25Parser.SEC, 0)

        def SECOND(self):
            return self.getToken(Cypher25Parser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(Cypher25Parser.SECONDS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_secondsToken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSecondsToken'):
                listener.enterSecondsToken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSecondsToken'):
                listener.exitSecondsToken(self)

    def secondsToken(self):
        localctx = Cypher25Parser.SecondsTokenContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 612, self.RULE_secondsToken)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3650
            _la = self._input.LA(1)
            if not (
                ((_la - 252) & ~0x3F) == 0 and ((1 << (_la - 252)) & 19) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def DEFAULT(self):
            return self.getToken(Cypher25Parser.DEFAULT, 0)

        def HOME(self):
            return self.getToken(Cypher25Parser.HOME, 0)

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def DATABASES(self):
            return self.getToken(Cypher25Parser.DATABASES, 0)

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showDatabase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowDatabase'):
                listener.enterShowDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowDatabase'):
                listener.exitShowDatabase(self)

    def showDatabase(self):
        localctx = Cypher25Parser.ShowDatabaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 614, self.RULE_showDatabase)
        self._la = 0  # Token type
        try:
            self.state = 3664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3652
                _la = self._input.LA(1)
                if not (_la == 68 or _la == 126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3653
                self.match(Cypher25Parser.DATABASE)
                self.state = 3655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313 or _la == 318:
                    self.state = 3654
                    self.showCommandYield()

                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3657
                _la = self._input.LA(1)
                if not (_la == 62 or _la == 63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 466, self._ctx)
                if la_ == 1:
                    self.state = 3658
                    self.symbolicAliasNameOrParameter()

                self.state = 3662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 313 or _la == 318:
                    self.state = 3661
                    self.showCommandYield()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_aliasName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAliasName'):
                listener.enterAliasName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAliasName'):
                listener.exitAliasName(self)

    def aliasName(self):
        localctx = Cypher25Parser.AliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_aliasName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3666
            self.symbolicAliasNameOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasTargetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicAliasNameOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_aliasTargetName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAliasTargetName'):
                listener.enterAliasTargetName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAliasTargetName'):
                listener.exitAliasTargetName(self)

    def aliasTargetName(self):
        localctx = Cypher25Parser.AliasTargetNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 618, self.RULE_aliasTargetName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3668
            self.symbolicAliasNameOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatabaseNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameOrStringParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameOrStringParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_databaseName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDatabaseName'):
                listener.enterDatabaseName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDatabaseName'):
                listener.exitDatabaseName(self)

    def databaseName(self):
        localctx = Cypher25Parser.DatabaseNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 620, self.RULE_databaseName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3670
            self.symbolicNameOrStringParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def aliasName(self):
            return self.getTypedRuleContext(Cypher25Parser.AliasNameContext, 0)

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def aliasTargetName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AliasTargetNameContext, 0
            )

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def AT(self):
            return self.getToken(Cypher25Parser.AT, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringOrParameterContext, 0
            )

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def commandNameExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNameExpressionContext, 0
            )

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def passwordExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordExpressionContext, 0
            )

        def PROPERTIES(self):
            return self.getToken(Cypher25Parser.PROPERTIES, 0)

        def mapOrParameter(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.MapOrParameterContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.MapOrParameterContext, i
                )

        def DRIVER(self):
            return self.getToken(Cypher25Parser.DRIVER, 0)

        def defaultLanguageSpecification(self):
            return self.getTypedRuleContext(
                Cypher25Parser.DefaultLanguageSpecificationContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_createAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCreateAlias'):
                listener.enterCreateAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCreateAlias'):
                listener.exitCreateAlias(self)

    def createAlias(self):
        localctx = Cypher25Parser.CreateAliasContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 622, self.RULE_createAlias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3672
            self.match(Cypher25Parser.ALIAS)
            self.state = 3673
            self.aliasName()
            self.state = 3677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 3674
                self.match(Cypher25Parser.IF)
                self.state = 3675
                self.match(Cypher25Parser.NOT)
                self.state = 3676
                self.match(Cypher25Parser.EXISTS)

            self.state = 3679
            self.match(Cypher25Parser.FOR)
            self.state = 3680
            self.match(Cypher25Parser.DATABASE)
            self.state = 3681
            self.aliasTargetName()
            self.state = 3695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 27:
                self.state = 3682
                self.match(Cypher25Parser.AT)
                self.state = 3683
                self.stringOrParameter()
                self.state = 3684
                self.match(Cypher25Parser.USER)
                self.state = 3685
                self.commandNameExpression()
                self.state = 3686
                self.match(Cypher25Parser.PASSWORD)
                self.state = 3687
                self.passwordExpression()
                self.state = 3690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 83:
                    self.state = 3688
                    self.match(Cypher25Parser.DRIVER)
                    self.state = 3689
                    self.mapOrParameter()

                self.state = 3693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 68:
                    self.state = 3692
                    self.defaultLanguageSpecification()

            self.state = 3699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 218:
                self.state = 3697
                self.match(Cypher25Parser.PROPERTIES)
                self.state = 3698
                self.mapOrParameter()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def aliasName(self):
            return self.getTypedRuleContext(Cypher25Parser.AliasNameContext, 0)

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_dropAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterDropAlias'):
                listener.enterDropAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitDropAlias'):
                listener.exitDropAlias(self)

    def dropAlias(self):
        localctx = Cypher25Parser.DropAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_dropAlias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3701
            self.match(Cypher25Parser.ALIAS)
            self.state = 3702
            self.aliasName()
            self.state = 3705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 3703
                self.match(Cypher25Parser.IF)
                self.state = 3704
                self.match(Cypher25Parser.EXISTS)

            self.state = 3707
            self.match(Cypher25Parser.FOR)
            self.state = 3708
            self.match(Cypher25Parser.DATABASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def aliasName(self):
            return self.getTypedRuleContext(Cypher25Parser.AliasNameContext, 0)

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def alterAliasTarget(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterAliasTargetContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterAliasTargetContext, i
                )

        def alterAliasUser(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterAliasUserContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterAliasUserContext, i
                )

        def alterAliasPassword(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterAliasPasswordContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterAliasPasswordContext, i
                )

        def alterAliasDriver(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterAliasDriverContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterAliasDriverContext, i
                )

        def alterAliasProperties(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.AlterAliasPropertiesContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.AlterAliasPropertiesContext, i
                )

        def defaultLanguageSpecification(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.DefaultLanguageSpecificationContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.DefaultLanguageSpecificationContext, i
                )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterAlias'):
                listener.enterAlterAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterAlias'):
                listener.exitAlterAlias(self)

    def alterAlias(self):
        localctx = Cypher25Parser.AlterAliasContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 626, self.RULE_alterAlias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3710
            self.match(Cypher25Parser.ALIAS)
            self.state = 3711
            self.aliasName()
            self.state = 3714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 3712
                self.match(Cypher25Parser.IF)
                self.state = 3713
                self.match(Cypher25Parser.EXISTS)

            self.state = 3716
            self.match(Cypher25Parser.SET)
            self.state = 3717
            self.match(Cypher25Parser.DATABASE)
            self.state = 3724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3724
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [279]:
                    self.state = 3718
                    self.alterAliasTarget()
                    pass
                elif token in [304]:
                    self.state = 3719
                    self.alterAliasUser()
                    pass
                elif token in [202]:
                    self.state = 3720
                    self.alterAliasPassword()
                    pass
                elif token in [83]:
                    self.state = 3721
                    self.alterAliasDriver()
                    pass
                elif token in [218]:
                    self.state = 3722
                    self.alterAliasProperties()
                    pass
                elif token in [68]:
                    self.state = 3723
                    self.defaultLanguageSpecification()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    _la == 68
                    or _la == 83
                    or _la == 202
                    or _la == 218
                    or _la == 279
                    or _la == 304
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterAliasTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET(self):
            return self.getToken(Cypher25Parser.TARGET, 0)

        def aliasTargetName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.AliasTargetNameContext, 0
            )

        def AT(self):
            return self.getToken(Cypher25Parser.AT, 0)

        def stringOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterAliasTarget

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterAliasTarget'):
                listener.enterAlterAliasTarget(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterAliasTarget'):
                listener.exitAlterAliasTarget(self)

    def alterAliasTarget(self):
        localctx = Cypher25Parser.AlterAliasTargetContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 628, self.RULE_alterAliasTarget)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3728
            self.match(Cypher25Parser.TARGET)
            self.state = 3729
            self.aliasTargetName()
            self.state = 3732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 27:
                self.state = 3730
                self.match(Cypher25Parser.AT)
                self.state = 3731
                self.stringOrParameter()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterAliasUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def commandNameExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.CommandNameExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterAliasUser

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterAliasUser'):
                listener.enterAlterAliasUser(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterAliasUser'):
                listener.exitAlterAliasUser(self)

    def alterAliasUser(self):
        localctx = Cypher25Parser.AlterAliasUserContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 630, self.RULE_alterAliasUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3734
            self.match(Cypher25Parser.USER)
            self.state = 3735
            self.commandNameExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterAliasPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def passwordExpression(self):
            return self.getTypedRuleContext(
                Cypher25Parser.PasswordExpressionContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterAliasPassword

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterAliasPassword'):
                listener.enterAlterAliasPassword(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterAliasPassword'):
                listener.exitAlterAliasPassword(self)

    def alterAliasPassword(self):
        localctx = Cypher25Parser.AlterAliasPasswordContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 632, self.RULE_alterAliasPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3737
            self.match(Cypher25Parser.PASSWORD)
            self.state = 3738
            self.passwordExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterAliasDriverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DRIVER(self):
            return self.getToken(Cypher25Parser.DRIVER, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.MapOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterAliasDriver

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterAliasDriver'):
                listener.enterAlterAliasDriver(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterAliasDriver'):
                listener.exitAlterAliasDriver(self)

    def alterAliasDriver(self):
        localctx = Cypher25Parser.AlterAliasDriverContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 634, self.RULE_alterAliasDriver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3740
            self.match(Cypher25Parser.DRIVER)
            self.state = 3741
            self.mapOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterAliasPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTIES(self):
            return self.getToken(Cypher25Parser.PROPERTIES, 0)

        def mapOrParameter(self):
            return self.getTypedRuleContext(
                Cypher25Parser.MapOrParameterContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_alterAliasProperties

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterAlterAliasProperties'):
                listener.enterAlterAliasProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitAlterAliasProperties'):
                listener.exitAlterAliasProperties(self)

    def alterAliasProperties(self):
        localctx = Cypher25Parser.AlterAliasPropertiesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 636, self.RULE_alterAliasProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3743
            self.match(Cypher25Parser.PROPERTIES)
            self.state = 3744
            self.mapOrParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def ALIASES(self):
            return self.getToken(Cypher25Parser.ALIASES, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(Cypher25Parser.DATABASES, 0)

        def aliasName(self):
            return self.getTypedRuleContext(Cypher25Parser.AliasNameContext, 0)

        def showCommandYield(self):
            return self.getTypedRuleContext(
                Cypher25Parser.ShowCommandYieldContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_showAliases

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterShowAliases'):
                listener.enterShowAliases(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitShowAliases'):
                listener.exitShowAliases(self)

    def showAliases(self):
        localctx = Cypher25Parser.ShowAliasesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 638, self.RULE_showAliases)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3746
            _la = self._input.LA(1)
            if not (_la == 15 or _la == 16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 479, self._ctx)
            if la_ == 1:
                self.state = 3747
                self.aliasName()

            self.state = 3750
            self.match(Cypher25Parser.FOR)
            self.state = 3751
            _la = self._input.LA(1)
            if not (_la == 62 or _la == 63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 313 or _la == 318:
                self.state = 3752
                self.showCommandYield()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicNameOrStringParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_symbolicNameOrStringParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSymbolicNameOrStringParameter'):
                listener.enterSymbolicNameOrStringParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSymbolicNameOrStringParameter'):
                listener.exitSymbolicNameOrStringParameter(self)

    def symbolicNameOrStringParameter(self):
        localctx = Cypher25Parser.SymbolicNameOrStringParameterContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 640, self.RULE_symbolicNameOrStringParameter)
        try:
            self.state = 3757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3755
                self.symbolicNameString()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3756
                self.parameter('STRING')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommandNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicNameStringContext, 0
            )

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_commandNameExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterCommandNameExpression'):
                listener.enterCommandNameExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitCommandNameExpression'):
                listener.exitCommandNameExpression(self)

    def commandNameExpression(self):
        localctx = Cypher25Parser.CommandNameExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 642, self.RULE_commandNameExpression)
        try:
            self.state = 3761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3759
                self.symbolicNameString()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3760
                self.parameter('STRING')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicNameOrStringParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commandNameExpression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.CommandNameExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.CommandNameExpressionContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_symbolicNameOrStringParameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSymbolicNameOrStringParameterList'):
                listener.enterSymbolicNameOrStringParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSymbolicNameOrStringParameterList'):
                listener.exitSymbolicNameOrStringParameterList(self)

    def symbolicNameOrStringParameterList(self):
        localctx = Cypher25Parser.SymbolicNameOrStringParameterListContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 644, self.RULE_symbolicNameOrStringParameterList
        )
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3763
            self.commandNameExpression()
            self.state = 3768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 3764
                self.match(Cypher25Parser.COMMA)
                self.state = 3765
                self.commandNameExpression()
                self.state = 3770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicAliasNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicAliasNameOrParameter(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicAliasNameOrParameterContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicAliasNameOrParameterContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_symbolicAliasNameList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSymbolicAliasNameList'):
                listener.enterSymbolicAliasNameList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSymbolicAliasNameList'):
                listener.exitSymbolicAliasNameList(self)

    def symbolicAliasNameList(self):
        localctx = Cypher25Parser.SymbolicAliasNameListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 646, self.RULE_symbolicAliasNameList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3771
            self.symbolicAliasNameOrParameter()
            self.state = 3776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 46:
                self.state = 3772
                self.match(Cypher25Parser.COMMA)
                self.state = 3773
                self.symbolicAliasNameOrParameter()
                self.state = 3778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicAliasNameOrParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicAliasName(self):
            return self.getTypedRuleContext(
                Cypher25Parser.SymbolicAliasNameContext, 0
            )

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_symbolicAliasNameOrParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSymbolicAliasNameOrParameter'):
                listener.enterSymbolicAliasNameOrParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSymbolicAliasNameOrParameter'):
                listener.exitSymbolicAliasNameOrParameter(self)

    def symbolicAliasNameOrParameter(self):
        localctx = Cypher25Parser.SymbolicAliasNameOrParameterContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 648, self.RULE_symbolicAliasNameOrParameter)
        try:
            self.state = 3781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3779
                self.symbolicAliasName()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3780
                self.parameter('STRING')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicAliasNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicNameString(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.SymbolicNameStringContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.SymbolicNameStringContext, i
                )

        def DOT(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.DOT)
            else:
                return self.getToken(Cypher25Parser.DOT, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_symbolicAliasName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSymbolicAliasName'):
                listener.enterSymbolicAliasName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSymbolicAliasName'):
                listener.exitSymbolicAliasName(self)

    def symbolicAliasName(self):
        localctx = Cypher25Parser.SymbolicAliasNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 650, self.RULE_symbolicAliasName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3783
            self.symbolicNameString()
            self.state = 3788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 80:
                self.state = 3784
                self.match(Cypher25Parser.DOT)
                self.state = 3785
                self.symbolicNameString()
                self.state = 3790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(Cypher25Parser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(Cypher25Parser.RBRACKET, 0)

        def stringLiteral(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.StringLiteralContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.StringLiteralContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_stringListLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringListLiteral'):
                listener.enterStringListLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringListLiteral'):
                listener.exitStringListLiteral(self)

    def stringListLiteral(self):
        localctx = Cypher25Parser.StringListLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 652, self.RULE_stringListLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self.match(Cypher25Parser.LBRACKET)
            self.state = 3800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 8 or _la == 9:
                self.state = 3792
                self.stringLiteral()
                self.state = 3797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 46:
                    self.state = 3793
                    self.match(Cypher25Parser.COMMA)
                    self.state = 3794
                    self.stringLiteral()
                    self.state = 3799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 3802
            self.match(Cypher25Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.StringLiteralContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.StringLiteralContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_stringList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringList'):
                listener.enterStringList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringList'):
                listener.exitStringList(self)

    def stringList(self):
        localctx = Cypher25Parser.StringListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 654, self.RULE_stringList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3804
            self.stringLiteral()
            self.state = 3807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3805
                self.match(Cypher25Parser.COMMA)
                self.state = 3806
                self.stringLiteral()
                self.state = 3809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 46):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL1(self):
            return self.getToken(Cypher25Parser.STRING_LITERAL1, 0)

        def STRING_LITERAL2(self):
            return self.getToken(Cypher25Parser.STRING_LITERAL2, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_stringLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringLiteral'):
                listener.enterStringLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringLiteral'):
                listener.exitStringLiteral(self)

    def stringLiteral(self):
        localctx = Cypher25Parser.StringLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 656, self.RULE_stringLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3811
            _la = self._input.LA(1)
            if not (_la == 8 or _la == 9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringOrParameterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringLiteralContext, 0
            )

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_stringOrParameterExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringOrParameterExpression'):
                listener.enterStringOrParameterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringOrParameterExpression'):
                listener.exitStringOrParameterExpression(self)

    def stringOrParameterExpression(self):
        localctx = Cypher25Parser.StringOrParameterExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 658, self.RULE_stringOrParameterExpression)
        try:
            self.state = 3815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3813
                self.stringLiteral()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3814
                self.parameter('STRING')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringOrParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(
                Cypher25Parser.StringLiteralContext, 0
            )

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_stringOrParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterStringOrParameter'):
                listener.enterStringOrParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitStringOrParameter'):
                listener.exitStringOrParameter(self)

    def stringOrParameter(self):
        localctx = Cypher25Parser.StringOrParameterContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 660, self.RULE_stringOrParameter)
        try:
            self.state = 3819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3817
                self.stringLiteral()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3818
                self.parameter('STRING')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UIntOrIntParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER, 0)

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_uIntOrIntParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUIntOrIntParameter'):
                listener.enterUIntOrIntParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUIntOrIntParameter'):
                listener.exitUIntOrIntParameter(self)

    def uIntOrIntParameter(self):
        localctx = Cypher25Parser.UIntOrIntParameterContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 662, self.RULE_uIntOrIntParameter)
        try:
            self.state = 3823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3821
                self.match(Cypher25Parser.UNSIGNED_DECIMAL_INTEGER)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3822
                self.parameter('INTEGER')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapOrParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_(self):
            return self.getTypedRuleContext(Cypher25Parser.MapContext, 0)

        def parameter(self):
            return self.getTypedRuleContext(Cypher25Parser.ParameterContext, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_mapOrParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMapOrParameter'):
                listener.enterMapOrParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMapOrParameter'):
                listener.exitMapOrParameter(self)

    def mapOrParameter(self):
        localctx = Cypher25Parser.MapOrParameterContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 664, self.RULE_mapOrParameter)
        try:
            self.state = 3827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3825
                self.map_()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3826
                self.parameter('MAP')
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Cypher25Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Cypher25Parser.RCURLY, 0)

        def propertyKeyName(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.PropertyKeyNameContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.PropertyKeyNameContext, i
                )

        def COLON(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COLON)
            else:
                return self.getToken(Cypher25Parser.COLON, i)

        def expression(self, i: int | None = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Cypher25Parser.ExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Cypher25Parser.ExpressionContext, i
                )

        def COMMA(self, i: int | None = None):
            if i is None:
                return self.getTokens(Cypher25Parser.COMMA)
            else:
                return self.getToken(Cypher25Parser.COMMA, i)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_map

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterMap'):
                listener.enterMap(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitMap'):
                listener.exitMap(self)

    def map_(self):
        localctx = Cypher25Parser.MapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_map)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3829
            self.match(Cypher25Parser.LCURLY)
            self.state = 3843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la - 10) & ~0x3F) == 0
                    and ((1 << (_la - 10)) & -120259608577) != 0
                )
                or (
                    ((_la - 74) & ~0x3F) == 0
                    and ((1 << (_la - 74)) & -1143492101276137) != 0
                )
                or (
                    ((_la - 138) & ~0x3F) == 0
                    and ((1 << (_la - 138)) & -129252638721) != 0
                )
                or (
                    ((_la - 202) & ~0x3F) == 0
                    and ((1 << (_la - 202)) & -72339069296706145) != 0
                )
                or (
                    ((_la - 266) & ~0x3F) == 0
                    and ((1 << (_la - 266)) & 72057594037665791) != 0
                )
            ):
                self.state = 3830
                self.propertyKeyName()
                self.state = 3831
                self.match(Cypher25Parser.COLON)
                self.state = 3832
                self.expression()
                self.state = 3840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 46:
                    self.state = 3833
                    self.match(Cypher25Parser.COMMA)
                    self.state = 3834
                    self.propertyKeyName()
                    self.state = 3835
                    self.match(Cypher25Parser.COLON)
                    self.state = 3836
                    self.expression()
                    self.state = 3842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 3845
            self.match(Cypher25Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicVariableNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escapedSymbolicVariableNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EscapedSymbolicVariableNameStringContext, 0
            )

        def unescapedSymbolicVariableNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UnescapedSymbolicVariableNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_symbolicVariableNameString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSymbolicVariableNameString'):
                listener.enterSymbolicVariableNameString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSymbolicVariableNameString'):
                listener.exitSymbolicVariableNameString(self)

    def symbolicVariableNameString(self):
        localctx = Cypher25Parser.SymbolicVariableNameStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 668, self.RULE_symbolicVariableNameString)
        try:
            self.state = 3849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3847
                self.escapedSymbolicVariableNameString()
                pass
            elif token in [
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3848
                self.unescapedSymbolicVariableNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EscapedSymbolicVariableNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EscapedSymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_escapedSymbolicVariableNameString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterEscapedSymbolicVariableNameString'):
                listener.enterEscapedSymbolicVariableNameString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitEscapedSymbolicVariableNameString'):
                listener.exitEscapedSymbolicVariableNameString(self)

    def escapedSymbolicVariableNameString(self):
        localctx = Cypher25Parser.EscapedSymbolicVariableNameStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 670, self.RULE_escapedSymbolicVariableNameString
        )
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3851
            self.escapedSymbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnescapedSymbolicVariableNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unescapedSymbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UnescapedSymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_unescapedSymbolicVariableNameString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUnescapedSymbolicVariableNameString'):
                listener.enterUnescapedSymbolicVariableNameString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUnescapedSymbolicVariableNameString'):
                listener.exitUnescapedSymbolicVariableNameString(self)

    def unescapedSymbolicVariableNameString(self):
        localctx = Cypher25Parser.UnescapedSymbolicVariableNameStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 672, self.RULE_unescapedSymbolicVariableNameString
        )
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3853
            self.unescapedSymbolicNameString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escapedSymbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.EscapedSymbolicNameStringContext, 0
            )

        def unescapedSymbolicNameString(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UnescapedSymbolicNameStringContext, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_symbolicNameString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterSymbolicNameString'):
                listener.enterSymbolicNameString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitSymbolicNameString'):
                listener.exitSymbolicNameString(self)

    def symbolicNameString(self):
        localctx = Cypher25Parser.SymbolicNameStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 674, self.RULE_symbolicNameString)
        try:
            self.state = 3857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3855
                self.escapedSymbolicNameString()
                pass
            elif token in [
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                154,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                209,
                210,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                223,
                226,
                227,
                228,
                229,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3856
                self.unescapedSymbolicNameString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EscapedSymbolicNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPED_SYMBOLIC_NAME(self):
            return self.getToken(Cypher25Parser.ESCAPED_SYMBOLIC_NAME, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_escapedSymbolicNameString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterEscapedSymbolicNameString'):
                listener.enterEscapedSymbolicNameString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitEscapedSymbolicNameString'):
                listener.exitEscapedSymbolicNameString(self)

    def escapedSymbolicNameString(self):
        localctx = Cypher25Parser.EscapedSymbolicNameStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 676, self.RULE_escapedSymbolicNameString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3859
            self.match(Cypher25Parser.ESCAPED_SYMBOLIC_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnescapedSymbolicNameStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unescapedSymbolicNameString_(self):
            return self.getTypedRuleContext(
                Cypher25Parser.UnescapedSymbolicNameString_Context, 0
            )

        def getRuleIndex(self):
            return Cypher25Parser.RULE_unescapedSymbolicNameString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUnescapedSymbolicNameString'):
                listener.enterUnescapedSymbolicNameString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUnescapedSymbolicNameString'):
                listener.exitUnescapedSymbolicNameString(self)

    def unescapedSymbolicNameString(self):
        localctx = Cypher25Parser.UnescapedSymbolicNameStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 678, self.RULE_unescapedSymbolicNameString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3861
            self.unescapedSymbolicNameString_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnescapedSymbolicNameString_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Cypher25Parser.IDENTIFIER, 0)

        def ACCESS(self):
            return self.getToken(Cypher25Parser.ACCESS, 0)

        def ACTIVE(self):
            return self.getToken(Cypher25Parser.ACTIVE, 0)

        def ADMIN(self):
            return self.getToken(Cypher25Parser.ADMIN, 0)

        def ADMINISTRATOR(self):
            return self.getToken(Cypher25Parser.ADMINISTRATOR, 0)

        def ALIAS(self):
            return self.getToken(Cypher25Parser.ALIAS, 0)

        def ALIASES(self):
            return self.getToken(Cypher25Parser.ALIASES, 0)

        def ALL_SHORTEST_PATHS(self):
            return self.getToken(Cypher25Parser.ALL_SHORTEST_PATHS, 0)

        def ALL(self):
            return self.getToken(Cypher25Parser.ALL, 0)

        def ALTER(self):
            return self.getToken(Cypher25Parser.ALTER, 0)

        def AND(self):
            return self.getToken(Cypher25Parser.AND, 0)

        def ANY(self):
            return self.getToken(Cypher25Parser.ANY, 0)

        def ARRAY(self):
            return self.getToken(Cypher25Parser.ARRAY, 0)

        def AS(self):
            return self.getToken(Cypher25Parser.AS, 0)

        def ASC(self):
            return self.getToken(Cypher25Parser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(Cypher25Parser.ASCENDING, 0)

        def ASSIGN(self):
            return self.getToken(Cypher25Parser.ASSIGN, 0)

        def AT(self):
            return self.getToken(Cypher25Parser.AT, 0)

        def AUTH(self):
            return self.getToken(Cypher25Parser.AUTH, 0)

        def BINDINGS(self):
            return self.getToken(Cypher25Parser.BINDINGS, 0)

        def BOOL(self):
            return self.getToken(Cypher25Parser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(Cypher25Parser.BOOLEAN, 0)

        def BOOSTED(self):
            return self.getToken(Cypher25Parser.BOOSTED, 0)

        def BOTH(self):
            return self.getToken(Cypher25Parser.BOTH, 0)

        def BREAK(self):
            return self.getToken(Cypher25Parser.BREAK, 0)

        def BUILT(self):
            return self.getToken(Cypher25Parser.BUILT, 0)

        def BY(self):
            return self.getToken(Cypher25Parser.BY, 0)

        def CALL(self):
            return self.getToken(Cypher25Parser.CALL, 0)

        def CASCADE(self):
            return self.getToken(Cypher25Parser.CASCADE, 0)

        def CASE(self):
            return self.getToken(Cypher25Parser.CASE, 0)

        def CHANGE(self):
            return self.getToken(Cypher25Parser.CHANGE, 0)

        def CIDR(self):
            return self.getToken(Cypher25Parser.CIDR, 0)

        def COLLECT(self):
            return self.getToken(Cypher25Parser.COLLECT, 0)

        def COMMAND(self):
            return self.getToken(Cypher25Parser.COMMAND, 0)

        def COMMANDS(self):
            return self.getToken(Cypher25Parser.COMMANDS, 0)

        def COMPOSITE(self):
            return self.getToken(Cypher25Parser.COMPOSITE, 0)

        def CONCURRENT(self):
            return self.getToken(Cypher25Parser.CONCURRENT, 0)

        def CONSTRAINT(self):
            return self.getToken(Cypher25Parser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(Cypher25Parser.CONSTRAINTS, 0)

        def CONTAINS(self):
            return self.getToken(Cypher25Parser.CONTAINS, 0)

        def CONTINUE(self):
            return self.getToken(Cypher25Parser.CONTINUE, 0)

        def COPY(self):
            return self.getToken(Cypher25Parser.COPY, 0)

        def COUNT(self):
            return self.getToken(Cypher25Parser.COUNT, 0)

        def CREATE(self):
            return self.getToken(Cypher25Parser.CREATE, 0)

        def CSV(self):
            return self.getToken(Cypher25Parser.CSV, 0)

        def CURRENT(self):
            return self.getToken(Cypher25Parser.CURRENT, 0)

        def CYPHER(self):
            return self.getToken(Cypher25Parser.CYPHER, 0)

        def DATA(self):
            return self.getToken(Cypher25Parser.DATA, 0)

        def DATABASE(self):
            return self.getToken(Cypher25Parser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(Cypher25Parser.DATABASES, 0)

        def DATE(self):
            return self.getToken(Cypher25Parser.DATE, 0)

        def DATETIME(self):
            return self.getToken(Cypher25Parser.DATETIME, 0)

        def DBMS(self):
            return self.getToken(Cypher25Parser.DBMS, 0)

        def DEALLOCATE(self):
            return self.getToken(Cypher25Parser.DEALLOCATE, 0)

        def DEFAULT(self):
            return self.getToken(Cypher25Parser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(Cypher25Parser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(Cypher25Parser.DELETE, 0)

        def DENY(self):
            return self.getToken(Cypher25Parser.DENY, 0)

        def DESC(self):
            return self.getToken(Cypher25Parser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(Cypher25Parser.DESCENDING, 0)

        def DESTROY(self):
            return self.getToken(Cypher25Parser.DESTROY, 0)

        def DETACH(self):
            return self.getToken(Cypher25Parser.DETACH, 0)

        def DIFFERENT(self):
            return self.getToken(Cypher25Parser.DIFFERENT, 0)

        def DISTINCT(self):
            return self.getToken(Cypher25Parser.DISTINCT, 0)

        def DRIVER(self):
            return self.getToken(Cypher25Parser.DRIVER, 0)

        def DROP(self):
            return self.getToken(Cypher25Parser.DROP, 0)

        def DRYRUN(self):
            return self.getToken(Cypher25Parser.DRYRUN, 0)

        def DUMP(self):
            return self.getToken(Cypher25Parser.DUMP, 0)

        def DURATION(self):
            return self.getToken(Cypher25Parser.DURATION, 0)

        def EACH(self):
            return self.getToken(Cypher25Parser.EACH, 0)

        def EDGE(self):
            return self.getToken(Cypher25Parser.EDGE, 0)

        def ELEMENT(self):
            return self.getToken(Cypher25Parser.ELEMENT, 0)

        def ELEMENTS(self):
            return self.getToken(Cypher25Parser.ELEMENTS, 0)

        def ELSE(self):
            return self.getToken(Cypher25Parser.ELSE, 0)

        def ENABLE(self):
            return self.getToken(Cypher25Parser.ENABLE, 0)

        def ENCRYPTED(self):
            return self.getToken(Cypher25Parser.ENCRYPTED, 0)

        def END(self):
            return self.getToken(Cypher25Parser.END, 0)

        def ENDS(self):
            return self.getToken(Cypher25Parser.ENDS, 0)

        def ERROR(self):
            return self.getToken(Cypher25Parser.ERROR, 0)

        def EXECUTABLE(self):
            return self.getToken(Cypher25Parser.EXECUTABLE, 0)

        def EXECUTE(self):
            return self.getToken(Cypher25Parser.EXECUTE, 0)

        def EXIST(self):
            return self.getToken(Cypher25Parser.EXIST, 0)

        def EXISTENCE(self):
            return self.getToken(Cypher25Parser.EXISTENCE, 0)

        def EXISTS(self):
            return self.getToken(Cypher25Parser.EXISTS, 0)

        def FAIL(self):
            return self.getToken(Cypher25Parser.FAIL, 0)

        def FALSE(self):
            return self.getToken(Cypher25Parser.FALSE, 0)

        def FIELDTERMINATOR(self):
            return self.getToken(Cypher25Parser.FIELDTERMINATOR, 0)

        def FILTER(self):
            return self.getToken(Cypher25Parser.FILTER, 0)

        def FINISH(self):
            return self.getToken(Cypher25Parser.FINISH, 0)

        def FLOAT(self):
            return self.getToken(Cypher25Parser.FLOAT, 0)

        def FLOAT64(self):
            return self.getToken(Cypher25Parser.FLOAT64, 0)

        def FLOAT32(self):
            return self.getToken(Cypher25Parser.FLOAT32, 0)

        def FOREACH(self):
            return self.getToken(Cypher25Parser.FOREACH, 0)

        def FOR(self):
            return self.getToken(Cypher25Parser.FOR, 0)

        def FROM(self):
            return self.getToken(Cypher25Parser.FROM, 0)

        def FULLTEXT(self):
            return self.getToken(Cypher25Parser.FULLTEXT, 0)

        def FUNCTION(self):
            return self.getToken(Cypher25Parser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(Cypher25Parser.FUNCTIONS, 0)

        def GRANT(self):
            return self.getToken(Cypher25Parser.GRANT, 0)

        def GRAPH(self):
            return self.getToken(Cypher25Parser.GRAPH, 0)

        def GRAPHS(self):
            return self.getToken(Cypher25Parser.GRAPHS, 0)

        def GROUP(self):
            return self.getToken(Cypher25Parser.GROUP, 0)

        def GROUPS(self):
            return self.getToken(Cypher25Parser.GROUPS, 0)

        def HEADERS(self):
            return self.getToken(Cypher25Parser.HEADERS, 0)

        def HOME(self):
            return self.getToken(Cypher25Parser.HOME, 0)

        def ID(self):
            return self.getToken(Cypher25Parser.ID, 0)

        def IF(self):
            return self.getToken(Cypher25Parser.IF, 0)

        def IMMUTABLE(self):
            return self.getToken(Cypher25Parser.IMMUTABLE, 0)

        def IMPERSONATE(self):
            return self.getToken(Cypher25Parser.IMPERSONATE, 0)

        def IN(self):
            return self.getToken(Cypher25Parser.IN, 0)

        def INDEX(self):
            return self.getToken(Cypher25Parser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(Cypher25Parser.INDEXES, 0)

        def INF(self):
            return self.getToken(Cypher25Parser.INF, 0)

        def INFINITY(self):
            return self.getToken(Cypher25Parser.INFINITY, 0)

        def INSERT(self):
            return self.getToken(Cypher25Parser.INSERT, 0)

        def INT(self):
            return self.getToken(Cypher25Parser.INT, 0)

        def INT64(self):
            return self.getToken(Cypher25Parser.INT64, 0)

        def INT32(self):
            return self.getToken(Cypher25Parser.INT32, 0)

        def INT16(self):
            return self.getToken(Cypher25Parser.INT16, 0)

        def INT8(self):
            return self.getToken(Cypher25Parser.INT8, 0)

        def INTEGER(self):
            return self.getToken(Cypher25Parser.INTEGER, 0)

        def INTEGER64(self):
            return self.getToken(Cypher25Parser.INTEGER64, 0)

        def INTEGER32(self):
            return self.getToken(Cypher25Parser.INTEGER32, 0)

        def INTEGER16(self):
            return self.getToken(Cypher25Parser.INTEGER16, 0)

        def INTEGER8(self):
            return self.getToken(Cypher25Parser.INTEGER8, 0)

        def IS(self):
            return self.getToken(Cypher25Parser.IS, 0)

        def JOIN(self):
            return self.getToken(Cypher25Parser.JOIN, 0)

        def KEY(self):
            return self.getToken(Cypher25Parser.KEY, 0)

        def LABEL(self):
            return self.getToken(Cypher25Parser.LABEL, 0)

        def LABELS(self):
            return self.getToken(Cypher25Parser.LABELS, 0)

        def LANGUAGE(self):
            return self.getToken(Cypher25Parser.LANGUAGE, 0)

        def LEADING(self):
            return self.getToken(Cypher25Parser.LEADING, 0)

        def LET(self):
            return self.getToken(Cypher25Parser.LET, 0)

        def LIMITROWS(self):
            return self.getToken(Cypher25Parser.LIMITROWS, 0)

        def LIST(self):
            return self.getToken(Cypher25Parser.LIST, 0)

        def LOAD(self):
            return self.getToken(Cypher25Parser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(Cypher25Parser.LOCAL, 0)

        def LOOKUP(self):
            return self.getToken(Cypher25Parser.LOOKUP, 0)

        def MATCH(self):
            return self.getToken(Cypher25Parser.MATCH, 0)

        def MANAGEMENT(self):
            return self.getToken(Cypher25Parser.MANAGEMENT, 0)

        def MAP(self):
            return self.getToken(Cypher25Parser.MAP, 0)

        def MERGE(self):
            return self.getToken(Cypher25Parser.MERGE, 0)

        def NAME(self):
            return self.getToken(Cypher25Parser.NAME, 0)

        def NAMES(self):
            return self.getToken(Cypher25Parser.NAMES, 0)

        def NAN(self):
            return self.getToken(Cypher25Parser.NAN, 0)

        def NEW(self):
            return self.getToken(Cypher25Parser.NEW, 0)

        def NFC(self):
            return self.getToken(Cypher25Parser.NFC, 0)

        def NFD(self):
            return self.getToken(Cypher25Parser.NFD, 0)

        def NFKC(self):
            return self.getToken(Cypher25Parser.NFKC, 0)

        def NFKD(self):
            return self.getToken(Cypher25Parser.NFKD, 0)

        def NODE(self):
            return self.getToken(Cypher25Parser.NODE, 0)

        def NODETACH(self):
            return self.getToken(Cypher25Parser.NODETACH, 0)

        def NODES(self):
            return self.getToken(Cypher25Parser.NODES, 0)

        def NONE(self):
            return self.getToken(Cypher25Parser.NONE, 0)

        def NORMALIZE(self):
            return self.getToken(Cypher25Parser.NORMALIZE, 0)

        def NORMALIZED(self):
            return self.getToken(Cypher25Parser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(Cypher25Parser.NOT, 0)

        def NOTHING(self):
            return self.getToken(Cypher25Parser.NOTHING, 0)

        def NOWAIT(self):
            return self.getToken(Cypher25Parser.NOWAIT, 0)

        def NULL(self):
            return self.getToken(Cypher25Parser.NULL, 0)

        def OF(self):
            return self.getToken(Cypher25Parser.OF, 0)

        def OFFSET(self):
            return self.getToken(Cypher25Parser.OFFSET, 0)

        def ON(self):
            return self.getToken(Cypher25Parser.ON, 0)

        def ONLY(self):
            return self.getToken(Cypher25Parser.ONLY, 0)

        def OPTIONAL(self):
            return self.getToken(Cypher25Parser.OPTIONAL, 0)

        def OPTIONS(self):
            return self.getToken(Cypher25Parser.OPTIONS, 0)

        def OPTION(self):
            return self.getToken(Cypher25Parser.OPTION, 0)

        def OR(self):
            return self.getToken(Cypher25Parser.OR, 0)

        def ORDER(self):
            return self.getToken(Cypher25Parser.ORDER, 0)

        def PASSWORD(self):
            return self.getToken(Cypher25Parser.PASSWORD, 0)

        def PASSWORDS(self):
            return self.getToken(Cypher25Parser.PASSWORDS, 0)

        def PATH(self):
            return self.getToken(Cypher25Parser.PATH, 0)

        def PATHS(self):
            return self.getToken(Cypher25Parser.PATHS, 0)

        def PLAINTEXT(self):
            return self.getToken(Cypher25Parser.PLAINTEXT, 0)

        def POINT(self):
            return self.getToken(Cypher25Parser.POINT, 0)

        def POPULATED(self):
            return self.getToken(Cypher25Parser.POPULATED, 0)

        def PRIMARY(self):
            return self.getToken(Cypher25Parser.PRIMARY, 0)

        def PRIMARIES(self):
            return self.getToken(Cypher25Parser.PRIMARIES, 0)

        def PRIVILEGE(self):
            return self.getToken(Cypher25Parser.PRIVILEGE, 0)

        def PRIVILEGES(self):
            return self.getToken(Cypher25Parser.PRIVILEGES, 0)

        def PROCEDURE(self):
            return self.getToken(Cypher25Parser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(Cypher25Parser.PROCEDURES, 0)

        def PROPERTIES(self):
            return self.getToken(Cypher25Parser.PROPERTIES, 0)

        def PROPERTY(self):
            return self.getToken(Cypher25Parser.PROPERTY, 0)

        def PROVIDER(self):
            return self.getToken(Cypher25Parser.PROVIDER, 0)

        def PROVIDERS(self):
            return self.getToken(Cypher25Parser.PROVIDERS, 0)

        def RANGE(self):
            return self.getToken(Cypher25Parser.RANGE, 0)

        def READ(self):
            return self.getToken(Cypher25Parser.READ, 0)

        def REALLOCATE(self):
            return self.getToken(Cypher25Parser.REALLOCATE, 0)

        def REDUCE(self):
            return self.getToken(Cypher25Parser.REDUCE, 0)

        def REL(self):
            return self.getToken(Cypher25Parser.REL, 0)

        def RELATIONSHIP(self):
            return self.getToken(Cypher25Parser.RELATIONSHIP, 0)

        def RELATIONSHIPS(self):
            return self.getToken(Cypher25Parser.RELATIONSHIPS, 0)

        def REMOVE(self):
            return self.getToken(Cypher25Parser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(Cypher25Parser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(Cypher25Parser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(Cypher25Parser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(Cypher25Parser.REPLICA, 0)

        def REPLICAS(self):
            return self.getToken(Cypher25Parser.REPLICAS, 0)

        def REPORT(self):
            return self.getToken(Cypher25Parser.REPORT, 0)

        def REQUIRE(self):
            return self.getToken(Cypher25Parser.REQUIRE, 0)

        def REQUIRED(self):
            return self.getToken(Cypher25Parser.REQUIRED, 0)

        def RESTRICT(self):
            return self.getToken(Cypher25Parser.RESTRICT, 0)

        def RETRY(self):
            return self.getToken(Cypher25Parser.RETRY, 0)

        def RETURN(self):
            return self.getToken(Cypher25Parser.RETURN, 0)

        def REVOKE(self):
            return self.getToken(Cypher25Parser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(Cypher25Parser.ROLE, 0)

        def ROLES(self):
            return self.getToken(Cypher25Parser.ROLES, 0)

        def ROW(self):
            return self.getToken(Cypher25Parser.ROW, 0)

        def ROWS(self):
            return self.getToken(Cypher25Parser.ROWS, 0)

        def SCAN(self):
            return self.getToken(Cypher25Parser.SCAN, 0)

        def SECONDARY(self):
            return self.getToken(Cypher25Parser.SECONDARY, 0)

        def SECONDARIES(self):
            return self.getToken(Cypher25Parser.SECONDARIES, 0)

        def SEC(self):
            return self.getToken(Cypher25Parser.SEC, 0)

        def SECOND(self):
            return self.getToken(Cypher25Parser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(Cypher25Parser.SECONDS, 0)

        def SEEK(self):
            return self.getToken(Cypher25Parser.SEEK, 0)

        def SERVER(self):
            return self.getToken(Cypher25Parser.SERVER, 0)

        def SERVERS(self):
            return self.getToken(Cypher25Parser.SERVERS, 0)

        def SET(self):
            return self.getToken(Cypher25Parser.SET, 0)

        def SETTING(self):
            return self.getToken(Cypher25Parser.SETTING, 0)

        def SETTINGS(self):
            return self.getToken(Cypher25Parser.SETTINGS, 0)

        def SHARD(self):
            return self.getToken(Cypher25Parser.SHARD, 0)

        def SHARDS(self):
            return self.getToken(Cypher25Parser.SHARDS, 0)

        def SHORTEST(self):
            return self.getToken(Cypher25Parser.SHORTEST, 0)

        def SHORTEST_PATH(self):
            return self.getToken(Cypher25Parser.SHORTEST_PATH, 0)

        def SHOW(self):
            return self.getToken(Cypher25Parser.SHOW, 0)

        def SIGNED(self):
            return self.getToken(Cypher25Parser.SIGNED, 0)

        def SINGLE(self):
            return self.getToken(Cypher25Parser.SINGLE, 0)

        def SKIPROWS(self):
            return self.getToken(Cypher25Parser.SKIPROWS, 0)

        def START(self):
            return self.getToken(Cypher25Parser.START, 0)

        def STARTS(self):
            return self.getToken(Cypher25Parser.STARTS, 0)

        def STATUS(self):
            return self.getToken(Cypher25Parser.STATUS, 0)

        def STOP(self):
            return self.getToken(Cypher25Parser.STOP, 0)

        def VARCHAR(self):
            return self.getToken(Cypher25Parser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(Cypher25Parser.STRING, 0)

        def SUPPORTED(self):
            return self.getToken(Cypher25Parser.SUPPORTED, 0)

        def SUSPENDED(self):
            return self.getToken(Cypher25Parser.SUSPENDED, 0)

        def TARGET(self):
            return self.getToken(Cypher25Parser.TARGET, 0)

        def TERMINATE(self):
            return self.getToken(Cypher25Parser.TERMINATE, 0)

        def TEXT(self):
            return self.getToken(Cypher25Parser.TEXT, 0)

        def THEN(self):
            return self.getToken(Cypher25Parser.THEN, 0)

        def TIME(self):
            return self.getToken(Cypher25Parser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(Cypher25Parser.TIMESTAMP, 0)

        def TIMEZONE(self):
            return self.getToken(Cypher25Parser.TIMEZONE, 0)

        def TO(self):
            return self.getToken(Cypher25Parser.TO, 0)

        def TOPOLOGY(self):
            return self.getToken(Cypher25Parser.TOPOLOGY, 0)

        def TRAILING(self):
            return self.getToken(Cypher25Parser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(Cypher25Parser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(Cypher25Parser.TRANSACTIONS, 0)

        def TRAVERSE(self):
            return self.getToken(Cypher25Parser.TRAVERSE, 0)

        def TRIM(self):
            return self.getToken(Cypher25Parser.TRIM, 0)

        def TRUE(self):
            return self.getToken(Cypher25Parser.TRUE, 0)

        def TYPE(self):
            return self.getToken(Cypher25Parser.TYPE, 0)

        def TYPED(self):
            return self.getToken(Cypher25Parser.TYPED, 0)

        def TYPES(self):
            return self.getToken(Cypher25Parser.TYPES, 0)

        def UNION(self):
            return self.getToken(Cypher25Parser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(Cypher25Parser.UNIQUE, 0)

        def UNIQUENESS(self):
            return self.getToken(Cypher25Parser.UNIQUENESS, 0)

        def UNWIND(self):
            return self.getToken(Cypher25Parser.UNWIND, 0)

        def URL(self):
            return self.getToken(Cypher25Parser.URL, 0)

        def USE(self):
            return self.getToken(Cypher25Parser.USE, 0)

        def USER(self):
            return self.getToken(Cypher25Parser.USER, 0)

        def USERS(self):
            return self.getToken(Cypher25Parser.USERS, 0)

        def USING(self):
            return self.getToken(Cypher25Parser.USING, 0)

        def VALUE(self):
            return self.getToken(Cypher25Parser.VALUE, 0)

        def VECTOR(self):
            return self.getToken(Cypher25Parser.VECTOR, 0)

        def VERTEX(self):
            return self.getToken(Cypher25Parser.VERTEX, 0)

        def WAIT(self):
            return self.getToken(Cypher25Parser.WAIT, 0)

        def WHEN(self):
            return self.getToken(Cypher25Parser.WHEN, 0)

        def WHERE(self):
            return self.getToken(Cypher25Parser.WHERE, 0)

        def WITH(self):
            return self.getToken(Cypher25Parser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(Cypher25Parser.WITHOUT, 0)

        def WRITE(self):
            return self.getToken(Cypher25Parser.WRITE, 0)

        def XOR(self):
            return self.getToken(Cypher25Parser.XOR, 0)

        def YIELD(self):
            return self.getToken(Cypher25Parser.YIELD, 0)

        def ZONE(self):
            return self.getToken(Cypher25Parser.ZONE, 0)

        def ZONED(self):
            return self.getToken(Cypher25Parser.ZONED, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_unescapedSymbolicNameString_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterUnescapedSymbolicNameString_'):
                listener.enterUnescapedSymbolicNameString_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitUnescapedSymbolicNameString_'):
                listener.exitUnescapedSymbolicNameString_(self)

    def unescapedSymbolicNameString_(self):
        localctx = Cypher25Parser.UnescapedSymbolicNameString_Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 680, self.RULE_unescapedSymbolicNameString_)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3863
            _la = self._input.LA(1)
            if not (
                (
                    ((_la - 11) & ~0x3F) == 0
                    and ((1 << (_la - 11)) & -60129804289) != 0
                )
                or (
                    ((_la - 75) & ~0x3F) == 0
                    and ((1 << (_la - 75)) & -571746050638069) != 0
                )
                or (
                    ((_la - 139) & ~0x3F) == 0
                    and ((1 << (_la - 139)) & -64626319361) != 0
                )
                or (
                    ((_la - 203) & ~0x3F) == 0
                    and ((1 << (_la - 203)) & -36169534648353073) != 0
                )
                or (
                    ((_la - 267) & ~0x3F) == 0
                    and ((1 << (_la - 267)) & 36028797018832895) != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndOfFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(
            self,
            parser,
            parent: ParserRuleContext | None = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Cypher25Parser.EOF, 0)

        def getRuleIndex(self):
            return Cypher25Parser.RULE_endOfFile

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'enterEndOfFile'):
                listener.enterEndOfFile(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, 'exitEndOfFile'):
                listener.exitEndOfFile(self)

    def endOfFile(self):
        localctx = Cypher25Parser.EndOfFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_endOfFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3865
            self.match(Cypher25Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
